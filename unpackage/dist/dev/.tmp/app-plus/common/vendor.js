(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\n  for (var i = $children.length - 1; i >= 0; i--) {\n    var childVm = $children[i];\n    if (childVm.$scope._$vueId === vuePid) {\n      return childVm;\n    }\n  }\n  // 反向递归查找\n  var parentVm;\n  for (var _i = $children.length - 1; _i >= 0; _i--) {\n    parentVm = findVmByVueId($children[_i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = {\n    multipleSlots: true,\n    addGlobalClass: true };\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 104:
/*!************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/js/app.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 105));var _log = _interopRequireDefault(__webpack_require__(/*! ../config/js/log */ 108));\nvar _picker = __webpack_require__(/*! ../config/js/picker */ 109);\nvar _interfaces = _interopRequireDefault(__webpack_require__(/*! ../config/js/interfaces */ 110));\nvar _input = __webpack_require__(/*! ../config/js/input */ 111);\nvar _pics = __webpack_require__(/*! ../config/js/pics */ 112);\nvar _sms = _interopRequireDefault(__webpack_require__(/*! ../config/js/sms */ 114));\nvar _Msg = __webpack_require__(/*! ./Msg.js */ 113);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _QSForm = _interopRequireDefault(__webpack_require__(/*! ./QSForm.js */ 115));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);}_next(undefined);});};}var Sys = uni.getSystemInfoSync();var getPickerAsyncData = /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(obj) {var _this, value, index, launch, datas, oldValue, customId, linkageNum, data_0, data_1, sendData, newData_1, _newData_, newData_2, _newData_2, _newData_3;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0: // picker-custom与picker-custom2的逐级获取数据函数\n            _this = this;_this.waiting = true; // 在获取数据时不许用户点确定\n            obj.linkageNum = Number(obj.linkageNum);value = obj.value, index = obj.index, launch = obj.launch, datas = obj.datas, oldValue = obj.oldValue, customId = obj.customId, linkageNum = obj.linkageNum; // picker的value值， 需改变数据的变量名， 是否初始化时使用该函数，页面当前数据: {data_0: 第一列数据, data_1: 第二列数据, data_2: 第三列数据}, 旧的picker的value值, 逐级获取数据时决定携带数据的变量名\n            data_0 = datas.data_0, data_1 = datas.data_1; // 页面当前数据: {data_0: 第一列数据, data_1: 第二列数据, data_2: 第三列数据}\n            // 使用sendData访问接口获取数据, 最终需要给async_1、async_2赋值\n            sendData = {};_context.prev = 6;_context.t0 = linkageNum;_context.next = _context.t0 === 2 ? 10 : _context.t0 === 3 ? 22 : 85;break;case 10:if (!_this.memoryData_1[value[0]]) {_context.next = 14;break;} // 查询记忆数据\n            _this.async_1 = _toConsumableArray(_this.memoryData_1[value[0]]); // 直接赋值记忆数据\n            _context.next = 20;break;case 14:sendData = (0, _picker.getSendData)(obj); // 访问接口携带参数\n            _context.next = 17;return (0, _picker.getAsyncDataFc)(sendData);case 17:newData_1 = _context.sent; // 从接口获取第二列的数据\n            _this.async_1 = _toConsumableArray(newData_1); // 赋值\n            _this.memoryData_1[value[0]] = _toConsumableArray(newData_1); // 记忆数据\n          case 20:if (launch) {// 首次初始化 value为传进来的defaultValue\n              _this.value[1] = value[1]; // 初始化可以赋值初始化的值\n            } else {_this.value[1] = 0; // 第二列value重置为0\n            }return _context.abrupt(\"break\", 85);case 22:if (!launch) {_context.next = 40;break;} // 首次初始化 value为传进来的defaultValue\n            // 获取第二列数据\n            sendData = (0, _picker.getSendData)(_objectSpread({}, obj, { column: 0 })); // 访问接口携带参数\n            _context.next = 26;return (0, _picker.getAsyncDataFc)(sendData);case 26:_newData_ = _context.sent; // 从接口获取第二列的数据\n            _this.async_1 = _toConsumableArray(_newData_); // 给第二列赋值\n            _this.memoryData_1[value[0]] = _toConsumableArray(_newData_); // 记忆数据\n            _this.value[1] = value[1]; // 初始化可以赋值初始化的值\n            // 获取第三列数据\n            sendData = (0, _picker.getSendData)(_objectSpread({}, obj, { datas: _objectSpread({}, datas, { data_1: _toConsumableArray(_newData_) }), column: 1 })); // 访问接口携带参数\n            _context.next = 33;return (0, _picker.getAsyncDataFc)(sendData);case 33:newData_2 = _context.sent;_this.async_2 = _toConsumableArray(newData_2); // 给第三列赋值\n            if (!_this.memoryData_2[value[0]]) _this.memoryData_2[value[0]] = [];_this.memoryData_2[value[0]][value[1]] = _toConsumableArray(newData_2); // 记忆数据\n            _this.value[2] = value[2]; // 初始化可以赋值初始化的值\n            _context.next = 84;break;case 40:_context.t1 = index;_context.next = _context.t1 === 0 ? 43 : _context.t1 === 1 ? 67 : 83;break;case 43:if (!_this.memoryData_1[value[0]]) {_context.next = 47;break;} // 查询记忆数据\n            _newData_2 = _toConsumableArray(_this.memoryData_1[value[0]]); // 直接赋值记忆数据\n            _context.next = 52;break;case 47:sendData = (0, _picker.getSendData)(_objectSpread({}, obj, { column: 0 })); // 访问接口携带参数\n            _context.next = 50;return (0, _picker.getAsyncDataFc)(sendData);case 50:_newData_2 = _context.sent;_this.memoryData_1[value[0]] = _toConsumableArray(_newData_2); // 记忆数据\n          case 52:_this.async_1 = _toConsumableArray(_newData_2); // 给第二列赋值\n            _this.value[1] = 0; // 初始化可以赋值初始化的值\n            // 获取第三列数据\n            if (!_this.memoryData_2[value[0]]) _this.memoryData_2[value[0]] = [];if (!_this.memoryData_2[value[0]][value[1]]) {_context.next = 59;break;} // 查询记忆数据\n            _newData_3 = _toConsumableArray(_this.memoryData_2[value[0]][value[1]]); // 直接赋值记忆数据\n            _context.next = 64;break;case 59:sendData = (0, _picker.getSendData)(_objectSpread({}, obj, { datas: _objectSpread({}, datas, { data_1: _toConsumableArray(_newData_2) }), column: 1 })); // 访问接口携带参数\n            _context.next = 62;return (0, _picker.getAsyncDataFc)(sendData);case 62:_newData_3 = _context.sent;_this.memoryData_2[value[0]][value[1]] = _toConsumableArray(_newData_3); // 记忆数据\n          case 64:_this.async_2 = _toConsumableArray(_newData_3); // 给第三列赋值\n            _this.value[2] = 0; // 初始化可以赋值初始化的值\n            return _context.abrupt(\"break\", 84);case 67: // 第二列更改\n            (0, _log.default)('第二列更改');if (!_this.memoryData_2[value[0]]) _this.memoryData_2[value[0]] = [];if (!_this.memoryData_2[value[0]][value[1]]) {_context.next = 74;break;} // 查询记忆数据\n            (0, _log.default)('有记忆数据');_newData_3 = _toConsumableArray(_this.memoryData_2[value[0]][value[1]]); // 直接赋值记忆数据\n            _context.next = 80;break;case 74:(0, _log.default)('没有记忆数据');sendData = (0, _picker.getSendData)(obj); // 访问接口携带参数\n            _context.next = 78;return (0, _picker.getAsyncDataFc)(sendData);case 78:_newData_3 = _context.sent;_this.memoryData_2[value[0]][value[1]] = _toConsumableArray(_newData_3); // 记忆数据\n          case 80:_this.async_2 = _toConsumableArray(_newData_3); // 给第三列赋值\n            _this.value[2] = 0; // 初始化可以赋值初始化的值\n            return _context.abrupt(\"break\", 84);case 83:return _context.abrupt(\"break\", 84);case 84:return _context.abrupt(\"break\", 85);case 85:_this.oldValue = _toConsumableArray(this.value);_this.waiting = false;_context.next = 94;break;case 89:_context.prev = 89;_context.t2 = _context[\"catch\"](6); //TODO handle the exception\n            (0, _log.default)(\"picker async \\u5F02\\u5E38: \".concat(JSON.stringify(_context.t2)));_this.oldValue = _toConsumableArray(this.value);_this.waiting = false;case 94:case \"end\":return _context.stop();}}}, _callee, this, [[6, 89]]);}));return function getPickerAsyncData(_x) {return _ref.apply(this, arguments);};}();var isArray = function isArray(data) {return data instanceof Array;};var isArrayAndHasLength = function isArrayAndHasLength(data) {return data instanceof Array && data.length > 0;};var typeObj = _defineProperty({ input: 'input', radio: 'radio', checkbox: 'checkbox', textarea: 'textarea', picker_date: 'picker_date', picker_city: 'picker_city', picker_custom: 'picker_custom', picker_custom2: 'picker_custom2', pics: 'pics', infinitePics: 'infinitePics' }, 'switch', 'switch'); // 勿动\nvar _app = { log: _log.default, //打印管理\n  typeObj: typeObj, UpLoadFile: _pics.UpLoadFile, pics_splice: _pics.pics_splice, sendSMS: _sms.default, verifyTypeObj: _input.verifyTypeObj, // 内置正则验证\n  filterTypeObj: _input.filterTypeObj, // 内置过滤函数\n  inputCustomTapFc: _input.inputCustomTapFc, inputCustomTapCatchFc: _input.inputCustomTapCatchFc, Sys: Sys, getPickerAsyncData: getPickerAsyncData, // picker-custom与picker-custom2的逐级获取数据函数\n  isArray: isArray, isArrayAndHasLength: isArrayAndHasLength, showToast: function showToast(msg, type) {uni.showToast({ title: msg, icon: type || 'none' });}, regTest: function regTest(name, val) {return _input.verifyTypeObj[name].reg.test(val);}, isNumber: function isNumber(param) {return typeof param === 'number';}, countDays: function countDays(Y, M, val, mode) {var days = [];if (mode >= 6) {days = new Date(Y, M + 1, 0).getDate();if (val) {val[2] = val[2] < days - 1 ? val[2] : days - 1;}}return { days: days, val: val };}, countYears: function countYears(sy, ey) {var _this = this;var y = [];var c = ey - sy;for (var i = 0; i <= c; i++) {y.push(sy + i);}return y;}, hideLoading: function hideLoading() {uni.hideLoading();}, showLoading: function showLoading(msg, ifmask) {\n    uni.showLoading({\n      title: msg,\n      mask: ifmask || false });\n\n  },\n  previewImage: function previewImage(imgPath, currentIndex) {\n    if (!(imgPath instanceof Array))\n    imgPath = [imgPath];\n    uni.previewImage({\n      urls: imgPath,\n      current: currentIndex || 0 });\n\n  },\n  filterParams: function filterParams(params, type, checkOneVariableName) {\n    if (params.length === 0)\n    return {};\n    var arr = getParamsArray(type);\n    if (params.length > 1) {\n      var o = {};\n      Object.keys(params).forEach(function (item, index) {\n        o[arr[index]] = params[index];\n      });\n      return o;\n    } else {\n      if (params[0] instanceof Object) {\n\n        if (checkOneVariableName) {\n          var ps = Object.keys(params[0]);\n          for (var i = 0; i < ps.length; i++) {\n            if (arr.includes(ps[i])) {\n              return params[0];\n            }\n          }\n          return _defineProperty({}, arr[0], params[0]);\n        } else {\n          return params[0];\n        }\n      } else {\n        return _defineProperty({}, arr[0], params[0]);\n      }\n    }\n  },\n  formatNum: function formatNum(num) {\n    return num < 10 ? '0' + num : num;\n  },\n  getUpLoadPromiseArray: function getUpLoadPromiseArray(_ref4) {var itemArray = _ref4.itemArray,customId = _ref4.customId,upLoadData = _ref4.upLoadData,required = _ref4.required;\n    if (itemArray.length === 0 && required) {\n      return Promise.reject(_objectSpread({}, _Msg.errObj['102'], { errMsg: '上传图片长度为零' }));\n    } else {\n      var promiseArr = [];\n      for (var i = 0; i < itemArray.length; i++) {\n        var item = itemArray[i];\n        if (item.path) {\n          promiseArr.push((0, _pics.UpLoadFile)(customId, item.path, upLoadData));\n        } else {\n          if (item.required) {\n            var errMsg = \"\".concat(item.title || \"\\u7B2C\".concat(i, \"\\u5F20\\u56FE\\u7247\"), \"\\u4E0D\\u80FD\\u4E3A\\u7A7A\");\n            uni.showToast({ title: errMsg, icon: 'none' });\n            return Promise.reject(_objectSpread({}, _Msg.errObj['102'], { errMsg: errMsg }));\n          } else {\n            promiseArr.push(Promise.resolve(''));\n          }\n        }\n      }\n      return new Promise(function (resolve, reject) {\n        var newArr = _toConsumableArray(itemArray);\n        uni.showLoading({\n          title: '上传文件中' });\n\n        Promise.all(promiseArr).then(function (res) {\n          uni.hideLoading();\n          for (var _i = 0; _i < newArr.length; _i++) {\n            newArr[_i].upLoadResult = res[_i];\n          }\n          resolve(newArr);\n        }).catch(function (err) {\n          uni.hideLoading();\n          reject(err);\n        });\n      });\n    }\n  },\n  delForm: function delForm(obj) {\n    _QSForm.default.del(obj);\n  },\n  setForm: function setForm(obj) {\n    _QSForm.default.set(obj);\n  },\n  getForm: function getForm(name) {var _QSFormObj$get =\n\n\n\n    _QSForm.default.get({\n      name: name }),status = _QSFormObj$get.status,result = _QSFormObj$get.result;\n\n    if (status === 'success') {\n      // log('getForm数据成功:' + JSON.stringify(res));\n      return new Promise( /*#__PURE__*/function () {var _ref5 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(resolve, reject) {var data, returnObj;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.prev = 0;\n\n\n                  data =\n                  result.data;_context2.t0 = _objectSpread;_context2.t1 = {\n\n                    name: name };_context2.next = 6;return (\n                    getValue(data));case 6:_context2.t2 = _context2.sent;returnObj = (0, _context2.t0)(_context2.t1, _context2.t2);\n\n                  resolve(returnObj);_context2.next = 14;break;case 11:_context2.prev = 11;_context2.t3 = _context2[\"catch\"](0);\n\n                  //TODO handle the exception\n                  reject(_context2.t3);case 14:case \"end\":return _context2.stop();}}}, _callee2, this, [[0, 11]]);}));return function (_x2, _x3) {return _ref5.apply(this, arguments);};}());\n\n\n    } else {\n      console.log(__f__(3, \" at components\\\\QS-inputs-split\\\\js\\\\app.js:325\"));\n      // log('getForm数据失败:' + JSON.stringify(res));\n      return Promise.reject(result);\n    }\n  } };var _default =\n\n_app;exports.default = _default;\n\nfunction renderUrlData(u, d) {\n  var c = '';\n  var n = 0;\n  if (d) {\n    for (var i in d) {\n      var itemd = d[i];\n      if (itemd instanceof Object || itemd instanceof Array) {\n        itemd = JSON.stringify(itemd);\n      }\n      if (n > 0)\n      c += '&' + i + '=' + itemd;else\n\n      c += '?' + i + '=' + itemd;\n      ++n;\n    }\n  }\n  return u + c;\n}\n\nvar errTypeObj = {\n  required: 'required',\n  verifyFc: 'verifyFc',\n  verifyType: 'verifyType' };\n\n\nfunction getValue(obj) {\n  var returnObj = {\n    data: {},\n    verifyErr: [] };\n\n  return new Promise( /*#__PURE__*/function () {var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(resolve, reject) {var o, _obj$o, title, name, variableName, value, type, required, verifyFc, verifyType, customId, upLoadData, verifyItem, notPathArr;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.prev = 0;_context3.t0 = _regenerator.default.keys(\n\n              obj);case 2:if ((_context3.t1 = _context3.t0()).done) {_context3.next = 46;break;}o = _context3.t1.value;_obj$o =\n\n\n\n\n\n\n\n\n\n\n\n              obj[o], title = _obj$o.title, name = _obj$o.name, variableName = _obj$o.variableName, value = _obj$o.value, type = _obj$o.type, required = _obj$o.required, verifyFc = _obj$o.verifyFc, verifyType = _obj$o.verifyType, customId = _obj$o.customId, upLoadData = _obj$o.upLoadData;\n              verifyItem = { result: true, checkErrType: [], title: title, name: name, variableName: variableName, type: type, errItemArray: [] };\n              returnObj.data[o] = value;_context3.t2 =\n              type;_context3.next = _context3.t2 ===\n              typeObj.input ? 10 : _context3.t2 ===\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              typeObj.textarea ? 14 : _context3.t2 ===\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n              typeObj.pics ? 18 : _context3.t2 ===\n\n\n\n\n\n\n\n\n\n\n\n\n\n              typeObj.infinitePics ? 33 : 41;break;case 10: //input\n              if (required && isEmpty(value)) {verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.required);}if (verifyFc && !verifyFc(value)) {if (verifyItem.result) verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.verifyFc);}if (verifyType && _input.verifyTypeObj[verifyType] !== undefined && _input.verifyTypeObj[verifyType].reg && !_input.verifyTypeObj[verifyType].reg.test(value)) {if (verifyItem.result) verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.verifyType);}return _context3.abrupt(\"break\", 43);case 14: //textarea\n              if (required && isEmpty(value)) {verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.required);}if (verifyFc && !verifyFc(value)) {if (verifyItem.result) verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.verifyFc);}if (verifyType && _input.verifyTypeObj[verifyType] !== undefined && _input.verifyTypeObj[verifyType].reg && !_input.verifyTypeObj[verifyType].reg.test(value)) {if (verifyItem.result) verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.verifyType);}return _context3.abrupt(\"break\", 43);case 18:if (!isArrayAndHasLength(value)) {_context3.next = 31;break;}notPathArr = value.filter(function (item) {return !item.path && item.required;});if (!(notPathArr.length > 0)) {_context3.next = 26;break;}if (verifyItem.result) verifyItem.result = false;verifyItem.checkErrType.push(errTypeObj.required);verifyItem.errItemArray = notPathArr;_context3.next = 29;break;case 26:_context3.next = 28;return _app.getUpLoadPromiseArray({ itemArray: value, customId: customId, upLoadData: upLoadData });case 28:returnObj.data[o] = _context3.sent;case 29:_context3.next = 32;break;case 31:returnObj.data[o] = [];case 32:return _context3.abrupt(\"break\", 43);case 33:if (!isArrayAndHasLength(value)) {_context3.next = 39;break;}_context3.next = 36;return _app.getUpLoadPromiseArray({ itemArray: value, customId: customId, upLoadData: upLoadData });case 36:returnObj.data[o] = _context3.sent;_context3.next = 40;break;case 39:\n\n              if (required) {\n                if (verifyItem.result) verifyItem.result = false;\n              } else {\n                returnObj.data[o] = [];\n              }case 40:return _context3.abrupt(\"break\", 43);case 41:\n\n\n              //default\n              if (required && isEmpty(value)) {\n                verifyItem.result = false;\n                verifyItem.checkErrType.push(errTypeObj.required);\n              }return _context3.abrupt(\"break\", 43);case 43:\n\n\n              if (!verifyItem.result) returnObj.verifyErr.push(verifyItem);_context3.next = 2;break;case 46:\n\n              resolve(returnObj);_context3.next = 52;break;case 49:_context3.prev = 49;_context3.t3 = _context3[\"catch\"](0);\n\n              //TODO handle the exception\n              reject(_context3.t3);case 52:case \"end\":return _context3.stop();}}}, _callee3, this, [[0, 49]]);}));return function (_x4, _x5) {return _ref6.apply(this, arguments);};}());\n\n\n}\n\nfunction isEmpty(val) {\n  var bl;\n  switch (typeof val) {\n    case 'object':\n      if (val instanceof Array) {\n        bl = val.length === 0;\n      }\n      break;\n    default:\n      bl = val === '';\n      break;}\n\n\n  return val === undefined || val === null || bl;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///104\n");

/***/ }),

/***/ 105:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 106);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDhCQUFxQiIsImZpbGUiOiIxMDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///105\n");

/***/ }),

/***/ 106:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 107);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG9CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiIxMDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xufSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///106\n");

/***/ }),

/***/ 107:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///107\n");

/***/ }),

/***/ 108:
/*!*******************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/config/js/log.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = log; /**\r\n                                                                                                   * 打印管理\r\n                                                                                                   * @param {String} t\r\n                                                                                                   */\nfunction log(t) {\n  console.log(__f__(t, \" at components\\\\QS-inputs-split\\\\config\\\\js\\\\log.js:6\")); // 若不想打印内容请注释\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvY29uZmlnL2pzL2xvZy5qcyJdLCJuYW1lcyI6WyJsb2ciLCJ0IiwiY29uc29sZSJdLCJtYXBwaW5ncyI6ImtJQUFBOzs7O0FBSWUsU0FBU0EsR0FBVCxDQUFhQyxDQUFiLEVBQWdCO0FBQzlCQyxTQUFPLENBQUNGLEdBQVIsT0FBWUMsQ0FBWiw0REFEOEIsQ0FDZDtBQUNoQixDIiwiZmlsZSI6IjEwOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDmiZPljbDnrqHnkIZcclxuICogQHBhcmFtIHtTdHJpbmd9IHRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvZyh0KSB7XHJcblx0Y29uc29sZS5sb2codCk7XHQvLyDoi6XkuI3mg7PmiZPljbDlhoXlrrnor7fms6jph4pcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///108\n");

/***/ }),

/***/ 109:
/*!**********************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/config/js/picker.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.getSendData = getSendData;exports.getAsyncDataFc = getAsyncDataFc;var _log = _interopRequireDefault(__webpack_require__(/*! ./log */ 108));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n/**\r\n                                                                                                                                                                                                                                                                                                        * picker逐级获取-获取访问接口时的自定义携带参数\r\n                                                                                                                                                                                                                                                                                                        * @param {Object} obj\r\n                                                                                                                                                                                                                                                                                                        */\nfunction getSendData(obj) {var\n\n\n  value =\n\n\n\n\n\n\n\n  obj.value,launch = obj.launch,customId = obj.customId,index = obj.index,linkageNum = obj.linkageNum,type = obj.type,datas = obj.datas,column = obj.column;var\n\n  data_0 =\n\n  datas.data_0,data_1 = datas.data_1; // 页面当前数据: {data_0: 第一列数据, data_1: 第二列数据, data_2: 第三列数据}\n  var vbName_0; // 第一列数据获取value值的变量名\n  var vbName_1; // 第二列数据获取value值的变量名\n  switch (customId) {// 根据customId决定vbName的赋值走向\n    case '自定义标识':\n      vbName_0 = '';\n      vbName_1 = '';\n      break;\n    default:\n      vbName_0 = 'value';\n      vbName_1 = 'value';\n      break;}\n\n\n  var sendData = {}; // 访问接口携带的数据\n  switch (linkageNum) {\n    case 2: // 二级联动\n      sendData.id = data_0[value[0]][vbName_0];\n      break;\n    case 3: // 三级联动\n      if (launch || index === 0) {// 首次初始化 或 第一列更改\n        switch (column) {\n          case 0: // 获取第一列中用以获取sendData的数据\n            sendData.id = data_0[value[0]][vbName_0];\n            break;\n          case 1: // 获取第二列中用以获取sendData的数据\n            sendData.id = data_1[0][vbName_1];\n            break;\n          default:\n            (0, _log.default)('column 超限');\n            break;}\n\n      } else {// 第二列更改\n        sendData.id = data_1[value[1]][vbName_1];\n      }\n      break;\n    default:\n      (0, _log.default)('级数不存在');\n      break;}\n\n  return sendData; // 最终return sendData\n\n}\n\n/**\r\n   * picker逐级获取-获取逐级数据\r\n   * @param {Object} obj\r\n   */\nfunction getAsyncDataFc(obj) {// 访问接口获取picker自定义逐级数据\n  return new Promise(function (rs, rj) {\n    uni.showLoading({ //不需要可以删除, 别忘了下面的hideLoading\n      title: '获取数据中……' });\n\n    setTimeout(function () {// 访问接口获取数据 (需自己修改)\n      var data;\n      switch (obj.id) {\n        case 'a':\n          data = [{\n            name: 'a_a',\n            value: 'a_a' },\n          {\n            name: 'a_b',\n            value: 'a_b' }];\n\n          break;\n        case 'b':\n          data = [{\n            name: 'b_a',\n            value: 'b_a' },\n          {\n            name: 'b_b',\n            value: 'b_b' }];\n\n          break;\n        case 'c':\n          data = [{\n            name: 'c_a',\n            value: 'c_a' },\n          {\n            name: 'c_b',\n            value: 'c_b' }];\n\n          break;\n        case 'a_a':\n          data = [{\n            name: 'a_a_a',\n            value: 'a_a_a' },\n          {\n            name: 'a_a_b',\n            value: 'a_a_b' }];\n\n          break;\n        case 'a_b':\n          data = [{\n            name: 'a_b_a',\n            value: 'a_b_a' },\n          {\n            name: 'a_b_b',\n            value: 'a_b_b' }];\n\n          break;\n        case 'b_a':\n          data = [{\n            name: 'b_a_a',\n            value: 'b_a_a' },\n          {\n            name: 'b_a_b',\n            value: 'b_a_b' }];\n\n          break;\n        case 'b_b':\n          data = [{\n            name: 'b_b_a',\n            value: 'b_b_a' },\n          {\n            name: 'b_b_b',\n            value: 'b_b_b' }];\n\n          break;\n        case 'c_a':\n          data = [{\n            name: 'c_a_a',\n            value: 'c_a_a' },\n          {\n            name: 'c_a_b',\n            value: 'c_a_b' }];\n\n          break;\n        case 'c_b':\n          data = [{\n            name: 'c_b_a',\n            value: 'c_b_a' },\n          {\n            name: 'c_b_b',\n            value: 'c_b_b' }];\n\n          break;\n        default:\n          break;}\n\n      rs(data);\n      uni.hideLoading(); //不需要可以删除\n    }, 1000);\n  });\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///109\n");

/***/ }),

/***/ 110:
/*!**************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/config/js/interfaces.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  baseUrl: '', // 域名替换地址\n  upLoadImg: \"\" // 服务器地址(上传图片)\n};exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvY29uZmlnL2pzL2ludGVyZmFjZXMuanMiXSwibmFtZXMiOlsiYmFzZVVybCIsInVwTG9hZEltZyJdLCJtYXBwaW5ncyI6InNHQUFnQjtBQUNmQSxTQUFPLEVBQUUsRUFETSxFQUNGO0FBQ2JDLFdBQVMsSUFGTSxDQUVBO0FBRkEsQyIsImZpbGUiOiIxMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAge1xyXG5cdGJhc2VVcmw6ICcnLFx0Ly8g5Z+f5ZCN5pu/5o2i5Zyw5Z2AXHJcblx0dXBMb2FkSW1nOiBgYCwgLy8g5pyN5Yqh5Zmo5Zyw5Z2AKOS4iuS8oOWbvueJhylcclxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///110\n");

/***/ }),

/***/ 111:
/*!*********************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/config/js/input.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.inputCustomTapFc = inputCustomTapFc;exports.inputCustomTapCatchFc = inputCustomTapCatchFc;exports.verifyTypeObj = exports.filterTypeObj = void 0;var _log = _interopRequireDefault(__webpack_require__(/*! ./log.js */ 108));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n/**\r\n                                                                                                                                                                                                                                                                                                                                                                                          * inputTap custom类型点击触发函数\r\n                                                                                                                                                                                                                                                                                                                                                                                          * @param {any} customId\r\n                                                                                                                                                                                                                                                                                                                                                                                          */\nfunction inputCustomTapFc(customId) {// 必须return一个Promise对象, 可以resolve数据给相应的input赋值\n  return new Promise(function (resolve, reject) {\n    switch (customId) {\n      case '自定义id':\n        break;\n      default:\n        uni.scanCode({ //示例, 扫码后赋值\n          success: function success(res) {\n            (0, _log.default)('条码类型：' + res.scanType);\n            (0, _log.default)('条码内容：' + res.result);\n            resolve(res.result);\n          } });\n\n        break;}\n\n  });\n}\n/**\r\n   * inputTap custom类型点击触发函数异常时触发的函数\r\n   * @param {any} customId\r\n   * @param {Object} e\r\n   */\nfunction inputCustomTapCatchFc(customId, e) {// inputTap custom类型触发的函数异常时触发的函数, 必须return一个Promise对象, 可以resolve数据给相应的input赋值\n  return new Promise(function (resolve, reject) {\n    switch (customId) {\n      case '自定义id':\n        break;\n      default:\n\n        break;}\n\n  });\n}\n/**\r\n   * 内置过滤函数\r\n   */\nvar filterTypeObj = { // 可根据需求自行添加拓展\n  twoDecimalPlaces: function twoDecimalPlaces(value) {// 必须接受一个参数\n    value = value.replace(/[^\\d.]/g, \"\"); //清除“数字”和“.”以外的字符\n    value = value.replace(/\\.{2,}/g, \".\"); //只保留第一个. 清除多余的\n    value = value.replace(/^(\\-)*(\\d+)\\.(\\d).*$/, '$1$2.$3'); //只能输入1个小数 \n    return value; // 必须return value\n  } };\n\n\n\n// 注意只可增加不可删除\n// 注意只可增加不可删除\n// 注意只可增加不可删除\n/**\r\n * 内置正则校验\r\n */exports.filterTypeObj = filterTypeObj;\nvar verifyTypeObj = {\n  Tel: {\n    reg: /^[1][0-9]{10}$/,\n    name: '手机号' },\n\n  Email: {\n    reg: /^([0-9A-Za-z\\-_\\.]+)@([0-9a-z]+\\.[a-z]{2,3}(\\.[a-z]{2})?)$/,\n    name: '电子邮箱' },\n\n  idCart: {\n    reg: /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/,\n    name: '身份证号' },\n\n  NationalNumber: {\n    reg: /\\d{3}-\\d{8}|\\d{4}-\\d{7}/,\n    name: '国内号码' },\n\n  QQ: {\n    reg: /[1-9][0-9]{4,}/,\n    name: 'QQ号' },\n\n  PostalCode: {\n    reg: /[1-9]\\d{5}(?!\\d)/,\n    name: '邮政编码' },\n\n  IpAddress: {\n    reg: /\\d+\\.\\d+\\.\\d+\\.\\d+/,\n    name: 'IP地址' },\n\n  Chinese: {\n    reg: /[\\u4e00-\\u9fa5]/,\n    name: '中文字符' },\n\n  Char: {\n    reg: /^[A-Za-z]+$/,\n    name: '英文字母' },\n\n  Int: {\n    reg: /^\\d+$/,\n    name: '整数' },\n\n  Number: {\n    reg: /^([1-9]\\d*(\\.\\d+)?)|(\\d+(\\.\\d+))$/,\n    name: '数字' } };exports.verifyTypeObj = verifyTypeObj;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvY29uZmlnL2pzL2lucHV0LmpzIl0sIm5hbWVzIjpbImlucHV0Q3VzdG9tVGFwRmMiLCJjdXN0b21JZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5pIiwic2NhbkNvZGUiLCJzdWNjZXNzIiwicmVzIiwic2NhblR5cGUiLCJyZXN1bHQiLCJpbnB1dEN1c3RvbVRhcENhdGNoRmMiLCJlIiwiZmlsdGVyVHlwZU9iaiIsInR3b0RlY2ltYWxQbGFjZXMiLCJ2YWx1ZSIsInJlcGxhY2UiLCJ2ZXJpZnlUeXBlT2JqIiwiVGVsIiwicmVnIiwibmFtZSIsIkVtYWlsIiwiaWRDYXJ0IiwiTmF0aW9uYWxOdW1iZXIiLCJRUSIsIlBvc3RhbENvZGUiLCJJcEFkZHJlc3MiLCJDaGluZXNlIiwiQ2hhciIsIkludCIsIk51bWJlciJdLCJtYXBwaW5ncyI6ImtRQUFBLDRFO0FBQ0E7Ozs7QUFJTyxTQUFTQSxnQkFBVCxDQUEwQkMsUUFBMUIsRUFBb0MsQ0FBRTtBQUM1QyxTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdkMsWUFBUUgsUUFBUjtBQUNDLFdBQUssT0FBTDtBQUNDO0FBQ0Q7QUFDQ0ksV0FBRyxDQUFDQyxRQUFKLENBQWEsRUFBRTtBQUNkQyxpQkFBTyxFQUFFLGlCQUFTQyxHQUFULEVBQWM7QUFDdEIsOEJBQUksVUFBVUEsR0FBRyxDQUFDQyxRQUFsQjtBQUNBLDhCQUFJLFVBQVVELEdBQUcsQ0FBQ0UsTUFBbEI7QUFDQVAsbUJBQU8sQ0FBQ0ssR0FBRyxDQUFDRSxNQUFMLENBQVA7QUFDQSxXQUxXLEVBQWI7O0FBT0EsY0FYRjs7QUFhQSxHQWRNLENBQVA7QUFlQTtBQUNEOzs7OztBQUtPLFNBQVNDLHFCQUFULENBQStCVixRQUEvQixFQUF5Q1csQ0FBekMsRUFBNEMsQ0FBRTtBQUNwRCxTQUFPLElBQUlWLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdkMsWUFBUUgsUUFBUjtBQUNDLFdBQUssT0FBTDtBQUNDO0FBQ0Q7O0FBRUMsY0FMRjs7QUFPQSxHQVJNLENBQVA7QUFTQTtBQUNEOzs7QUFHTyxJQUFNWSxhQUFhLEdBQUcsRUFBRTtBQUM5QkMsa0JBRDRCLDRCQUNYQyxLQURXLEVBQ0osQ0FBRTtBQUN6QkEsU0FBSyxHQUFHQSxLQUFLLENBQUNDLE9BQU4sQ0FBYyxTQUFkLEVBQXlCLEVBQXpCLENBQVIsQ0FEdUIsQ0FDZTtBQUN0Q0QsU0FBSyxHQUFHQSxLQUFLLENBQUNDLE9BQU4sQ0FBYyxTQUFkLEVBQXlCLEdBQXpCLENBQVIsQ0FGdUIsQ0FFZ0I7QUFDdkNELFNBQUssR0FBR0EsS0FBSyxDQUFDQyxPQUFOLENBQWMsc0JBQWQsRUFBc0MsU0FBdEMsQ0FBUixDQUh1QixDQUdtQztBQUMxRCxXQUFPRCxLQUFQLENBSnVCLENBSVQ7QUFDZCxHQU4yQixFQUF0Qjs7OztBQVVQO0FBQ0E7QUFDQTtBQUNBOzs7QUFHTyxJQUFNRSxhQUFhLEdBQUc7QUFDNUJDLEtBQUcsRUFBRTtBQUNKQyxPQUFHLEVBQUUsZ0JBREQ7QUFFSkMsUUFBSSxFQUFFLEtBRkYsRUFEdUI7O0FBSzVCQyxPQUFLLEVBQUU7QUFDTkYsT0FBRyxFQUFFLDREQURDO0FBRU5DLFFBQUksRUFBRSxNQUZBLEVBTHFCOztBQVM1QkUsUUFBTSxFQUFFO0FBQ1BILE9BQUcsRUFBRSwwQ0FERTtBQUVQQyxRQUFJLEVBQUUsTUFGQyxFQVRvQjs7QUFhNUJHLGdCQUFjLEVBQUU7QUFDZkosT0FBRyxFQUFFLHlCQURVO0FBRWZDLFFBQUksRUFBRSxNQUZTLEVBYlk7O0FBaUI1QkksSUFBRSxFQUFFO0FBQ0hMLE9BQUcsRUFBRSxnQkFERjtBQUVIQyxRQUFJLEVBQUUsS0FGSCxFQWpCd0I7O0FBcUI1QkssWUFBVSxFQUFFO0FBQ1hOLE9BQUcsRUFBRSxrQkFETTtBQUVYQyxRQUFJLEVBQUUsTUFGSyxFQXJCZ0I7O0FBeUI1Qk0sV0FBUyxFQUFFO0FBQ1ZQLE9BQUcsRUFBRSxvQkFESztBQUVWQyxRQUFJLEVBQUUsTUFGSSxFQXpCaUI7O0FBNkI1Qk8sU0FBTyxFQUFFO0FBQ1JSLE9BQUcsRUFBRSxpQkFERztBQUVSQyxRQUFJLEVBQUUsTUFGRSxFQTdCbUI7O0FBaUM1QlEsTUFBSSxFQUFFO0FBQ0xULE9BQUcsRUFBRSxhQURBO0FBRUxDLFFBQUksRUFBRSxNQUZELEVBakNzQjs7QUFxQzVCUyxLQUFHLEVBQUU7QUFDSlYsT0FBRyxFQUFFLE9BREQ7QUFFSkMsUUFBSSxFQUFFLElBRkYsRUFyQ3VCOztBQXlDNUJVLFFBQU0sRUFBRTtBQUNQWCxPQUFHLEVBQUUsbUNBREU7QUFFUEMsUUFBSSxFQUFFLElBRkMsRUF6Q29CLEVBQXRCLEMiLCJmaWxlIjoiMTExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZy5qcyc7XHJcbi8qKlxyXG4gKiBpbnB1dFRhcCBjdXN0b23nsbvlnovngrnlh7vop6blj5Hlh73mlbBcclxuICogQHBhcmFtIHthbnl9IGN1c3RvbUlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW5wdXRDdXN0b21UYXBGYyhjdXN0b21JZCkgeyAvLyDlv4XpobtyZXR1cm7kuIDkuKpQcm9taXNl5a+56LGhLCDlj6/ku6VyZXNvbHZl5pWw5o2u57uZ55u45bqU55qEaW5wdXTotYvlgLxcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0c3dpdGNoIChjdXN0b21JZCkge1xyXG5cdFx0XHRjYXNlICfoh6rlrprkuYlpZCc6XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0dW5pLnNjYW5Db2RlKHsgLy/npLrkvossIOaJq+eggeWQjui1i+WAvFxyXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XHJcblx0XHRcdFx0XHRcdGxvZygn5p2h56CB57G75Z6L77yaJyArIHJlcy5zY2FuVHlwZSk7XHJcblx0XHRcdFx0XHRcdGxvZygn5p2h56CB5YaF5a6577yaJyArIHJlcy5yZXN1bHQpO1xyXG5cdFx0XHRcdFx0XHRyZXNvbHZlKHJlcy5yZXN1bHQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH0pXHJcbn1cclxuLyoqXHJcbiAqIGlucHV0VGFwIGN1c3Rvbeexu+Wei+eCueWHu+inpuWPkeWHveaVsOW8guW4uOaXtuinpuWPkeeahOWHveaVsFxyXG4gKiBAcGFyYW0ge2FueX0gY3VzdG9tSWRcclxuICogQHBhcmFtIHtPYmplY3R9IGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnB1dEN1c3RvbVRhcENhdGNoRmMoY3VzdG9tSWQsIGUpIHsgLy8gaW5wdXRUYXAgY3VzdG9t57G75Z6L6Kem5Y+R55qE5Ye95pWw5byC5bi45pe26Kem5Y+R55qE5Ye95pWwLCDlv4XpobtyZXR1cm7kuIDkuKpQcm9taXNl5a+56LGhLCDlj6/ku6VyZXNvbHZl5pWw5o2u57uZ55u45bqU55qEaW5wdXTotYvlgLxcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0c3dpdGNoIChjdXN0b21JZCkge1xyXG5cdFx0XHRjYXNlICfoh6rlrprkuYlpZCc6XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH0pXHJcbn1cclxuLyoqXHJcbiAqIOWGhee9rui/h+a7pOWHveaVsFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGZpbHRlclR5cGVPYmogPSB7IC8vIOWPr+agueaNrumcgOaxguiHquihjOa3u+WKoOaLk+WxlVxyXG5cdHR3b0RlY2ltYWxQbGFjZXModmFsdWUpIHsgLy8g5b+F6aG75o6l5Y+X5LiA5Liq5Y+C5pWwXHJcblx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxkLl0vZywgXCJcIik7IC8v5riF6Zmk4oCc5pWw5a2X4oCd5ZKM4oCcLuKAneS7peWklueahOWtl+esplxyXG5cdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXC57Mix9L2csIFwiLlwiKTsgLy/lj6rkv53nlZnnrKzkuIDkuKouIOa4hemZpOWkmuS9meeahFxyXG5cdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKFxcLSkqKFxcZCspXFwuKFxcZCkuKiQvLCAnJDEkMi4kMycpOyAvL+WPquiDvei+k+WFpTHkuKrlsI/mlbAgXHJcblx0XHRyZXR1cm4gdmFsdWU7IC8vIOW/hemhu3JldHVybiB2YWx1ZVxyXG5cdH1cclxufTtcclxuXHJcblxyXG4vLyDms6jmhI/lj6rlj6/lop7liqDkuI3lj6/liKDpmaRcclxuLy8g5rOo5oSP5Y+q5Y+v5aKe5Yqg5LiN5Y+v5Yig6ZmkXHJcbi8vIOazqOaEj+WPquWPr+WinuWKoOS4jeWPr+WIoOmZpFxyXG4vKipcclxuICog5YaF572u5q2j5YiZ5qCh6aqMXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdmVyaWZ5VHlwZU9iaiA9IHtcclxuXHRUZWw6IHtcclxuXHRcdHJlZzogL15bMV1bMC05XXsxMH0kLyxcclxuXHRcdG5hbWU6ICfmiYvmnLrlj7cnXHJcblx0fSxcclxuXHRFbWFpbDoge1xyXG5cdFx0cmVnOiAvXihbMC05QS1aYS16XFwtX1xcLl0rKUAoWzAtOWEtel0rXFwuW2Etel17MiwzfShcXC5bYS16XXsyfSk/KSQvLFxyXG5cdFx0bmFtZTogJ+eUteWtkOmCrueusSdcclxuXHR9LFxyXG5cdGlkQ2FydDoge1xyXG5cdFx0cmVnOiAvKF5cXGR7MTV9JCl8KF5cXGR7MTh9JCl8KF5cXGR7MTd9KFxcZHxYfHgpJCkvLFxyXG5cdFx0bmFtZTogJ+i6q+S7veivgeWPtydcclxuXHR9LFxyXG5cdE5hdGlvbmFsTnVtYmVyOiB7XHJcblx0XHRyZWc6IC9cXGR7M30tXFxkezh9fFxcZHs0fS1cXGR7N30vLFxyXG5cdFx0bmFtZTogJ+WbveWGheWPt+eggSdcclxuXHR9LFxyXG5cdFFROiB7XHJcblx0XHRyZWc6IC9bMS05XVswLTldezQsfS8sXHJcblx0XHRuYW1lOiAnUVHlj7cnXHJcblx0fSxcclxuXHRQb3N0YWxDb2RlOiB7XHJcblx0XHRyZWc6IC9bMS05XVxcZHs1fSg/IVxcZCkvLFxyXG5cdFx0bmFtZTogJ+mCruaUv+e8lueggSdcclxuXHR9LFxyXG5cdElwQWRkcmVzczoge1xyXG5cdFx0cmVnOiAvXFxkK1xcLlxcZCtcXC5cXGQrXFwuXFxkKy8sXHJcblx0XHRuYW1lOiAnSVDlnLDlnYAnXHJcblx0fSxcclxuXHRDaGluZXNlOiB7XHJcblx0XHRyZWc6IC9bXFx1NGUwMC1cXHU5ZmE1XS8sXHJcblx0XHRuYW1lOiAn5Lit5paH5a2X56ymJ1xyXG5cdH0sXHJcblx0Q2hhcjoge1xyXG5cdFx0cmVnOiAvXltBLVphLXpdKyQvLFxyXG5cdFx0bmFtZTogJ+iLseaWh+Wtl+avjSdcclxuXHR9LFxyXG5cdEludDoge1xyXG5cdFx0cmVnOiAvXlxcZCskLyxcclxuXHRcdG5hbWU6ICfmlbTmlbAnXHJcblx0fSxcclxuXHROdW1iZXI6IHtcclxuXHRcdHJlZzogL14oWzEtOV1cXGQqKFxcLlxcZCspPyl8KFxcZCsoXFwuXFxkKykpJC8sXHJcblx0XHRuYW1lOiAn5pWw5a2XJ1xyXG5cdH1cclxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///111\n");

/***/ }),

/***/ 112:
/*!********************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/config/js/pics.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.UpLoadFile = UpLoadFile;exports.pics_splice = pics_splice;var _log = _interopRequireDefault(__webpack_require__(/*! ./log */ 108));\nvar _interfaces = _interopRequireDefault(__webpack_require__(/*! ./interfaces */ 110));\nvar _Msg = __webpack_require__(/*! ../../js/Msg.js */ 113);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n/**\r\n上传文件方法\r\nparam {any} customId\r\nparam {String} filePath\r\nparam {Object} picsUpLoadData\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  */\nfunction UpLoadFile(customId, filePath, picsUpLoadData) {// 上传文件方法: (自定义上传标识, 文件路径, 自定义上传数据)\n  (0, _log.default)('自定义上传图片携带数据:' + JSON.stringify(picsUpLoadData));\n  if (_interfaces.default.baseUrl && filePath.indexOf(_interfaces.default.baseUrl) != -1) {//域名替换机制: 判断是否是从后端获取的图片路径, 若是 替换域名字符串为空后resolve. 也可以根据customId动态控制, 不需要则删除此代码\n    var replacePath = filePath.replace(_interfaces.default.baseUrl, '');\n    return Promise.resolve({\n      data: replacePath });\n\n  }\n  var _this = this;\n  var url = '';\n  var formData = {};\n  var name = '';\n  switch (customId) {//判断该项pics类型自带的UpLoadFileType, 根据此值来确定不同的url、formData、name\n    case 'UpLoadImage_1': //自定义的标识\n      url = '';\n      formData = {};\n      name = '';\n      break;\n    default: //若无判断需求可直接写在这里\n      url = _interfaces.default.upLoadImg;\n      formData = {};\n      name = '';\n      break;}\n\n  if (!url) {\n    uni.showToast({ title: '上传文件的url不能为空', icon: 'none' });\n    return Promise.reject(_objectSpread({}, _Msg.errObj['102'], { errMsg: '上传文件的url不能为空' }));\n  }\n  if (!filePath) {\n    uni.showToast({ title: '上传文件的filePath不能为空', icon: 'none' });\n    return Promise.reject(_objectSpread({}, _Msg.errObj['102'], { errMsg: '上传文件的filePath不能为空' }));\n  }\n  var obj = {\n    url: url,\n    name: name,\n    filePath: filePath };\n\n\n  if (plus.os.name.toLowerCase() === 'ios') {\n    if (Object.keys(formData).length > 0) obj.url = renderUrlData(obj.url, formData);\n  } else {\n    obj.formData = formData;\n  }\n\n\n\n\n  return uni.uploadFile(obj);\n}\n\n/**\r\n   * 拼接上传返回数据方法\r\n   * @param {String} vals\r\n   * @param {String} val\r\n   */\nfunction pics_splice(vals, val) {// 拼接图片上传返回后的数据, vals是拼接后的数据， val是新添项\n  if (typeof vals !== 'string') {// 第一次传进来是一个数组\n    vals = val || '|'; // 可更改分隔符\n    return vals;\n  }\n  vals += val ? '|' + val : '|';\n  return vals; // 必须return vals\n}\n\nfunction renderUrlData(u, d) {\n  var c = '';\n  var n = 0;\n  if (d)\n  for (var i in d) {\n    if (n > 0)\n    c += '&' + i + '=' + d[i];else\n\n    c += '?' + i + '=' + d[i];\n    ++n;\n  }\n  return u + c;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvY29uZmlnL2pzL3BpY3MuanMiXSwibmFtZXMiOlsiVXBMb2FkRmlsZSIsImN1c3RvbUlkIiwiZmlsZVBhdGgiLCJwaWNzVXBMb2FkRGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbnRlcmZhY2VzIiwiYmFzZVVybCIsImluZGV4T2YiLCJyZXBsYWNlUGF0aCIsInJlcGxhY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRhdGEiLCJfdGhpcyIsInVybCIsImZvcm1EYXRhIiwibmFtZSIsInVwTG9hZEltZyIsInVuaSIsInNob3dUb2FzdCIsInRpdGxlIiwiaWNvbiIsInJlamVjdCIsImVyck9iaiIsImVyck1zZyIsIm9iaiIsInBsdXMiLCJvcyIsInRvTG93ZXJDYXNlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInJlbmRlclVybERhdGEiLCJ1cGxvYWRGaWxlIiwicGljc19zcGxpY2UiLCJ2YWxzIiwidmFsIiwidSIsImQiLCJjIiwibiIsImkiXSwibWFwcGluZ3MiOiIyS0FBQTtBQUNBO0FBQ0EsMkQ7QUFDQTs7Ozs7O0FBTU8sU0FBU0EsVUFBVCxDQUFvQkMsUUFBcEIsRUFBOEJDLFFBQTlCLEVBQXdDQyxjQUF4QyxFQUF3RCxDQUFFO0FBQ2hFLG9CQUFJLGlCQUFpQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVGLGNBQWYsQ0FBckI7QUFDQSxNQUFJRyxvQkFBV0MsT0FBWCxJQUFzQkwsUUFBUSxDQUFDTSxPQUFULENBQWlCRixvQkFBV0MsT0FBNUIsS0FBd0MsQ0FBQyxDQUFuRSxFQUFzRSxDQUFFO0FBQ3ZFLFFBQU1FLFdBQVcsR0FBR1AsUUFBUSxDQUFDUSxPQUFULENBQWlCSixvQkFBV0MsT0FBNUIsRUFBcUMsRUFBckMsQ0FBcEI7QUFDQSxXQUFPSSxPQUFPLENBQUNDLE9BQVIsQ0FBZ0I7QUFDdEJDLFVBQUksRUFBRUosV0FEZ0IsRUFBaEIsQ0FBUDs7QUFHQTtBQUNELE1BQUlLLEtBQUssR0FBRyxJQUFaO0FBQ0EsTUFBSUMsR0FBRyxHQUFHLEVBQVY7QUFDQSxNQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBLE1BQUlDLElBQUksR0FBRyxFQUFYO0FBQ0EsVUFBUWhCLFFBQVIsR0FBb0I7QUFDbkIsU0FBSyxlQUFMLEVBQXNCO0FBQ3JCYyxTQUFHLEdBQUcsRUFBTjtBQUNBQyxjQUFRLEdBQUcsRUFBWDtBQUNBQyxVQUFJLEdBQUcsRUFBUDtBQUNBO0FBQ0QsYUFBUztBQUNSRixTQUFHLEdBQUdULG9CQUFXWSxTQUFqQjtBQUNBRixjQUFRLEdBQUcsRUFBWDtBQUNBQyxVQUFJLEdBQUcsRUFBUDtBQUNBLFlBVkY7O0FBWUEsTUFBSSxDQUFDRixHQUFMLEVBQVU7QUFDVEksT0FBRyxDQUFDQyxTQUFKLENBQWMsRUFBQ0MsS0FBSyxFQUFDLGNBQVAsRUFBdUJDLElBQUksRUFBRSxNQUE3QixFQUFkO0FBQ0EsV0FBT1gsT0FBTyxDQUFDWSxNQUFSLG1CQUFtQkMsWUFBTyxLQUFQLENBQW5CLElBQWtDQyxNQUFNLEVBQUUsY0FBMUMsSUFBUDtBQUNBO0FBQ0QsTUFBSSxDQUFDdkIsUUFBTCxFQUFlO0FBQ2RpQixPQUFHLENBQUNDLFNBQUosQ0FBYyxFQUFDQyxLQUFLLEVBQUMsbUJBQVAsRUFBNEJDLElBQUksRUFBRSxNQUFsQyxFQUFkO0FBQ0EsV0FBT1gsT0FBTyxDQUFDWSxNQUFSLG1CQUFtQkMsWUFBTyxLQUFQLENBQW5CLElBQWtDQyxNQUFNLEVBQUUsbUJBQTFDLElBQVA7QUFDQTtBQUNELE1BQU1DLEdBQUcsR0FBRztBQUNYWCxPQUFHLEVBQUhBLEdBRFc7QUFFWEUsUUFBSSxFQUFKQSxJQUZXO0FBR1hmLFlBQVEsRUFBUkEsUUFIVyxFQUFaOzs7QUFNQSxNQUFJeUIsSUFBSSxDQUFDQyxFQUFMLENBQVFYLElBQVIsQ0FBYVksV0FBYixPQUErQixLQUFuQyxFQUEwQztBQUN6QyxRQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWWYsUUFBWixFQUFzQmdCLE1BQXRCLEdBQStCLENBQWxDLEVBQXFDTixHQUFHLENBQUNYLEdBQUosR0FBVWtCLGFBQWEsQ0FBQ1AsR0FBRyxDQUFDWCxHQUFMLEVBQVVDLFFBQVYsQ0FBdkI7QUFDckMsR0FGRCxNQUVLO0FBQ0pVLE9BQUcsQ0FBQ1YsUUFBSixHQUFlQSxRQUFmO0FBQ0E7Ozs7O0FBS0QsU0FBT0csR0FBRyxDQUFDZSxVQUFKLENBQWVSLEdBQWYsQ0FBUDtBQUNBOztBQUVEOzs7OztBQUtPLFNBQVNTLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTJCQyxHQUEzQixFQUFnQyxDQUFFO0FBQ3hDLE1BQUksT0FBT0QsSUFBUCxLQUFpQixRQUFyQixFQUErQixDQUFFO0FBQ2hDQSxRQUFJLEdBQUdDLEdBQUcsSUFBSSxHQUFkLENBRDhCLENBQ1g7QUFDbkIsV0FBT0QsSUFBUDtBQUNBO0FBQ0RBLE1BQUksSUFBSUMsR0FBRyxHQUFHLE1BQU1BLEdBQVQsR0FBZSxHQUExQjtBQUNBLFNBQU9ELElBQVAsQ0FOc0MsQ0FNekI7QUFDYjs7QUFFRCxTQUFTSCxhQUFULENBQXVCSyxDQUF2QixFQUEwQkMsQ0FBMUIsRUFBNkI7QUFDNUIsTUFBSUMsQ0FBQyxHQUFHLEVBQVI7QUFDQSxNQUFJQyxDQUFDLEdBQUcsQ0FBUjtBQUNBLE1BQUlGLENBQUo7QUFDQyxPQUFLLElBQUlHLENBQVQsSUFBY0gsQ0FBZCxFQUFpQjtBQUNoQixRQUFJRSxDQUFDLEdBQUcsQ0FBUjtBQUNDRCxLQUFDLElBQUksTUFBTUUsQ0FBTixHQUFVLEdBQVYsR0FBZ0JILENBQUMsQ0FBQ0csQ0FBRCxDQUF0QixDQUREOztBQUdDRixLQUFDLElBQUksTUFBTUUsQ0FBTixHQUFVLEdBQVYsR0FBZ0JILENBQUMsQ0FBQ0csQ0FBRCxDQUF0QjtBQUNELE1BQUVELENBQUY7QUFDQTtBQUNGLFNBQU9ILENBQUMsR0FBR0UsQ0FBWDtBQUNBLEMiLCJmaWxlIjoiMTEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZyc7XHJcbmltcG9ydCBpbnRlcmZhY2VzIGZyb20gJy4vaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IGVyck9iaiB9IGZyb20gJy4uLy4uL2pzL01zZy5qcyc7XHJcbi8qKlxyXG4gKiDkuIrkvKDmlofku7bmlrnms5VcclxuICogQHBhcmFtIHthbnl9IGN1c3RvbUlkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlUGF0aFxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGljc1VwTG9hZERhdGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBVcExvYWRGaWxlKGN1c3RvbUlkLCBmaWxlUGF0aCwgcGljc1VwTG9hZERhdGEpIHsgLy8g5LiK5Lyg5paH5Lu25pa55rOVOiAo6Ieq5a6a5LmJ5LiK5Lyg5qCH6K+GLCDmlofku7bot6/lvoQsIOiHquWumuS5ieS4iuS8oOaVsOaNrilcclxuXHRsb2coJ+iHquWumuS5ieS4iuS8oOWbvueJh+aQuuW4puaVsOaNrjonICsgSlNPTi5zdHJpbmdpZnkocGljc1VwTG9hZERhdGEpKTtcclxuXHRpZiAoaW50ZXJmYWNlcy5iYXNlVXJsICYmIGZpbGVQYXRoLmluZGV4T2YoaW50ZXJmYWNlcy5iYXNlVXJsKSAhPSAtMSkgeyAvL+Wfn+WQjeabv+aNouacuuWItjog5Yik5pat5piv5ZCm5piv5LuO5ZCO56uv6I635Y+W55qE5Zu+54mH6Lev5b6ELCDoi6XmmK8g5pu/5o2i5Z+f5ZCN5a2X56ym5Liy5Li656m65ZCOcmVzb2x2ZS4g5Lmf5Y+v5Lul5qC55o2uY3VzdG9tSWTliqjmgIHmjqfliLYsIOS4jemcgOimgeWImeWIoOmZpOatpOS7o+eggVxyXG5cdFx0Y29uc3QgcmVwbGFjZVBhdGggPSBmaWxlUGF0aC5yZXBsYWNlKGludGVyZmFjZXMuYmFzZVVybCwgJycpO1xyXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcblx0XHRcdGRhdGE6IHJlcGxhY2VQYXRoXHJcblx0XHR9KTtcclxuXHR9XHJcblx0bGV0IF90aGlzID0gdGhpcztcclxuXHRsZXQgdXJsID0gJyc7XHJcblx0bGV0IGZvcm1EYXRhID0ge307XHJcblx0bGV0IG5hbWUgPSAnJztcclxuXHRzd2l0Y2ggKGN1c3RvbUlkKSB7IC8v5Yik5pat6K+l6aG5cGljc+exu+Wei+iHquW4pueahFVwTG9hZEZpbGVUeXBlLCDmoLnmja7mraTlgLzmnaXnoa7lrprkuI3lkIznmoR1cmzjgIFmb3JtRGF0YeOAgW5hbWVcclxuXHRcdGNhc2UgJ1VwTG9hZEltYWdlXzEnOiAvL+iHquWumuS5ieeahOagh+ivhlxyXG5cdFx0XHR1cmwgPSAnJztcclxuXHRcdFx0Zm9ybURhdGEgPSB7fTtcclxuXHRcdFx0bmFtZSA9ICcnO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdGRlZmF1bHQ6IC8v6Iul5peg5Yik5pat6ZyA5rGC5Y+v55u05o6l5YaZ5Zyo6L+Z6YeMXHJcblx0XHRcdHVybCA9IGludGVyZmFjZXMudXBMb2FkSW1nO1xyXG5cdFx0XHRmb3JtRGF0YSA9IHt9O1xyXG5cdFx0XHRuYW1lID0gJyc7XHJcblx0XHRcdGJyZWFrO1xyXG5cdH1cclxuXHRpZiAoIXVybCkge1xyXG5cdFx0dW5pLnNob3dUb2FzdCh7dGl0bGU6J+S4iuS8oOaWh+S7tueahHVybOS4jeiDveS4uuepuicsIGljb246ICdub25lJ30pO1xyXG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KHsuLi5lcnJPYmpbJzEwMiddLCBlcnJNc2c6ICfkuIrkvKDmlofku7bnmoR1cmzkuI3og73kuLrnqbonfSk7XHJcblx0fVxyXG5cdGlmICghZmlsZVBhdGgpIHtcclxuXHRcdHVuaS5zaG93VG9hc3Qoe3RpdGxlOifkuIrkvKDmlofku7bnmoRmaWxlUGF0aOS4jeiDveS4uuepuicsIGljb246ICdub25lJ30pO1xyXG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KHsuLi5lcnJPYmpbJzEwMiddLCBlcnJNc2c6ICfkuIrkvKDmlofku7bnmoRmaWxlUGF0aOS4jeiDveS4uuepuid9KTtcclxuXHR9XHJcblx0Y29uc3Qgb2JqID0ge1xyXG5cdFx0dXJsLFxyXG5cdFx0bmFtZSxcclxuXHRcdGZpbGVQYXRoXHJcblx0fVxyXG5cclxuXHRpZiAocGx1cy5vcy5uYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpb3MnKSB7XHJcblx0XHRpZihPYmplY3Qua2V5cyhmb3JtRGF0YSkubGVuZ3RoID4gMCkgb2JqLnVybCA9IHJlbmRlclVybERhdGEob2JqLnVybCwgZm9ybURhdGEpO1xyXG5cdH1lbHNle1xyXG5cdFx0b2JqLmZvcm1EYXRhID0gZm9ybURhdGE7XHJcblx0fVxyXG5cclxuXHJcblxyXG5cclxuXHRyZXR1cm4gdW5pLnVwbG9hZEZpbGUob2JqKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOaLvOaOpeS4iuS8oOi/lOWbnuaVsOaNruaWueazlVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsc1xyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGljc19zcGxpY2UodmFscywgdmFsKSB7IC8vIOaLvOaOpeWbvueJh+S4iuS8oOi/lOWbnuWQjueahOaVsOaNriwgdmFsc+aYr+aLvOaOpeWQjueahOaVsOaNru+8jCB2YWzmmK/mlrDmt7vpoblcclxuXHRpZiAodHlwZW9mKHZhbHMpICE9PSAnc3RyaW5nJykgeyAvLyDnrKzkuIDmrKHkvKDov5vmnaXmmK/kuIDkuKrmlbDnu4RcclxuXHRcdHZhbHMgPSB2YWwgfHwgJ3wnOyAvLyDlj6/mm7TmlLnliIbpmpTnrKZcclxuXHRcdHJldHVybiB2YWxzO1xyXG5cdH1cclxuXHR2YWxzICs9IHZhbCA/ICd8JyArIHZhbCA6ICd8JztcclxuXHRyZXR1cm4gdmFsczsgLy8g5b+F6aG7cmV0dXJuIHZhbHNcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyVXJsRGF0YSh1LCBkKSB7XHJcblx0bGV0IGMgPSAnJztcclxuXHRsZXQgbiA9IDA7XHJcblx0aWYgKGQpXHJcblx0XHRmb3IgKGxldCBpIGluIGQpIHtcclxuXHRcdFx0aWYgKG4gPiAwKVxyXG5cdFx0XHRcdGMgKz0gJyYnICsgaSArICc9JyArIGRbaV07XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRjICs9ICc/JyArIGkgKyAnPScgKyBkW2ldO1xyXG5cdFx0XHQrK247XHJcblx0XHR9XHJcblx0cmV0dXJuIHUgKyBjO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///112\n");

/***/ }),

/***/ 113:
/*!************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/js/Msg.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = Msg;exports.errObj = void 0;function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var errObj = {\n  \"102\": {\n    errMsg: '上传图片错误',\n    code: 102 },\n\n  \"101\": {\n    errMsg: '未找到该name对应的数据',\n    code: 101 },\n\n  \"ok\": {\n    errMsg: 'ok',\n    code: 1 } };exports.errObj = errObj;\n\n\n\nfunction filterStatus(s) {\n  var t = '未知';\n  switch (s) {\n    case 1:\n      t = 'success';\n      break;\n    case 2:\n      t = 'warn';\n    case 3:\n      t = 'error';\n    default:\n      break;}\n\n  return t;\n}\n\nfunction Msg(obj) {var\n  s = obj.s,c = obj.c,v = obj.v;\n  var returnObj = {\n    status: filterStatus(s) };\n\n  if (c) {\n    returnObj.result = _objectSpread({}, errObj[c], { data: null });\n  } else {\n    returnObj.result = _objectSpread({}, errObj.ok, { data: v });\n  }\n  return returnObj;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvanMvTXNnLmpzIl0sIm5hbWVzIjpbImVyck9iaiIsImVyck1zZyIsImNvZGUiLCJmaWx0ZXJTdGF0dXMiLCJzIiwidCIsIk1zZyIsIm9iaiIsImMiLCJ2IiwicmV0dXJuT2JqIiwic3RhdHVzIiwicmVzdWx0IiwiZGF0YSIsIm9rIl0sIm1hcHBpbmdzIjoieXdCQUFPLElBQU1BLE1BQU0sR0FBRztBQUNyQixTQUFPO0FBQ05DLFVBQU0sRUFBRSxRQURGO0FBRU5DLFFBQUksRUFBRSxHQUZBLEVBRGM7O0FBS3JCLFNBQU87QUFDTkQsVUFBTSxFQUFFLGVBREY7QUFFTkMsUUFBSSxFQUFFLEdBRkEsRUFMYzs7QUFTckIsUUFBTTtBQUNMRCxVQUFNLEVBQUUsSUFESDtBQUVMQyxRQUFJLEVBQUUsQ0FGRCxFQVRlLEVBQWYsQzs7OztBQWVQLFNBQVNDLFlBQVQsQ0FBc0JDLENBQXRCLEVBQXlCO0FBQ3hCLE1BQUlDLENBQUMsR0FBRyxJQUFSO0FBQ0EsVUFBUUQsQ0FBUjtBQUNDLFNBQUssQ0FBTDtBQUNDQyxPQUFDLEdBQUcsU0FBSjtBQUNBO0FBQ0QsU0FBSyxDQUFMO0FBQ0NBLE9BQUMsR0FBRyxNQUFKO0FBQ0QsU0FBSyxDQUFMO0FBQ0NBLE9BQUMsR0FBRyxPQUFKO0FBQ0Q7QUFDQyxZQVRGOztBQVdBLFNBQU9BLENBQVA7QUFDQTs7QUFFYyxTQUFTQyxHQUFULENBQWFDLEdBQWIsRUFBa0I7QUFDeEJILEdBRHdCLEdBQ1pHLEdBRFksQ0FDeEJILENBRHdCLENBQ3JCSSxDQURxQixHQUNaRCxHQURZLENBQ3JCQyxDQURxQixDQUNsQkMsQ0FEa0IsR0FDWkYsR0FEWSxDQUNsQkUsQ0FEa0I7QUFFaEMsTUFBTUMsU0FBUyxHQUFHO0FBQ2pCQyxVQUFNLEVBQUVSLFlBQVksQ0FBQ0MsQ0FBRCxDQURILEVBQWxCOztBQUdBLE1BQUdJLENBQUgsRUFBTTtBQUNMRSxhQUFTLENBQUNFLE1BQVYscUJBQXVCWixNQUFNLENBQUNRLENBQUQsQ0FBN0IsSUFBa0NLLElBQUksRUFBRSxJQUF4QztBQUNBLEdBRkQsTUFFSztBQUNKSCxhQUFTLENBQUNFLE1BQVYscUJBQXVCWixNQUFNLENBQUNjLEVBQTlCLElBQWtDRCxJQUFJLEVBQUVKLENBQXhDO0FBQ0E7QUFDRCxTQUFPQyxTQUFQO0FBQ0EiLCJmaWxlIjoiMTEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVyck9iaiA9IHtcclxuXHRcIjEwMlwiOiB7XHJcblx0XHRlcnJNc2c6ICfkuIrkvKDlm77niYfplJnor68nLFxyXG5cdFx0Y29kZTogMTAyXHJcblx0fSxcclxuXHRcIjEwMVwiOiB7XHJcblx0XHRlcnJNc2c6ICfmnKrmib7liLDor6VuYW1l5a+55bqU55qE5pWw5o2uJyxcclxuXHRcdGNvZGU6IDEwMVxyXG5cdH0sXHJcblx0XCJva1wiOiB7XHJcblx0XHRlcnJNc2c6ICdvaycsXHJcblx0XHRjb2RlOiAxXHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaWx0ZXJTdGF0dXMocykge1xyXG5cdGxldCB0ID0gJ+acquefpSc7XHJcblx0c3dpdGNoIChzKXtcclxuXHRcdGNhc2UgMTpcclxuXHRcdFx0dCA9ICdzdWNjZXNzJztcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlIDI6XHJcblx0XHRcdHQgPSAnd2Fybic7XHJcblx0XHRjYXNlIDM6XHJcblx0XHRcdHQgPSAnZXJyb3InO1xyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0YnJlYWs7XHJcblx0fVxyXG5cdHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNc2cob2JqKSB7XHJcblx0Y29uc3QgeyBzLCBjLCB2IH0gPSBvYmo7XHJcblx0Y29uc3QgcmV0dXJuT2JqID0ge1xyXG5cdFx0c3RhdHVzOiBmaWx0ZXJTdGF0dXMocylcclxuXHR9O1xyXG5cdGlmKGMpIHtcclxuXHRcdHJldHVybk9iai5yZXN1bHQgPSB7Li4uZXJyT2JqW2NdLCBkYXRhOiBudWxsfTtcclxuXHR9ZWxzZXtcclxuXHRcdHJldHVybk9iai5yZXN1bHQgPSB7Li4uZXJyT2JqLm9rLCBkYXRhOiB2fTtcclxuXHR9XHJcblx0cmV0dXJuIHJldHVybk9iajtcclxufVxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n");

/***/ }),

/***/ 114:
/*!*******************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/config/js/sms.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = sendSMS; /**\r\n                                                                                                       * 发送验证码方法\r\n                                                                                                       * @param {any} customId\r\n                                                                                                       * @param {String} phone\r\n                                                                                                       */\n// 目前 点击获取验证码按钮后会emit一个getCode事件至父级，所以自己在外面发送验证码，并且验证也是自己做校验\nfunction sendSMS(phone) {// 发送验证码方法, 需返回生成的验证码\n  var code = '123456'; // 生成验证码\n  //发送验证码\n  uni.showToast({ title: \"\\u53D1\\u9001\\u9A8C\\u8BC1\\u7801\\u7ED9\".concat(phone, \"\\u6210\\u529F,\\u8BF7\\u6CE8\\u610F\\u67E5\\u6536\"), icon: 'none' });\n  return code; // 必须return生成的验证码\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvY29uZmlnL2pzL3Ntcy5qcyJdLCJuYW1lcyI6WyJzZW5kU01TIiwicGhvbmUiLCJjb2RlIiwidW5pIiwic2hvd1RvYXN0IiwidGl0bGUiLCJpY29uIl0sIm1hcHBpbmdzIjoib0lBQUE7Ozs7O0FBS0E7QUFDZSxTQUFTQSxPQUFULENBQWlCQyxLQUFqQixFQUF3QixDQUFFO0FBQ3hDLE1BQUlDLElBQUksR0FBRyxRQUFYLENBRHNDLENBQ2pCO0FBQ3JCO0FBQ0FDLEtBQUcsQ0FBQ0MsU0FBSixDQUFjLEVBQUNDLEtBQUssZ0RBQVdKLEtBQVgsZ0RBQU4sRUFBa0NLLElBQUksRUFBRSxNQUF4QyxFQUFkO0FBQ0EsU0FBT0osSUFBUCxDQUpzQyxDQUl6QjtBQUNiLEMiLCJmaWxlIjoiMTE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOWPkemAgemqjOivgeeggeaWueazlVxyXG4gKiBAcGFyYW0ge2FueX0gY3VzdG9tSWRcclxuICogQHBhcmFtIHtTdHJpbmd9IHBob25lXHJcbiAqL1xyXG4vLyDnm67liY0g54K55Ye76I635Y+W6aqM6K+B56CB5oyJ6ZKu5ZCO5LyaZW1pdOS4gOS4qmdldENvZGXkuovku7boh7PniLbnuqfvvIzmiYDku6Xoh6rlt7HlnKjlpJbpnaLlj5HpgIHpqozor4HnoIHvvIzlubbkuJTpqozor4HkuZ/mmK/oh6rlt7HlgZrmoKHpqoxcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VuZFNNUyhwaG9uZSkgeyAvLyDlj5HpgIHpqozor4HnoIHmlrnms5UsIOmcgOi/lOWbnueUn+aIkOeahOmqjOivgeeggVxyXG5cdGxldCBjb2RlID0gJzEyMzQ1Nic7IC8vIOeUn+aIkOmqjOivgeeggVxyXG5cdC8v5Y+R6YCB6aqM6K+B56CBXHJcblx0dW5pLnNob3dUb2FzdCh7dGl0bGU6IGDlj5HpgIHpqozor4HnoIHnu5kke3Bob25lfeaIkOWKnyzor7fms6jmhI/mn6XmlLZgLCBpY29uOiAnbm9uZSd9KTtcclxuXHRyZXR1cm4gY29kZTsgLy8g5b+F6aG7cmV0dXJu55Sf5oiQ55qE6aqM6K+B56CBXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///114\n");

/***/ }),

/***/ 115:
/*!***************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/js/QSForm.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _Msg = _interopRequireDefault(__webpack_require__(/*! ./Msg.js */ 113));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var\n\nQSForm = /*#__PURE__*/function () {\n  function QSForm() {_classCallCheck(this, QSForm);\n    this.formObj = {};\n  }_createClass(QSForm, [{ key: \"set\", value: function set(\n    obj) {var\n\n      name =\n\n\n\n\n\n\n      obj.name,variableName = obj.variableName,value = obj.value,type = obj.type,required = obj.required,verifyFc = obj.verifyFc,verifyType = obj.verifyType;\n      if (!name) return;\n      if (!this.formObj[name]) this.formObj[name] = {};\n      if (!variableName) return;\n      this.formObj[name][variableName] = _objectSpread({}, obj);\n    } }, { key: \"del\", value: function del(\n    obj) {var\n\n      name =\n\n      obj.name,variableName = obj.variableName;\n      if (!name || !variableName) return;\n      if (this.formObj[name] !== undefined && this.formObj[name] && this.formObj[name][variableName] !== undefined)\n      delete this.formObj[name][variableName];\n      if (this.formObj[name] && Object.keys(this.formObj[name]).length === 0)\n      delete this.formObj[name];\n    } }, { key: \"get\", value: function get(\n    obj) {var\n\n      name =\n      obj.name;\n      if (!name) return Promise.reject({\n        s: 3,\n        c: 101 });\n\n      if (this.formObj[name] !== undefined) {\n        var dataObj = _objectSpread({}, this.formObj[name]);\n\n        return (0, _Msg.default)({\n          s: 1,\n          v: dataObj });\n\n      } else {\n        return (0, _Msg.default)({\n          s: 3,\n          c: 101 });\n\n      }\n\n    } }]);return QSForm;}();\n\nif (!QSFormObj) var QSFormObj = new QSForm();var _default =\nQSFormObj;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvanMvUVNGb3JtLmpzIl0sIm5hbWVzIjpbIlFTRm9ybSIsImZvcm1PYmoiLCJvYmoiLCJuYW1lIiwidmFyaWFibGVOYW1lIiwidmFsdWUiLCJ0eXBlIiwicmVxdWlyZWQiLCJ2ZXJpZnlGYyIsInZlcmlmeVR5cGUiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlamVjdCIsInMiLCJjIiwiZGF0YU9iaiIsInYiLCJRU0Zvcm1PYmoiXSwibWFwcGluZ3MiOiJ1RkFBQSw0RTs7QUFFTUEsTTtBQUNMLG9CQUFjO0FBQ2IsU0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxHO0FBQ0dDLE8sRUFBSzs7QUFFUEMsVUFGTzs7Ozs7OztBQVNKRCxTQVRJLENBRVBDLElBRk8sQ0FHUEMsWUFITyxHQVNKRixHQVRJLENBR1BFLFlBSE8sQ0FJUEMsS0FKTyxHQVNKSCxHQVRJLENBSVBHLEtBSk8sQ0FLUEMsSUFMTyxHQVNKSixHQVRJLENBS1BJLElBTE8sQ0FNUEMsUUFOTyxHQVNKTCxHQVRJLENBTVBLLFFBTk8sQ0FPUEMsUUFQTyxHQVNKTixHQVRJLENBT1BNLFFBUE8sQ0FRUEMsVUFSTyxHQVNKUCxHQVRJLENBUVBPLFVBUk87QUFVUixVQUFJLENBQUNOLElBQUwsRUFBVztBQUNYLFVBQUksQ0FBQyxLQUFLRixPQUFMLENBQWFFLElBQWIsQ0FBTCxFQUF5QixLQUFLRixPQUFMLENBQWFFLElBQWIsSUFBcUIsRUFBckI7QUFDekIsVUFBSSxDQUFDQyxZQUFMLEVBQW1CO0FBQ25CLFdBQUtILE9BQUwsQ0FBYUUsSUFBYixFQUFtQkMsWUFBbkIsc0JBQXVDRixHQUF2QztBQUNBLEs7QUFDR0EsTyxFQUFLOztBQUVQQyxVQUZPOztBQUlKRCxTQUpJLENBRVBDLElBRk8sQ0FHUEMsWUFITyxHQUlKRixHQUpJLENBR1BFLFlBSE87QUFLUixVQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQyxZQUFkLEVBQTRCO0FBQzVCLFVBQUksS0FBS0gsT0FBTCxDQUFhRSxJQUFiLE1BQXVCTyxTQUF2QixJQUFvQyxLQUFLVCxPQUFMLENBQWFFLElBQWIsQ0FBcEMsSUFBMEQsS0FBS0YsT0FBTCxDQUFhRSxJQUFiLEVBQW1CQyxZQUFuQixNQUFvQ00sU0FBbEc7QUFDQyxhQUFPLEtBQUtULE9BQUwsQ0FBYUUsSUFBYixFQUFtQkMsWUFBbkIsQ0FBUDtBQUNELFVBQUcsS0FBS0gsT0FBTCxDQUFhRSxJQUFiLEtBQW9CUSxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLWCxPQUFMLENBQWFFLElBQWIsQ0FBWixFQUFnQ1UsTUFBaEMsS0FBeUMsQ0FBaEU7QUFDQyxhQUFPLEtBQUtaLE9BQUwsQ0FBYUUsSUFBYixDQUFQO0FBQ0QsSztBQUNHRCxPLEVBQUs7O0FBRVBDLFVBRk87QUFHSkQsU0FISSxDQUVQQyxJQUZPO0FBSVIsVUFBSSxDQUFDQSxJQUFMLEVBQVcsT0FBT1csT0FBTyxDQUFDQyxNQUFSLENBQWU7QUFDaENDLFNBQUMsRUFBRSxDQUQ2QjtBQUVoQ0MsU0FBQyxFQUFFLEdBRjZCLEVBQWYsQ0FBUDs7QUFJWCxVQUFJLEtBQUtoQixPQUFMLENBQWFFLElBQWIsTUFBdUJPLFNBQTNCLEVBQXNDO0FBQ3JDLFlBQU1RLE9BQU8scUJBQVEsS0FBS2pCLE9BQUwsQ0FBYUUsSUFBYixDQUFSLENBQWI7O0FBRUEsZUFBTyxrQkFBSTtBQUNWYSxXQUFDLEVBQUUsQ0FETztBQUVWRyxXQUFDLEVBQUVELE9BRk8sRUFBSixDQUFQOztBQUlBLE9BUEQsTUFPTztBQUNOLGVBQU8sa0JBQUk7QUFDVkYsV0FBQyxFQUFFLENBRE87QUFFVkMsV0FBQyxFQUFFLEdBRk8sRUFBSixDQUFQOztBQUlBOztBQUVELEs7O0FBRUYsSUFBSSxDQUFDRyxTQUFMLEVBQWdCLElBQUlBLFNBQVMsR0FBRyxJQUFJcEIsTUFBSixFQUFoQixDO0FBQ0RvQixTIiwiZmlsZSI6IjExNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNc2cgZnJvbSAnLi9Nc2cuanMnO1xyXG5cclxuY2xhc3MgUVNGb3JtIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMuZm9ybU9iaiA9IHt9O1xyXG5cdH1cclxuXHRzZXQob2JqKSB7XHJcblx0XHRjb25zdCB7XHJcblx0XHRcdG5hbWUsXHJcblx0XHRcdHZhcmlhYmxlTmFtZSxcclxuXHRcdFx0dmFsdWUsXHJcblx0XHRcdHR5cGUsXHJcblx0XHRcdHJlcXVpcmVkLFxyXG5cdFx0XHR2ZXJpZnlGYyxcclxuXHRcdFx0dmVyaWZ5VHlwZVxyXG5cdFx0fSA9IG9iajtcclxuXHRcdGlmICghbmFtZSkgcmV0dXJuO1xyXG5cdFx0aWYgKCF0aGlzLmZvcm1PYmpbbmFtZV0pIHRoaXMuZm9ybU9ialtuYW1lXSA9IHt9O1xyXG5cdFx0aWYgKCF2YXJpYWJsZU5hbWUpIHJldHVybjtcclxuXHRcdHRoaXMuZm9ybU9ialtuYW1lXVt2YXJpYWJsZU5hbWVdID0gey4uLm9ian07XHJcblx0fVxyXG5cdGRlbChvYmopIHtcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0bmFtZSxcclxuXHRcdFx0dmFyaWFibGVOYW1lXHJcblx0XHR9ID0gb2JqO1xyXG5cdFx0aWYgKCFuYW1lIHx8ICF2YXJpYWJsZU5hbWUpIHJldHVybjtcclxuXHRcdGlmICh0aGlzLmZvcm1PYmpbbmFtZV0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZvcm1PYmpbbmFtZV0gJiYgdGhpcy5mb3JtT2JqW25hbWVdW3ZhcmlhYmxlTmFtZV0gIT09dW5kZWZpbmVkKSBcclxuXHRcdFx0ZGVsZXRlIHRoaXMuZm9ybU9ialtuYW1lXVt2YXJpYWJsZU5hbWVdO1xyXG5cdFx0aWYodGhpcy5mb3JtT2JqW25hbWVdJiZPYmplY3Qua2V5cyh0aGlzLmZvcm1PYmpbbmFtZV0pLmxlbmd0aD09PTApIFxyXG5cdFx0XHRkZWxldGUgdGhpcy5mb3JtT2JqW25hbWVdO1xyXG5cdH1cclxuXHRnZXQob2JqKSB7XHJcblx0XHRjb25zdCB7XHJcblx0XHRcdG5hbWVcclxuXHRcdH0gPSBvYmo7XHJcblx0XHRpZiAoIW5hbWUpIHJldHVybiBQcm9taXNlLnJlamVjdCh7XHJcblx0XHRcdHM6IDMsXHJcblx0XHRcdGM6IDEwMVxyXG5cdFx0fSk7XHJcblx0XHRpZiAodGhpcy5mb3JtT2JqW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0Y29uc3QgZGF0YU9iaiA9IHsgLi4udGhpcy5mb3JtT2JqW25hbWVdXHJcblx0XHRcdH07XHJcblx0XHRcdHJldHVybiBNc2coe1xyXG5cdFx0XHRcdHM6IDEsXHJcblx0XHRcdFx0djogZGF0YU9ialxyXG5cdFx0XHR9KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiBNc2coe1xyXG5cdFx0XHRcdHM6IDMsXHJcblx0XHRcdFx0YzogMTAxXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcbn1cclxuaWYgKCFRU0Zvcm1PYmopIHZhciBRU0Zvcm1PYmogPSBuZXcgUVNGb3JtKCk7XHJcbmV4cG9ydCBkZWZhdWx0IFFTRm9ybU9iajtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///115\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIm1zZ3MiLCJtYXAiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJKU09OIiwic3RyaW5naWZ5IiwiZSIsInVuZGVmaW5lZCIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJtc2ciLCJsYXN0TXNnIiwicG9wIiwiam9pbiIsImluZGV4T2YiXSwibWFwcGluZ3MiOiIwRkFBQSxTQUFTQSxLQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFJQyxDQUFDLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxDQUEvQixDQUFSO0FBQ0EsU0FBT0MsQ0FBQyxDQUFDSyxTQUFGLENBQVksQ0FBWixFQUFlTCxDQUFDLENBQUNNLE1BQUYsR0FBVyxDQUExQixDQUFQO0FBQ0Q7O0FBRWMsU0FBU0MsU0FBVCxHQUFzQjtBQUNuQyxPQUFLLElBQUlDLElBQUksR0FBR0MsU0FBUyxDQUFDSCxNQUFyQixFQUE2QkksSUFBSSxHQUFHLElBQUlDLEtBQUosQ0FBVUgsSUFBVixDQUFwQyxFQUFxREksSUFBSSxHQUFHLENBQWpFLEVBQW9FQSxJQUFJLEdBQUdKLElBQTNFLEVBQWlGSSxJQUFJLEVBQXJGLEVBQXlGO0FBQ3ZGRixRQUFJLENBQUNFLElBQUQsQ0FBSixHQUFhSCxTQUFTLENBQUNHLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksR0FBTCxDQUFTLFVBQVVmLENBQVYsRUFBYTtBQUMvQixRQUFJZ0IsSUFBSSxHQUFHZCxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkwsQ0FBL0IsQ0FBWDs7QUFFQSxRQUFJZ0IsSUFBSSxDQUFDQyxXQUFMLE9BQXVCLGlCQUEzQixFQUE4QztBQUM1QyxVQUFJO0FBQ0ZqQixTQUFDLEdBQUcscUJBQXFCa0IsSUFBSSxDQUFDQyxTQUFMLENBQWVuQixDQUFmLENBQXJCLEdBQXlDLGdCQUE3QztBQUNELE9BRkQsQ0FFRSxPQUFPb0IsQ0FBUCxFQUFVO0FBQ1ZwQixTQUFDLEdBQUcsaUJBQUo7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMLFVBQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RBLFNBQUMsR0FBRyxZQUFKO0FBQ0QsT0FGRCxNQUVPLElBQUlBLENBQUMsS0FBS3FCLFNBQVYsRUFBcUI7QUFDMUJyQixTQUFDLEdBQUcsaUJBQUo7QUFDRCxPQUZNLE1BRUE7QUFDTCxZQUFJc0IsS0FBSyxHQUFHdkIsS0FBSyxDQUFDQyxDQUFELENBQUwsQ0FBU3VCLFdBQVQsRUFBWjs7QUFFQSxZQUFJRCxLQUFLLEtBQUssUUFBVixJQUFzQkEsS0FBSyxLQUFLLFNBQXBDLEVBQStDO0FBQzdDdEIsV0FBQyxHQUFHLGNBQWNzQixLQUFkLEdBQXNCLEtBQXRCLEdBQThCdEIsQ0FBOUIsR0FBa0MsU0FBbEMsR0FBOENzQixLQUE5QyxHQUFzRCxLQUExRDtBQUNELFNBRkQsTUFFTztBQUNMdEIsV0FBQyxHQUFHd0IsTUFBTSxDQUFDeEIsQ0FBRCxDQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFdBQU9BLENBQVA7QUFDRCxHQTFCVSxDQUFYO0FBMkJBLE1BQUl5QixHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJWCxJQUFJLENBQUNQLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixRQUFJbUIsT0FBTyxHQUFHWixJQUFJLENBQUNhLEdBQUwsRUFBZDtBQUNBRixPQUFHLEdBQUdYLElBQUksQ0FBQ2MsSUFBTCxDQUFVLGFBQVYsQ0FBTjs7QUFFQSxRQUFJRixPQUFPLENBQUNHLE9BQVIsQ0FBZ0IsTUFBaEIsTUFBNEIsQ0FBaEMsRUFBbUM7QUFDakNKLFNBQUcsSUFBSUMsT0FBUDtBQUNELEtBRkQsTUFFTztBQUNMRCxTQUFHLElBQUksZ0JBQWdCQyxPQUF2QjtBQUNEO0FBQ0YsR0FURCxNQVNPO0FBQ0xELE9BQUcsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBVjtBQUNEOztBQUVELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 121:
/*!**********************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/js/QSInputsMixin.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _app2 = _interopRequireDefault(__webpack_require__(/*! ./app.js */ 104));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\nvar publicProps = {\n  name: {\n    type: String,\n    default: '' },\n\n  variableName: {\n    type: String,\n    default: '' },\n\n  required: {\n    type: Boolean,\n    default: false },\n\n  value: {\n    type: [String, Array, Number, Object, Boolean],\n    deault: '' },\n\n  titleFlex: {\n    type: [Number, String],\n    default: 1 },\n\n  contentFlex: {\n    type: [Number, String],\n    default: 4 },\n\n  titleStyle: {\n    type: String,\n    default: '' },\n\n  contentStyle: {\n    type: String,\n    default: '' },\n\n  titleLayout: {\n    type: String,\n    default: 'default' },\n\n  contentLayout: {\n    type: String,\n    default: 'default' },\n\n  boxStyle: {\n    type: String,\n    default: '' },\n\n  title: {\n    type: String,\n    default: '' },\n\n  titleHide: {\n    type: Boolean,\n    default: false },\n\n  fontSize: {\n    type: Number,\n    default: 30 },\n\n  width: {\n    type: String,\n    default: '100%' },\n\n  customId: {\n    type: [String, Number, Object],\n    default: '' },\n\n  requiredSign: {\n    type: String,\n    default: '*' },\n\n  layout: {\n    type: String,\n    default: 'row' },\n\n  itemDisabled: {\n    type: Boolean,\n    default: false },\n\n  itemLayout: {\n    type: String,\n    default: '' },\n\n  titleColor: {\n    type: String,\n    default: '#999' } };var _default =\n\n\n\nfunction _default()\n\n{var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},QSInputsType = _ref.QSInputsType;\n  return {\n    name: 'QS_' + QSInputsType,\n    props: _objectSpread({},\n    publicProps),\n\n    model: {\n      prop: 'value',\n      event: 'input' },\n\n    data: function data() {\n      return {\n        type: QSInputsType };\n\n    },\n    created: function created() {\n      switch (QSInputsType) {\n        case _app2.default.typeObj.pics:\n          this.setForm(this.value || this.itemArray);\n          break;\n        case _app2.default.typeObj.infinitePics:\n          this.setForm(this.value || this.itemArray);\n          break;\n        default:\n          this.setForm(this.value);\n          break;}\n\n    },\n    computed: {\n      contentLayout_computed: function contentLayout_computed() {\n        switch (this.contentLayout) {\n          case 'center':\n            return 'flex_row_c_c';\n            break;\n          case 'left':\n            return 'flex_row_none_c';\n            break;\n          case 'right':\n            return 'flex_row_e_c';\n            break;\n          default:\n            if (this.layout === 'column') {\n              return 'flex_row_none_c';\n            } else {\n              return 'flex_row_e_c';\n            }\n            break;}\n\n      },\n      itemLayout_computed: function itemLayout_computed() {\n        switch (this.itemLayout) {\n          case 'center':\n            return 'flex_row_c_c';\n            break;\n          case 'left':\n            return 'flex_row_none_c';\n            break;\n          case 'right':\n            return 'flex_row_e_c';\n            break;\n          default:\n            if (this.layout === 'column') {\n              return 'flex_row_none_c';\n            } else {\n              return 'flex_row_e_c';\n            }\n            break;}\n\n      } },\n\n    beforeDestroy: function beforeDestroy() {\n      this.delForm();\n    },\n    methods: {\n      setValue: function setValue(value) {\n        this.$emit('input', value);\n        this.$emit('change', value);\n        this.setForm(value);\n      },\n      delForm: function delForm() {\n        if (this.name && this.variableName) {\n          _app2.default.delForm({\n            name: this.name,\n            variableName: this.variableName });\n\n        }\n      },\n      setForm: function setForm(value) {\n        if (this.name && this.variableName) {\n          _app2.default.setForm({\n            title: this.title,\n            name: this.name,\n            variableName: this.variableName,\n            value: value,\n            type: this.type,\n            required: this.required,\n            verifyFc: this.verifyFc,\n            verifyType: this.verifyType,\n            customId: this.customId,\n            upLoadData: this.upLoadData //图片上传自定义数据\n          });\n        }\n      },\n      setData: function setData(data) {\n        if (this.$refs.inputsRef && this.$refs.inputsRef.setData && typeof this.$refs.inputsRef.setData === 'function') {\n          this.$refs.inputsRef.setData(data);\n        } else {\n          _app2.default.log('not find ref or setData!');\n        }\n      } } };\n\n\n};exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///121\n");

/***/ }),

/***/ 13:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 14:
/*!*************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/static/emoji/emojiData.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; //模拟数据\nvar emojiData = {\n  \"imgArr\": [\n  {\n    emojiName: \"\",\n    emojiSort: 0,\n    minEmoji: false,\n    emojiPath: \"\",\n    emojiList: [\n    [\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' },\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }],\n\n    [\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' },\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }],\n\n    [\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' },\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }]] },\n\n\n\n  {\n    // QQ 表情\n    emojiName: \"QQemoji\",\n    emojiSort: 1,\n    minEmoji: true,\n    emojiPath: \"https://res.wx.qq.com/mpres/htmledition/images/icon/emotion/\",\n    // emojiPath: \"static/img/qq/\",\n    emojiList: [\n    [\n    { url: '0.gif', alt: '[微笑]' },\n    { url: '1.gif', alt: '[撇嘴]' },\n    { url: '2.gif', alt: '[色]' },\n    { url: '3.gif', alt: '[发呆]' },\n    { url: '4.gif', alt: '[得意]' },\n    { url: '5.gif', alt: '[流泪]' },\n    { url: '6.gif', alt: '[害羞]' },\n    { url: '7.gif', alt: '[闭嘴]' },\n    { url: '8.gif', alt: '[睡]' },\n    { url: '9.gif', alt: '[大哭]' },\n    { url: '10.gif', alt: '[尴尬]' },\n    { url: '11.gif', alt: '[发怒]' },\n    { url: '12.gif', alt: '[调皮]' },\n    { url: '13.gif', alt: '[呲牙]' },\n    { url: '14.gif', alt: '[惊讶]' },\n    { url: '15.gif', alt: '[难过]' },\n    { url: '16.gif', alt: '[酷]' },\n    { url: '17.gif', alt: '[冷汗]' },\n    { url: '18.gif', alt: '[抓狂]' },\n    { url: '19.gif', alt: '[吐]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n\n    [\n    { url: '20.gif', alt: '[偷笑]' },\n    { url: '21.gif', alt: '[愉快]' },\n    { url: '22.gif', alt: '[白眼]' },\n    { url: '23.gif', alt: '[傲慢]' },\n    { url: '24.gif', alt: '[饥饿]' },\n    { url: '25.gif', alt: '[困]' },\n    { url: '26.gif', alt: '[惊恐]' },\n    { url: '27.gif', alt: '[流汗]' },\n    { url: '28.gif', alt: '[憨笑]' },\n    { url: '29.gif', alt: '[悠闲]' },\n    { url: '30.gif', alt: '[奋斗]' },\n    { url: '31.gif', alt: '[咒骂]' },\n    { url: '32.gif', alt: '[疑问]' },\n    { url: '33.gif', alt: '[嘘]' },\n    { url: '34.gif', alt: '[晕]' },\n    { url: '35.gif', alt: '[疯了]' },\n    { url: '36.gif', alt: '[衰]' },\n    { url: '37.gif', alt: '[骷髅]' },\n    { url: '38.gif', alt: '[敲打]' },\n    { url: '39.gif', alt: '[再见]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '40.gif', alt: '[擦汗]' },\n    { url: '41.gif', alt: '[抠鼻]' },\n    { url: '42.gif', alt: '[鼓掌]' },\n    { url: '43.gif', alt: '[糗大了]' },\n    { url: '44.gif', alt: '[坏笔]' },\n    { url: '45.gif', alt: '[左哼哼]' },\n    { url: '46.gif', alt: '[右哼哼]' },\n    { url: '47.gif', alt: '[哈欠]' },\n    { url: '48.gif', alt: '[鄙视]' },\n    { url: '49.gif', alt: '[委屈]' },\n    { url: '50.gif', alt: '[快哭了]' },\n    { url: '51.gif', alt: '[阴险]' },\n    { url: '52.gif', alt: '[亲亲]' },\n    { url: '53.gif', alt: '[吓]' },\n    { url: '54.gif', alt: '[可怜]' },\n    { url: '55.gif', alt: '[菜刀]' },\n    { url: '56.gif', alt: '[西瓜]' },\n    { url: '57.gif', alt: '[啤酒]' },\n    { url: '58.gif', alt: '[篮球]' },\n    { url: '59.gif', alt: '[乒乓]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '60.gif', alt: '[咖啡]' },\n    { url: '61.gif', alt: '[饭]' },\n    { url: '62.gif', alt: '[猪头]' },\n    { url: '63.gif', alt: '[玫瑰]' },\n    { url: '64.gif', alt: '[凋谢]' },\n    { url: '65.gif', alt: '[嘴唇]' },\n    { url: '66.gif', alt: '[爱心]' },\n    { url: '67.gif', alt: '[心碎]' },\n    { url: '68.gif', alt: '[蛋糕]' },\n    { url: '69.gif', alt: '[闪电]' },\n    { url: '70.gif', alt: '[炸弹]' },\n    { url: '71.gif', alt: '[刀]' },\n    { url: '72.gif', alt: '[足球]' },\n    { url: '73.gif', alt: '[瓢虫]' },\n    { url: '74.gif', alt: '[便便]' },\n    { url: '75.gif', alt: '[月亮]' },\n    { url: '76.gif', alt: '[太阳]' },\n    { url: '77.gif', alt: '[礼物]' },\n    { url: '78.gif', alt: '[拥抱]' },\n    { url: '79.gif', alt: '[强]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '80.gif', alt: '[弱]' },\n    { url: '81.gif', alt: '[握手]' },\n    { url: '82.gif', alt: '[胜利]' },\n    { url: '83.gif', alt: '[抱拳]' },\n    { url: '84.gif', alt: '[勾引]' },\n    { url: '85.gif', alt: '[拳头]' },\n    { url: '86.gif', alt: '[差劲]' },\n    { url: '87.gif', alt: '[爱你]' },\n    { url: '88.gif', alt: '[NO]' },\n    { url: '89.gif', alt: '[OK]' },\n    { url: '90.gif', alt: '[爱情]' },\n    { url: '91.gif', alt: '[飞吻]' },\n    { url: '92.gif', alt: '[跳跳]' },\n    { url: '93.gif', alt: '[发抖]' },\n    { url: '94.gif', alt: '[怄火]' },\n    { url: '95.gif', alt: '[转圈]' },\n    { url: '96.gif', alt: '[磕头]' },\n    { url: '97.gif', alt: '[回头]' },\n    { url: '98.gif', alt: '[跳绳]' },\n    { url: '99.gif', alt: '[投降]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '100.gif', alt: '[激动]' },\n    { url: '101.gif', alt: '[乱舞]' },\n    { url: '102.gif', alt: '[献吻]' },\n    { url: '103.gif', alt: '[左太极]' },\n    { url: '104.gif', alt: '[右太极]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }]] },\n\n\n\n  {\n    // 火信表情\n    emojiName: \"huoxinList\",\n    emojiSort: 2,\n    minEmoji: true,\n    emojiPath: \"static/img/huoxin/\",\n    emojiList: [\n    [\n    { url: 'q_000.png', alt: '[测试1]' },\n    { url: 'q_001.png', alt: '[测试2]' },\n    { url: 'q_002.png', alt: '[测试3]' },\n    { url: 'q_003.png', alt: '[]' },\n    { url: 'q_004.png', alt: '[]' },\n    { url: 'q_005.png', alt: '[]' },\n    { url: 'q_006.png', alt: '[]' },\n    { url: 'q_007.png', alt: '[]' },\n    { url: 'q_008.png', alt: '[]' },\n    { url: 'q_009.png', alt: '[]' },\n    { url: 'q_010.png', alt: '[]' },\n    { url: 'q_011.png', alt: '[]' },\n    { url: 'q_012.png', alt: '[]' },\n    { url: 'q_013.png', alt: '[]' },\n    { url: 'q_014.png', alt: '[]' },\n    { url: 'q_015.png', alt: '[]' },\n    { url: 'q_016.png', alt: '[]' },\n    { url: 'q_017.png', alt: '[]' },\n    { url: 'q_018.png', alt: '[]' },\n    { url: 'q_019.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_020.png', alt: '[]' },\n    { url: 'q_021.png', alt: '[]' },\n    { url: 'q_022.png', alt: '[]' },\n    { url: 'q_023.png', alt: '[]' },\n    { url: 'q_024.png', alt: '[]' },\n    { url: 'q_025.png', alt: '[]' },\n    { url: 'q_026.png', alt: '[]' },\n    { url: 'q_027.png', alt: '[]' },\n    { url: 'q_028.png', alt: '[]' },\n    { url: 'q_029.png', alt: '[]' },\n    { url: 'q_030.png', alt: '[]' },\n    { url: 'q_031.png', alt: '[]' },\n    { url: 'q_032.png', alt: '[]' },\n    { url: 'q_033.png', alt: '[]' },\n    { url: 'q_034.png', alt: '[]' },\n    { url: 'q_035.png', alt: '[]' },\n    { url: 'q_036.png', alt: '[]' },\n    { url: 'q_037.png', alt: '[]' },\n    { url: 'q_038.png', alt: '[]' },\n    { url: 'q_039.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_040.png', alt: '[]' },\n    { url: 'q_041.png', alt: '[]' },\n    { url: 'q_042.png', alt: '[]' },\n    { url: 'q_043.png', alt: '[]' },\n    { url: 'q_044.png', alt: '[]' },\n    { url: 'q_045.png', alt: '[]' },\n    { url: 'q_046.png', alt: '[]' },\n    { url: 'q_047.png', alt: '[]' },\n    { url: 'q_048.png', alt: '[]' },\n    { url: 'q_049.png', alt: '[]' },\n    { url: 'q_050.png', alt: '[]' },\n    { url: 'q_051.png', alt: '[]' },\n    { url: 'q_052.png', alt: '[]' },\n    { url: 'q_053.png', alt: '[]' },\n    { url: 'q_054.png', alt: '[]' },\n    { url: 'q_055.png', alt: '[]' },\n    { url: 'q_056.png', alt: '[]' },\n    { url: 'q_057.png', alt: '[]' },\n    { url: 'q_058.png', alt: '[]' },\n    { url: 'q_059.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_060.png', alt: '[]' },\n    { url: 'q_061.png', alt: '[]' },\n    { url: 'q_062.png', alt: '[]' },\n    { url: 'q_063.png', alt: '[]' },\n    { url: 'q_064.png', alt: '[]' },\n    { url: 'q_065.png', alt: '[]' },\n    { url: 'q_066.png', alt: '[]' },\n    { url: 'q_067.png', alt: '[]' },\n    { url: 'q_068.png', alt: '[]' },\n    { url: 'q_069.png', alt: '[]' },\n    { url: 'q_070.png', alt: '[]' },\n    { url: 'q_071.png', alt: '[]' },\n    { url: 'q_072.png', alt: '[]' },\n    { url: 'q_073.png', alt: '[]' },\n    { url: 'q_074.png', alt: '[]' },\n    { url: 'q_075.png', alt: '[]' },\n    { url: 'q_076.png', alt: '[]' },\n    { url: 'q_077.png', alt: '[]' },\n    { url: 'q_078.png', alt: '[]' },\n    { url: 'q_079.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_080.png', alt: '[]' },\n    { url: 'q_081.png', alt: '[]' },\n    { url: 'q_082.png', alt: '[]' },\n    { url: 'q_083.png', alt: '[]' },\n    { url: 'q_084.png', alt: '[]' },\n    { url: 'q_085.png', alt: '[]' },\n    { url: 'q_086.png', alt: '[]' },\n    { url: 'q_087.png', alt: '[]' },\n    { url: 'q_088.png', alt: '[]' },\n    { url: 'q_089.png', alt: '[]' },\n    { url: 'q_090.png', alt: '[]' },\n    { url: 'q_091.png', alt: '[]' },\n    { url: 'q_092.png', alt: '[]' },\n    { url: 'q_093.png', alt: '[]' },\n    { url: 'q_094.png', alt: '[]' },\n    { url: 'q_095.png', alt: '[]' },\n    { url: 'q_096.png', alt: '[]' },\n    { url: 'q_097.png', alt: '[]' },\n    { url: 'q_098.png', alt: '[]' },\n    { url: 'q_099.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_101.png', alt: '[]' },\n    { url: 'q_102.png', alt: '[]' },\n    { url: 'q_103.png', alt: '[]' },\n    { url: 'q_104.png', alt: '[]' },\n    { url: 'q_105.png', alt: '[]' },\n    { url: 'q_106.png', alt: '[]' },\n    { url: 'q_107.png', alt: '[]' },\n    { url: 'q_108.png', alt: '[]' },\n    { url: 'q_109.png', alt: '[]' },\n    { url: 'q_110.png', alt: '[]' },\n    { url: 'q_111.png', alt: '[]' },\n    { url: 'q_112.png', alt: '[]' },\n    { url: 'q_113.png', alt: '[]' },\n    { url: 'q_114.png', alt: '[]' },\n    { url: 'q_115.png', alt: '[]' },\n    { url: 'q_116.png', alt: '[]' },\n    { url: 'q_117.png', alt: '[]' },\n    { url: 'q_118.png', alt: '[]' },\n    { url: 'q_119.png', alt: '[]' },\n    { url: 'q_120.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_121.png', alt: '[]' },\n    { url: 'q_122.png', alt: '[]' },\n    { url: 'q_123.png', alt: '[]' },\n    { url: 'q_124.png', alt: '[]' },\n    { url: 'q_125.png', alt: '[]' },\n    { url: 'q_126.png', alt: '[]' },\n    { url: 'q_127.png', alt: '[]' },\n    { url: 'q_128.png', alt: '[]' },\n    { url: 'q_129.png', alt: '[]' },\n    { url: 'q_130.png', alt: '[]' },\n    { url: 'q_131.png', alt: '[]' },\n    { url: 'q_132.png', alt: '[]' },\n    { url: 'q_133.png', alt: '[]' },\n    { url: 'q_134.png', alt: '[]' },\n    { url: 'q_135.png', alt: '[]' },\n    { url: 'q_136.png', alt: '[]' },\n    { url: 'q_137.png', alt: '[]' },\n    { url: 'q_138.png', alt: '[]' },\n    { url: 'q_139.png', alt: '[]' },\n    { url: 'q_140.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_141.png', alt: '[]' },\n    { url: 'q_142.png', alt: '[]' },\n    { url: 'q_143.png', alt: '[]' },\n    { url: 'q_144.png', alt: '[]' },\n    { url: 'q_145.png', alt: '[]' },\n    { url: 'q_146.png', alt: '[]' },\n    { url: 'q_147.png', alt: '[]' },\n    { url: 'q_148.png', alt: '[]' },\n    { url: 'q_149.png', alt: '[]' },\n    { url: 'q_150.png', alt: '[]' },\n    { url: 'q_151.png', alt: '[]' },\n    { url: 'q_152.png', alt: '[]' },\n    { url: 'q_153.png', alt: '[]' },\n    { url: 'q_154.png', alt: '[]' },\n    { url: 'q_155.png', alt: '[]' },\n    { url: 'q_156.png', alt: '[]' },\n    { url: 'q_157.png', alt: '[]' },\n    { url: 'q_158.png', alt: '[]' },\n    { url: 'q_159.png', alt: '[]' },\n    { url: 'q_160.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'q_161.png', alt: '[]' },\n    { url: 'q_162.png', alt: '[]' },\n    { url: 'q_163.png', alt: '[]' },\n    { url: 'q_164.png', alt: '[]' },\n    { url: 'q_165.png', alt: '[]' },\n    { url: 'q_166.png', alt: '[]' },\n    { url: 'q_167.png', alt: '[]' },\n    { url: 'q_168.png', alt: '[]' },\n    { url: 'q_169.png', alt: '[]' },\n    { url: 'q_170.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }]] },\n\n\n\n  {\n    // 钉钉表情\n    emojiName: \"dingdingList\",\n    emojiSort: 2,\n    minEmoji: true,\n    emojiPath: \"static/img/dingding/\",\n    emojiList: [\n    [\n    { url: 'emotion_001.png', alt: '[微笑]' },\n    { url: 'emotion_002.png', alt: '[可爱]' },\n    { url: 'emotion_003.png', alt: '[憨笑]' },\n    { url: 'emotion_004.png', alt: '[色]' },\n    { url: 'emotion_005.png', alt: '[发呆]' },\n    { url: 'emotion_006.png', alt: '[老板]' },\n    { url: 'emotion_007.png', alt: '[流泪]' },\n    { url: 'emotion_008.png', alt: '[害羞]' },\n    { url: 'emotion_009.png', alt: '[闭嘴]' },\n    { url: 'emotion_010.png', alt: '[睡]' },\n    { url: 'emotion_011.png', alt: '[大哭]' },\n    { url: 'emotion_012.png', alt: '[尴尬]' },\n    { url: 'emotion_013.png', alt: '[感谢]' },\n    { url: 'emotion_014.png', alt: '[赞]' },\n    { url: 'emotion_015.png', alt: '[鼓掌]' },\n    { url: 'emotion_016.png', alt: '[打招呼]' },\n    { url: 'emotion_017.png', alt: '[666]' },\n    { url: 'emotion_018.png', alt: '[抱拳]' },\n    { url: 'emotion_019.png', alt: '[握手]' },\n    { url: 'emotion_020.png', alt: '[OK]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'emotion_021.png', alt: '[]' },\n    { url: 'emotion_022.png', alt: '[]' },\n    { url: 'emotion_023.png', alt: '[]' },\n    { url: 'emotion_024.png', alt: '[]' },\n    { url: 'emotion_025.png', alt: '[]' },\n    { url: 'emotion_026.png', alt: '[]' },\n    { url: 'emotion_027.png', alt: '[]' },\n    { url: 'emotion_028.png', alt: '[]' },\n    { url: 'emotion_029.png', alt: '[]' },\n    { url: 'emotion_030.png', alt: '[]' },\n    { url: 'emotion_031.png', alt: '[]' },\n    { url: 'emotion_032.png', alt: '[]' },\n    { url: 'emotion_033.png', alt: '[]' },\n    { url: 'emotion_034.png', alt: '[]' },\n    { url: 'emotion_035.png', alt: '[]' },\n    { url: 'emotion_036.png', alt: '[]' },\n    { url: 'emotion_037.png', alt: '[]' },\n    { url: 'emotion_038.png', alt: '[]' },\n    { url: 'emotion_039.png', alt: '[]' },\n    { url: 'emotion_040.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'emotion_041.png', alt: '[]' },\n    { url: 'emotion_042.png', alt: '[]' },\n    { url: 'emotion_043.png', alt: '[]' },\n    { url: 'emotion_044.png', alt: '[]' },\n    { url: 'emotion_045.png', alt: '[]' },\n    { url: 'emotion_046.png', alt: '[]' },\n    { url: 'emotion_047.png', alt: '[]' },\n    { url: 'emotion_048.png', alt: '[]' },\n    { url: 'emotion_049.png', alt: '[]' },\n    { url: 'emotion_050.png', alt: '[]' },\n    { url: 'emotion_051.png', alt: '[]' },\n    { url: 'emotion_052.png', alt: '[]' },\n    { url: 'emotion_053.png', alt: '[]' },\n    { url: 'emotion_054.png', alt: '[]' },\n    { url: 'emotion_055.png', alt: '[]' },\n    { url: 'emotion_056.png', alt: '[]' },\n    { url: 'emotion_057.png', alt: '[]' },\n    { url: 'emotion_058.png', alt: '[]' },\n    { url: 'emotion_059.png', alt: '[]' },\n    { url: 'emotion_060.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'emotion_061.png', alt: '[]' },\n    { url: 'emotion_062.png', alt: '[]' },\n    { url: 'emotion_063.png', alt: '[]' },\n    { url: 'emotion_064.png', alt: '[]' },\n    { url: 'emotion_065.png', alt: '[]' },\n    { url: 'emotion_066.png', alt: '[]' },\n    { url: 'emotion_067.png', alt: '[]' },\n    { url: 'emotion_068.png', alt: '[]' },\n    { url: 'emotion_069.png', alt: '[]' },\n    { url: 'emotion_070.png', alt: '[]' },\n    { url: 'emotion_071.png', alt: '[]' },\n    { url: 'emotion_072.png', alt: '[]' },\n    { url: 'emotion_073.png', alt: '[]' },\n    { url: 'emotion_074.png', alt: '[]' },\n    { url: 'emotion_075.png', alt: '[]' },\n    { url: 'emotion_076.png', alt: '[]' },\n    { url: 'emotion_077.png', alt: '[]' },\n    { url: 'emotion_078.png', alt: '[]' },\n    { url: 'emotion_079.png', alt: '[]' },\n    { url: 'emotion_080.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'emotion_081.png', alt: '[]' },\n    { url: 'emotion_082.png', alt: '[]' },\n    { url: 'emotion_083.png', alt: '[]' },\n    { url: 'emotion_084.png', alt: '[]' },\n    { url: 'emotion_085.png', alt: '[]' },\n    { url: 'emotion_086.png', alt: '[]' },\n    { url: 'emotion_087.png', alt: '[]' },\n    { url: 'emotion_088.png', alt: '[]' },\n    { url: 'emotion_089.png', alt: '[]' },\n    { url: 'emotion_090.png', alt: '[]' },\n    { url: 'emotion_091.png', alt: '[]' },\n    { url: 'emotion_092.png', alt: '[]' },\n    { url: 'emotion_093.png', alt: '[]' },\n    { url: 'emotion_094.png', alt: '[]' },\n    { url: 'emotion_095.png', alt: '[]' },\n    { url: 'emotion_096.png', alt: '[]' },\n    { url: 'emotion_097.png', alt: '[]' },\n    { url: 'emotion_098.png', alt: '[]' },\n    { url: 'emotion_099.png', alt: '[]' },\n    { url: 'emotion_100.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'emotion_101.png', alt: '[]' },\n    { url: 'emotion_102.png', alt: '[]' },\n    { url: 'emotion_103.png', alt: '[]' },\n    { url: 'emotion_104.png', alt: '[]' },\n    { url: 'emotion_105.png', alt: '[]' },\n    { url: 'emotion_106.png', alt: '[]' },\n    { url: 'emotion_107.png', alt: '[]' },\n    { url: 'emotion_108.png', alt: '[]' },\n    { url: 'emotion_109.png', alt: '[]' },\n    { url: 'emotion_110.png', alt: '[]' },\n    { url: 'emotion_111.png', alt: '[]' },\n    { url: 'emotion_112.png', alt: '[]' },\n    { url: 'emotion_113.png', alt: '[]' },\n    { url: 'emotion_114.png', alt: '[]' },\n    { url: 'emotion_115.png', alt: '[]' },\n    { url: 'emotion_116.png', alt: '[]' },\n    { url: 'emotion_117.png', alt: '[]' },\n    { url: 'emotion_118.png', alt: '[]' },\n    { url: 'emotion_119.png', alt: '[]' },\n    { url: 'emotion_120.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: 'emotion_121.png', alt: '[]' },\n    { url: 'emotion_122.png', alt: '[]' },\n    { url: 'emotion_123.png', alt: '[]' },\n    { url: 'emotion_124.png', alt: '[]' },\n    { url: 'emotion_125.png', alt: '[]' },\n    { url: 'emotion_126.png', alt: '[]' },\n    { url: 'emotion_127.png', alt: '[]' },\n    { url: 'emotion_128.png', alt: '[]' },\n    { url: 'emotion_129.png', alt: '[]' },\n    { url: 'emotion_130.png', alt: '[]' },\n    { url: 'emotion_131.png', alt: '[]' },\n    { url: 'emotion_132.png', alt: '[]' },\n    { url: 'emotion_133.png', alt: '[]' },\n    { url: 'emotion_134.png', alt: '[]' },\n    { url: 'emotion_135.png', alt: '[]' },\n    { url: 'emotion_136.png', alt: '[]' },\n    { url: 'emotion_137.png', alt: '[]' },\n    { url: 'emotion_138.png', alt: '[]' },\n    { url: 'emotion_139.png', alt: '[]' },\n    { url: 'emotion_140.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }]] },\n\n\n\n  {\n    // 抖音表情\n    emojiName: \"douyinList\",\n    emojiSort: 3,\n    minEmoji: true,\n    emojiPath: \"static/img/douyin/\",\n    emojiList: [\n    [\n    { url: '0.png', alt: '[抖音1]' },\n    { url: '1.png', alt: '[抖音2]' },\n    { url: '2.png', alt: '[抖音3]' },\n    { url: '3.png', alt: '[抖音4]' },\n    { url: '4.png', alt: '[]' },\n    { url: '5.png', alt: '[]' },\n    { url: '6.png', alt: '[]' },\n    { url: '7.png', alt: '[]' },\n    { url: '8.png', alt: '[]' },\n    { url: '9.png', alt: '[]' },\n    { url: '10.png', alt: '[]' },\n    { url: '11.png', alt: '[]' },\n    { url: '12.png', alt: '[]' },\n    { url: '13.png', alt: '[]' },\n    { url: '14.png', alt: '[]' },\n    { url: '15.png', alt: '[]' },\n    { url: '16.png', alt: '[]' },\n    { url: '17.png', alt: '[]' },\n    { url: '18.png', alt: '[]' },\n    { url: '19.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '20.png', alt: '[]' },\n    { url: '21.png', alt: '[]' },\n    { url: '22.png', alt: '[]' },\n    { url: '23.png', alt: '[]' },\n    { url: '24.png', alt: '[]' },\n    { url: '25.png', alt: '[]' },\n    { url: '26.png', alt: '[]' },\n    { url: '27.png', alt: '[]' },\n    { url: '28.png', alt: '[]' },\n    { url: '29.png', alt: '[]' },\n    { url: '30.png', alt: '[]' },\n    { url: '31.png', alt: '[]' },\n    { url: '32.png', alt: '[]' },\n    { url: '33.png', alt: '[]' },\n    { url: '34.png', alt: '[]' },\n    { url: '35.png', alt: '[]' },\n    { url: '36.png', alt: '[]' },\n    { url: '37.png', alt: '[]' },\n    { url: '38.png', alt: '[]' },\n    { url: '39.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '40.png', alt: '[]' },\n    { url: '41.png', alt: '[]' },\n    { url: '42.png', alt: '[]' },\n    { url: '43.png', alt: '[]' },\n    { url: '44.png', alt: '[]' },\n    { url: '25.png', alt: '[]' },\n    { url: '46.png', alt: '[]' },\n    { url: '47.png', alt: '[]' },\n    { url: '48.png', alt: '[]' },\n    { url: '49.png', alt: '[]' },\n    { url: '50.png', alt: '[]' },\n    { url: '51.png', alt: '[]' },\n    { url: '52.png', alt: '[]' },\n    { url: '53.png', alt: '[]' },\n    { url: '54.png', alt: '[]' },\n    { url: '55.png', alt: '[]' },\n    { url: '56.png', alt: '[]' },\n    { url: '57.png', alt: '[]' },\n    { url: '58.png', alt: '[]' },\n    { url: '59.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '60.png', alt: '[]' },\n    { url: '61.png', alt: '[]' },\n    { url: '62.png', alt: '[]' },\n    { url: '63.png', alt: '[]' },\n    { url: '64.png', alt: '[]' },\n    { url: '65.png', alt: '[]' },\n    { url: '66.png', alt: '[]' },\n    { url: '67.png', alt: '[]' },\n    { url: '68.png', alt: '[]' },\n    { url: '69.png', alt: '[]' },\n    { url: '70.png', alt: '[]' },\n    { url: '71.png', alt: '[]' },\n    { url: '72.png', alt: '[]' },\n    { url: '73.png', alt: '[]' },\n    { url: '74.png', alt: '[]' },\n    { url: '75.png', alt: '[]' },\n    { url: '76.png', alt: '[]' },\n    { url: '77.png', alt: '[]' },\n    { url: '78.png', alt: '[]' },\n    { url: '79.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '80.png', alt: '[]' },\n    { url: '81.png', alt: '[]' },\n    { url: '82.png', alt: '[]' },\n    { url: '83.png', alt: '[]' },\n    { url: '84.png', alt: '[]' },\n    { url: '85.png', alt: '[]' },\n    { url: '86.png', alt: '[]' },\n    { url: '87.png', alt: '[]' },\n    { url: '88.png', alt: '[]' },\n    { url: '89.png', alt: '[]' },\n    { url: '90.png', alt: '[]' },\n    { url: '91.png', alt: '[]' },\n    { url: '92.png', alt: '[]' },\n    { url: '93.png', alt: '[]' },\n    { url: '94.png', alt: '[]' },\n    { url: '95.png', alt: '[]' },\n    { url: '96.png', alt: '[]' },\n    { url: '97.png', alt: '[]' },\n    { url: '98.png', alt: '[]' },\n    { url: '99.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '100.png', alt: '[]' },\n    { url: '101.png', alt: '[]' },\n    { url: '102.png', alt: '[]' },\n    { url: '103.png', alt: '[]' },\n    { url: '104.png', alt: '[]' },\n    { url: '105.png', alt: '[]' },\n    { url: '106.png', alt: '[]' },\n    { url: '107.png', alt: '[]' },\n    { url: '108.png', alt: '[]' },\n    { url: '109.png', alt: '[]' },\n    { url: '110.png', alt: '[]' },\n    { url: '111.png', alt: '[]' },\n    { url: '112.png', alt: '[]' },\n    { url: '113.png', alt: '[]' },\n    { url: '114.png', alt: '[]' },\n    { url: '115.png', alt: '[]' },\n    { url: '116.png', alt: '[]' },\n    { url: '117.png', alt: '[]' },\n    { url: '118.png', alt: '[]' },\n    { url: '119.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '120.png', alt: '[]' },\n    { url: '121.png', alt: '[]' },\n    { url: '122.png', alt: '[]' },\n    { url: '123.png', alt: '[]' },\n    { url: '124.png', alt: '[]' },\n    { url: '125.png', alt: '[]' },\n    { url: '126.png', alt: '[]' },\n    { url: '127.png', alt: '[]' },\n    { url: '128.png', alt: '[]' },\n    { url: '129.png', alt: '[]' },\n    { url: '130.png', alt: '[]' },\n    { url: '131.png', alt: '[]' },\n    { url: '132.png', alt: '[]' },\n    { url: '133.png', alt: '[]' },\n    { url: '134.png', alt: '[]' },\n    { url: '135.png', alt: '[]' },\n    { url: '136.png', alt: '[]' },\n    { url: '137.png', alt: '[]' },\n    { url: '138.png', alt: '[]' },\n    { url: '139.png', alt: '[]' },\n\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }],\n\n    [\n    { url: '140.png', alt: '[]' },\n    { url: '141.png', alt: '[]' },\n    { url: 'static/img/tab/delete2.png', alt: '[删除]' }]] },\n\n\n\n  {\n    emojiName: \"ajmdList\",\n    emojiSort: 4,\n    minEmoji: false,\n    emojiPath: \"static/img/ajmd/\",\n    emojiList: [\n    [\n    { url: '0.png', alt: '[ajmd1]' },\n    { url: '1.png', alt: '[ajmd2]' },\n    { url: '2.png', alt: '[ajmd3]' },\n    { url: '3.png', alt: '[ajmd4]' },\n    { url: '4.png', alt: '[]' },\n    { url: '5.png', alt: '[]' },\n    { url: '6.png', alt: '[]' },\n    { url: '7.png', alt: '[]' }],\n\n    [\n    { url: '8.png', alt: '[]' },\n    { url: '9.png', alt: '[]' },\n    { url: '10.png', alt: '[]' },\n    { url: '11.png', alt: '[]' },\n    { url: '12.png', alt: '[]' },\n    { url: '13.png', alt: '[]' },\n    { url: '14.png', alt: '[]' },\n    { url: '15.png', alt: '[]' }],\n\n    [\n    { url: '16.png', alt: '[]' },\n    { url: '17.png', alt: '[]' },\n    { url: '18.png', alt: '[]' },\n    { url: '19.png', alt: '[]' },\n    { url: '20.png', alt: '[]' },\n    { url: '21.png', alt: '[]' },\n    { url: '22.png', alt: '[]' },\n    { url: '23.png', alt: '[]' }],\n\n    [\n    { url: '24.png', alt: '[]' },\n    { url: '25.png', alt: '[]' },\n    { url: '26.png', alt: '[]' },\n    { url: '27.png', alt: '[]' },\n    { url: '28.png', alt: '[]' },\n    { url: '29.png', alt: '[]' },\n    { url: '30.png', alt: '[]' },\n    { url: '31.png', alt: '[]' }],\n\n    [\n    { url: '32.png', alt: '[]' },\n    { url: '33.png', alt: '[]' },\n    { url: '34.png', alt: '[]' },\n    { url: '35.png', alt: '[]' },\n    { url: '36.png', alt: '[]' },\n    { url: '37.png', alt: '[]' },\n    { url: '38.png', alt: '[]' },\n    { url: '39.png', alt: '[]' }],\n\n    [\n    { url: '40.png', alt: '[]' },\n    { url: '41.png', alt: '[]' },\n    { url: '42.png', alt: '[]' },\n    { url: '43.png', alt: '[]' },\n    { url: '44.png', alt: '[]' },\n    { url: '45.png', alt: '[]' },\n    { url: '46.png', alt: '[]' },\n    { url: '47.png', alt: '[]' }]] },\n\n\n\n  {\n    emojiName: \"gongfuhuList\",\n    emojiSort: 5,\n    minEmoji: false,\n    emojiPath: \"static/img/gongfuhu/\",\n    emojiList: [\n    [\n    { url: '0.gif', alt: '[]' },\n    { url: '1.gif', alt: '[]' },\n    { url: '2.gif', alt: '[]' },\n    { url: '3.gif', alt: '[]' },\n    { url: '4.gif', alt: '[]' },\n    { url: '5.gif', alt: '[]' },\n    { url: '6.gif', alt: '[]' },\n    { url: '7.gif', alt: '[]' }],\n\n    [\n    { url: '8.gif', alt: '[]' },\n    { url: '9.gif', alt: '[]' },\n    { url: '10.gif', alt: '[]' },\n    { url: '11.gif', alt: '[]' },\n    { url: '12.gif', alt: '[]' },\n    { url: '13.gif', alt: '[]' },\n    { url: '14.gif', alt: '[]' },\n    { url: '15.gif', alt: '[]' }],\n\n\n    [\n    { url: '16.gif', alt: '[]' },\n    { url: '17.gif', alt: '[]' },\n    { url: '18.gif', alt: '[]' },\n    { url: '19.gif', alt: '[]' },\n    { url: '20.gif', alt: '[]' },\n    { url: '21.gif', alt: '[]' },\n    { url: '22.gif', alt: '[]' },\n    { url: '23.gif', alt: '[]' }],\n\n    [\n    { url: '24.gif', alt: '[]' },\n    { url: '25.gif', alt: '[]' },\n    { url: '26.gif', alt: '[]' },\n    { url: '27.gif', alt: '[]' },\n    { url: '28.gif', alt: '[]' },\n    { url: '29.gif', alt: '[]' }]] },\n\n\n\n  {\n    emojiName: \"xxyList\",\n    emojiSort: 6,\n    minEmoji: false,\n    emojiPath: \"static/img/xxy/\",\n    emojiList: [\n    [\n    { url: '0.png', alt: '[]' },\n    { url: '1.png', alt: '[]' },\n    { url: '2.png', alt: '[]' },\n    { url: '3.png', alt: '[]' },\n    { url: '4.png', alt: '[]' },\n    { url: '5.png', alt: '[]' },\n    { url: '6.png', alt: '[]' },\n    { url: '7.png', alt: '[]' }],\n\n    [\n    { url: '8.png', alt: '[]' },\n    { url: '9.png', alt: '[]' },\n    { url: '10.png', alt: '[]' },\n    { url: '11.png', alt: '[]' },\n    { url: '12.png', alt: '[]' },\n    { url: '13.png', alt: '[]' },\n    { url: '14.png', alt: '[]' },\n    { url: '15.png', alt: '[]' }],\n\n    [\n    { url: '16.png', alt: '[]' },\n    { url: '17.png', alt: '[]' },\n    { url: '18.png', alt: '[]' },\n    { url: '19.png', alt: '[]' },\n    { url: '20.png', alt: '[]' },\n    { url: '21.png', alt: '[]' },\n    { url: '22.png', alt: '[]' },\n    { url: '23.png', alt: '[]' }],\n\n    [\n    { url: '24.png', alt: '[]' },\n    { url: '25.png', alt: '[]' },\n    { url: '26.png', alt: '[]' },\n    { url: '27.png', alt: '[]' },\n    { url: '28.png', alt: '[]' },\n    { url: '29.png', alt: '[]' },\n    { url: '30.png', alt: '[]' },\n    { url: '31.png', alt: '[]' }],\n\n    [\n    { url: '32.png', alt: '[]' },\n    { url: '33.png', alt: '[]' },\n    { url: '34.png', alt: '[]' },\n    { url: '35.png', alt: '[]' },\n    { url: '36.png', alt: '[]' },\n    { url: '37.png', alt: '[]' },\n    { url: '38.png', alt: '[]' },\n    { url: '39.png', alt: '[]' }]] },\n\n\n\n  {\n    emojiName: \"feineneList\",\n    emojiSort: 7,\n    minEmoji: false,\n    emojiPath: \"static/img/feinene/\",\n    emojiList: [\n    [\n    { url: '0.gif', alt: '[]' },\n    { url: '1.gif', alt: '[]' },\n    { url: '2.gif', alt: '[]' },\n    { url: '3.gif', alt: '[]' },\n    { url: '4.gif', alt: '[]' },\n    { url: '5.gif', alt: '[]' },\n    { url: '6.gif', alt: '[]' },\n    { url: '7.gif', alt: '[]' }],\n\n    [\n    { url: '8.gif', alt: '[]' },\n    { url: '9.gif', alt: '[]' },\n    { url: '10.gif', alt: '[]' },\n    { url: '11.gif', alt: '[]' },\n    { url: '12.gif', alt: '[]' },\n    { url: '13.gif', alt: '[]' },\n    { url: '14.gif', alt: '[]' },\n    { url: '15.gif', alt: '[]' }],\n\n    [\n    { url: '16.gif', alt: '[]' },\n    { url: '17.gif', alt: '[]' },\n    { url: '18.gif', alt: '[]' },\n    { url: '19.gif', alt: '[]' },\n    { url: '20.gif', alt: '[]' },\n    { url: '21.gif', alt: '[]' },\n    { url: '22.gif', alt: '[]' },\n    { url: '23.gif', alt: '[]' }],\n\n    [\n    { url: '24.gif', alt: '[]' },\n    { url: '25.gif', alt: '[]' }]] },\n\n\n\n  {\n    emojiName: \"\",\n    emojiSort: 8,\n    minEmoji: false,\n    emojiPath: \"\",\n    emojiList: [\n    [\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' },\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }],\n\n    [\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' },\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }],\n\n    [\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' },\n    { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }, { url: '', alt: '[]' }]] }]\n\n\n\n\n\n\n\n\n\n  // export与export default均可用于导出常量、函数、文件、模块等\n  // 在一个文件或模块中，export、import可以有多个，export default仅有一个\n  // 通过export方式导出，在导入时要加{ }，export default则不需要\n  // export能直接导出变量表达式，export default不行。\n};var _default =\n\nemojiData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!*******************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/libs/strophe.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var __WEBPACK_LOCAL_MODULE_0__, __WEBPACK_LOCAL_MODULE_0__module;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_3__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _vuex = __webpack_require__(/*! vuex */ 13);\nvar _index = _interopRequireDefault(__webpack_require__(/*! ../../store/index.js */ 16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /** File: strophe.js\r\n                                                                                                                                                                    *  A JavaScript library for writing XMPP clients.\r\n                                                                                                                                                                    *\r\n                                                                                                                                                                    *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)\r\n                                                                                                                                                                    *  to emulate a persistent, stateful, two-way connection to an XMPP server or\r\n                                                                                                                                                                    *  alternatively WebSockets.\r\n                                                                                                                                                                    *\r\n                                                                                                                                                                    *  More information on BOSH can be found in XEP 124.\r\n                                                                                                                                                                    *  For more information on XMPP-over WebSocket see this RFC:\r\n                                                                                                                                                                    *  http://tools.ietf.org/html/rfc7395\r\n                                                                                                                                                                    */ /* All of the Strophe globals are defined in this special function below so\r\n                                                                                                                                                                        * that references to the globals become closures.  This will ensure that\r\n                                                                                                                                                                        * on page reload, these references will still be available to callbacks\r\n                                                                                                                                                                        * that are still executing.\r\n                                                                                                                                                                        */ // //console.log(window,document)\nvar isSocketConnnected = false;var xmldom = __webpack_require__(/*! ./xmldom/dom-parser */ 17);var disp = __webpack_require__(/*! ../../utils/broadcast */ 20); // //console.log('xml', xmldom, typeof xmldom.DOMParser);\nvar DOMParser = xmldom.DOMParser; //console.log('DOMParser inited');\nvar document = new DOMParser().parseFromString(\"<?xml version='1.0'?>\\n\", 'text/xml'); //console.log('document inited');\nvar window = window || {};window.DOMParser = DOMParser; //console.log('strophe ...')\nvar Strophe = null;var $build = null;var $msg = null;var $iq = null;var $pres = null; /* jshint ignore:start */(function (callback) {/* jshint ignore:end */\n  // This code was written by Tyler Akins and has been placed in the\n  // public domain.  It would be nice if you left this header intact.\n  // Base64 code from Tyler Akins -- http://rumkin.com\n  //module.exports = callback();\n\n  (function (root, factory) {\n    //console.log(typeof define, define.amd, root)\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_0__module = { id: \"strophe-base64\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_0__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_0__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_0__module.exports, __WEBPACK_LOCAL_MODULE_0__module), __WEBPACK_LOCAL_MODULE_0__module.loaded = true, __WEBPACK_LOCAL_MODULE_0__ === undefined && (__WEBPACK_LOCAL_MODULE_0__ = __WEBPACK_LOCAL_MODULE_0__module.exports));\n    } else\n    {}\n  })(this, function () {\n    var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    var obj = {\n      /**\r\n                 * Encodes a string in base64\r\n                 * @param {String} input The string to encode in base64.\r\n                 */\n      encode: function encode(input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n\n        do {\n          chr1 = input.charCodeAt(i++);\n          chr2 = input.charCodeAt(i++);\n          chr3 = input.charCodeAt(i++);\n\n          enc1 = chr1 >> 2;\n          enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n          enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n          enc4 = chr3 & 63;\n\n          if (isNaN(chr2)) {\n            enc2 = (chr1 & 3) << 4;\n            enc3 = enc4 = 64;\n          } else if (isNaN(chr3)) {\n            enc4 = 64;\n          }\n\n          output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n          keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        } while (i < input.length);\n\n        return output;\n      },\n\n      /**\r\n          * Decodes a base64 string.\r\n          * @param {String} input The string to decode.\r\n          */\n      decode: function decode(input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n          enc1 = keyStr.indexOf(input.charAt(i++));\n          enc2 = keyStr.indexOf(input.charAt(i++));\n          enc3 = keyStr.indexOf(input.charAt(i++));\n          enc4 = keyStr.indexOf(input.charAt(i++));\n\n          chr1 = enc1 << 2 | enc2 >> 4;\n          chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n          chr3 = (enc3 & 3) << 6 | enc4;\n\n          output = output + String.fromCharCode(chr1);\n\n          if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n          }\n          if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n          }\n        } while (i < input.length);\n\n        return output;\n      } };\n\n    return obj;\n  });\n  /*\r\n       * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n       * in FIPS PUB 180-1\r\n       * Version 2.1a Copyright Paul Johnston 2000 - 2002.\r\n       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n       * Distributed under the BSD License\r\n       * See http://pajhome.org.uk/crypt/md5 for details.\r\n       */\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: false */\n  /* global define */\n\n  /* Some functions and variables have been stripped for use with Strophe */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_1__module = { id: \"strophe-sha1\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_1__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module), __WEBPACK_LOCAL_MODULE_1__module.loaded = true, __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports));\n    } else {}\n  })(this, function () {\n\n    /*\r\n                         * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n                         */\n    function core_sha1(x, len) {\n      /* append padding */\n      x[len >> 5] |= 0x80 << 24 - len % 32;\n      x[(len + 64 >> 9 << 4) + 15] = len;\n\n      var w = new Array(80);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var e = -1009589776;\n\n      var i, j, t, olda, oldb, oldc, oldd, olde;\n      for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n        olde = e;\n\n        for (j = 0; j < 80; j++) {\n          if (j < 16) {\n            w[j] = x[i + j];\n          } else\n          {\n            w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n          }\n          t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n          safe_add(safe_add(e, w[j]), sha1_kt(j)));\n          e = d;\n          d = c;\n          c = rol(b, 30);\n          b = a;\n          a = t;\n        }\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n      }\n      return [a, b, c, d, e];\n    }\n\n    /*\r\n       * Perform the appropriate triplet combination function for the current\r\n       * iteration\r\n       */\n    function sha1_ft(t, b, c, d) {\n      if (t < 20) {\n        return b & c | ~b & d;\n      }\n      if (t < 40) {\n        return b ^ c ^ d;\n      }\n      if (t < 60) {\n        return b & c | b & d | c & d;\n      }\n      return b ^ c ^ d;\n    }\n\n    /*\r\n       * Determine the appropriate additive constant for the current iteration\r\n       */\n    function sha1_kt(t) {\n      return t < 20 ? 1518500249 : t < 40 ? 1859775393 :\n      t < 60 ? -1894007588 : -899497514;\n    }\n\n    /*\r\n       * Calculate the HMAC-SHA1 of a key and some data\r\n       */\n    function core_hmac_sha1(key, data) {\n      var bkey = str2binb(key);\n      if (bkey.length > 16) {\n        bkey = core_sha1(bkey, key.length * 8);\n      }\n\n      var ipad = new Array(16),opad = new Array(16);\n      for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n      }\n\n      var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n      return core_sha1(opad.concat(hash), 512 + 160);\n    }\n\n    /*\r\n       * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n       * to work around bugs in some JS interpreters.\r\n       */\n    function safe_add(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 0xFFFF;\n    }\n\n    /*\r\n       * Bitwise rotate a 32-bit number to the left.\r\n       */\n    function rol(num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n\n    /*\r\n       * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n       * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n       */\n    function str2binb(str) {\n      var bin = [];\n      var mask = 255;\n      for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n      }\n      return bin;\n    }\n\n    /*\r\n       * Convert an array of big-endian words to a string\r\n       */\n    function binb2str(bin) {\n      var str = \"\";\n      var mask = 255;\n      for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n      }\n      return str;\n    }\n\n    /*\r\n       * Convert an array of big-endian words to a base-64 string\r\n       */\n    function binb2b64(binarray) {\n      var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      var str = \"\";\n      var triplet, j;\n      for (var i = 0; i < binarray.length * 4; i += 3) {\n        triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 |\n        (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 |\n        binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n        for (j = 0; j < 4; j++) {\n          if (i * 8 + j * 6 > binarray.length * 32) {\n            str += \"=\";\n          } else\n          {\n            str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n          }\n        }\n      }\n      return str;\n    }\n\n    /*\r\n       * These are the functions you'll usually want to call\r\n       * They take string arguments and return either hex or base-64 encoded strings\r\n       */\n    return {\n      b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n        return binb2b64(core_hmac_sha1(key, data));\n      },\n      b64_sha1: function b64_sha1(s) {\n        return binb2b64(core_sha1(str2binb(s), s.length * 8));\n      },\n      binb2str: binb2str,\n      core_hmac_sha1: core_hmac_sha1,\n      str_hmac_sha1: function str_hmac_sha1(key, data) {\n        return binb2str(core_hmac_sha1(key, data));\n      },\n      str_sha1: function str_sha1(s) {\n        return binb2str(core_sha1(str2binb(s), s.length * 8));\n      } };\n\n  });\n\n  /*\r\n       * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n       * Digest Algorithm, as defined in RFC 1321.\r\n       * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\r\n       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n       * Distributed under the BSD License\r\n       * See http://pajhome.org.uk/crypt/md5 for more info.\r\n       */\n\n  /*\r\n           * Everything that isn't used by Strophe has been stripped here!\r\n           */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_2__module = { id: \"strophe-md5\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_2__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module), __WEBPACK_LOCAL_MODULE_2__module.loaded = true, __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports));\n    } else {}\n  })(this, function (b) {\n    /*\r\n                          * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n                          * to work around bugs in some JS interpreters.\r\n                          */\n    var safe_add = function safe_add(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 0xFFFF;\n    };\n\n    /*\r\n        * Bitwise rotate a 32-bit number to the left.\r\n        */\n    var bit_rol = function bit_rol(num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    };\n\n    /*\r\n        * Convert a string to an array of little-endian words\r\n        */\n    var str2binl = function str2binl(str) {\n      var bin = [];\n      for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n      }\n      return bin;\n    };\n\n    /*\r\n        * Convert an array of little-endian words to a string\r\n        */\n    var binl2str = function binl2str(bin) {\n      var str = \"\";\n      for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n      }\n      return str;\n    };\n\n    /*\r\n        * Convert an array of little-endian words to a hex string.\r\n        */\n    var binl2hex = function binl2hex(binarray) {\n      var hex_tab = \"0123456789abcdef\";\n      var str = \"\";\n      for (var i = 0; i < binarray.length * 4; i++) {\n        str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) +\n        hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n      }\n      return str;\n    };\n\n    /*\r\n        * These functions implement the four basic operations the algorithm uses.\r\n        */\n    var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n    };\n\n    var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n      return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n    };\n\n    var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n      return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n    };\n\n    var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n      return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n\n    var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n      return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n    };\n\n    /*\r\n        * Calculate the MD5 of an array of little-endian words, and a bit length\r\n        */\n    var core_md5 = function core_md5(x, len) {\n      /* append padding */\n      x[len >> 5] |= 0x80 << len % 32;\n      x[(len + 64 >>> 9 << 4) + 14] = len;\n\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n\n      var olda, oldb, oldc, oldd;\n      for (var i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n\n        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n      }\n      return [a, b, c, d];\n    };\n\n    var obj = {\n      /*\r\n                 * These are the functions you'll usually want to call.\r\n                 * They take string arguments and return either hex or base-64 encoded\r\n                 * strings.\r\n                 */\n      hexdigest: function hexdigest(s) {\n        return binl2hex(core_md5(str2binl(s), s.length * 8));\n      },\n\n      hash: function hash(s) {\n        return binl2str(core_md5(str2binl(s), s.length * 8));\n      } };\n\n    return obj;\n  });\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_3__module = { id: \"strophe-utils\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_3__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_3__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_3__module.exports, __WEBPACK_LOCAL_MODULE_3__module), __WEBPACK_LOCAL_MODULE_3__module.loaded = true, __WEBPACK_LOCAL_MODULE_3__ === undefined && (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__module.exports));\n    } else {}\n  })(this, function () {\n\n    var utils = {\n\n      utf16to8: function utf16to8(str) {\n        var i, c;\n        var out = \"\";\n        var len = str.length;\n        for (i = 0; i < len; i++) {\n          c = str.charCodeAt(i);\n          if (c >= 0x0000 && c <= 0x007F) {\n            out += str.charAt(i);\n          } else if (c > 0x07FF) {\n            out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n            out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n            out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n          } else {\n            out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n            out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n          }\n        }\n        return out;\n      },\n\n      addCookies: function addCookies(cookies) {\n        /* Parameters:\r\n                                                 *  (Object) cookies - either a map of cookie names\r\n                                                 *    to string values or to maps of cookie values.\r\n                                                 *\r\n                                                 * For example:\r\n                                                 * { \"myCookie\": \"1234\" }\r\n                                                 *\r\n                                                 * or:\r\n                                                 * { \"myCookie\": {\r\n                                                 *      \"value\": \"1234\",\r\n                                                 *      \"domain\": \".example.org\",\r\n                                                 *      \"path\": \"/\",\r\n                                                 *      \"expires\": expirationDate\r\n                                                 *      }\r\n                                                 *  }\r\n                                                 *\r\n                                                 *  These values get passed to Strophe.Connection via\r\n                                                 *   options.cookies\r\n                                                 */\n        var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;\n        for (cookieName in cookies || {}) {\n          expires = '';\n          domain = '';\n          path = '';\n          cookieObj = cookies[cookieName];\n          isObj = typeof cookieObj == \"object\";\n          cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n          if (isObj) {\n            expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n            domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n            path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n          }\n          document.cookie =\n          cookieName + '=' + cookieValue + expires + domain + path;\n        }\n      } };\n\n    return utils;\n  });\n\n  /*\r\n       This program is distributed under the terms of the MIT license.\r\n       Please see the LICENSE file for details.\r\n      \n       Copyright 2006-2008, OGG, LLC\r\n       */\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /* global define */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_4__ = ((function () {\n        return factory();\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else {}\n  })(this, function () {\n\n    /** Function: Function.prototype.bind\r\n                         *  Bind a function to an instance.\r\n                         *\r\n                         *  This Function object extension method creates a bound method similar\r\n                         *  to those in Python.  This means that the 'this' object will point\r\n                         *  to the instance you want.  See\r\n                         *  <a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind'>MDC's bind() documentation</a> and\r\n                         *  <a href='http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/'>Bound Functions and Function Imports in JavaScript</a>\r\n                         *  for a complete explanation.\r\n                         *\r\n                         *  This extension already exists in some browsers (namely, Firefox 3), but\r\n                         *  we provide it to support those that don't.\r\n                         *\r\n                         *  Parameters:\r\n                         *    (Object) obj - The object that will become 'this' in the bound function.\r\n                         *    (Object) argN - An option argument that will be prepended to the\r\n                         *      arguments given for the function call\r\n                         *\r\n                         *  Returns:\r\n                         *    The bound function.\r\n                         */\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {\n        var func = this;\n        var _slice = Array.prototype.slice;\n        var _concat = Array.prototype.concat;\n        var _args = _slice.call(arguments, 1);\n        return function () {\n          return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));\n        };\n      };\n    }\n\n    /** Function: Array.isArray\r\n       *  This is a polyfill for the ES5 Array.isArray method.\r\n       */\n    if (!Array.isArray) {\n      Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      };\n    }\n\n    /** Function: Array.prototype.indexOf\r\n       *  Return the index of an object in an array.\r\n       *\r\n       *  This function is not supplied by some JavaScript implementations, so\r\n       *  we provide it if it is missing.  This code is from:\r\n       *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\r\n       *\r\n       *  Parameters:\r\n       *    (Object) elt - The object to look for.\r\n       *    (Integer) from - The index from which to start looking. (optional).\r\n       *\r\n       *  Returns:\r\n       *    The index of elt in the array or -1 if not found.\r\n       */\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function (elt /*, from*/) {\n        var len = this.length;\n        var from = Number(arguments[1]) || 0;\n        from = from < 0 ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) {\n          from += len;\n        }\n\n        for (; from < len; from++) {\n          if (from in this && this[from] === elt) {\n            return from;\n          }\n        }\n        return -1;\n      };\n    }\n  });\n\n\n  /** Function: Array.prototype.forEach\r\n       *\r\n       *  This function is not available in IE < 9\r\n       *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\r\n       */\n  if (!Array.prototype.forEach) {\n    Array.prototype.forEach = function (callback, thisArg) {\n      var T, k;\n      if (this === null) {\n        throw new TypeError(' this is null or not defined');\n      }\n\n      // 1. Let O be the result of calling toObject() passing the\n      // |this| value as the argument.\n      var O = Object(this);\n      // 2. Let lenValue be the result of calling the Get() internal\n      // method of O with the argument \"length\".\n      // 3. Let len be toUint32(lenValue).\n      var len = O.length >>> 0;\n      // 4. If isCallable(callback) is false, throw a TypeError exception.\n      // See: http://es5.github.com/#x9.11\n      if (typeof callback !== \"function\") {\n        throw new TypeError(callback + ' is not a function');\n      }\n      // 5. If thisArg was supplied, let T be thisArg; else let\n      // T be undefined.\n      if (arguments.length > 1) {\n        T = thisArg;\n      }\n      // 6. Let k be 0\n      k = 0;\n      // 7. Repeat, while k < len\n      while (k < len) {\n        var kValue;\n        // a. Let Pk be ToString(k).\n        //        This is implicit for LHS operands of the in operator\n        // b. Let kPresent be the result of calling the HasProperty\n        //        internal method of O with argument Pk.\n        //        This step can be combined with c\n        // c. If kPresent is true, then\n        if (k in O) {\n          // i. Let kValue be the result of calling the Get internal\n          // method of O with argument Pk.\n          kValue = O[k];\n          // ii. Call the Call internal method of callback with T as\n          // the this value and argument list containing kValue, k, and O.\n          callback.call(T, kValue, k, O);\n        }\n        // d. Increase k by 1.\n        k++;\n      }\n      // 8. return undefined\n    };\n  }\n\n  /*\r\n     This program is distributed under the terms of the MIT license.\r\n     Please see the LICENSE file for details.\r\n    \n     Copyright 2006-2008, OGG, LLC\r\n     */\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /*global define, document, window, setTimeout, clearTimeout, ActiveXObject, DOMParser */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __WEBPACK_LOCAL_MODULE_1__,\n      __WEBPACK_LOCAL_MODULE_0__,\n      __WEBPACK_LOCAL_MODULE_2__,\n      __WEBPACK_LOCAL_MODULE_3__,\n      __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_5__ = ((function () {\n        return factory.apply(this, arguments);\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else { var o; }\n  })(this, function (SHA1, Base64, MD5, utils, Strophe) {\n\n    var Strophe;\n\n    /** Function: $build\r\n                  *  Create a Strophe.Builder.\r\n                  *  This is an alias for 'new Strophe.Builder(name, attrs)'.\r\n                  *\r\n                  *  Parameters:\r\n                  *    (String) name - The root element name.\r\n                  *    (Object) attrs - The attributes for the root element in object notation.\r\n                  *\r\n                  *  Returns:\r\n                  *    A new Strophe.Builder object.\r\n                  */\n    function $build(name, attrs) {\n      return new Strophe.Builder(name, attrs);\n    }\n\n    /** Function: $msg\r\n       *  Create a Strophe.Builder with a <message/> element as the root.\r\n       *\r\n       *  Parameters:\r\n       *    (Object) attrs - The <message/> element attributes in object notation.\r\n       *\r\n       *  Returns:\r\n       *    A new Strophe.Builder object.\r\n       */\n    function $msg(attrs) {\n      return new Strophe.Builder(\"message\", attrs);\n    }\n\n    /** Function: $iq\r\n       *  Create a Strophe.Builder with an <iq/> element as the root.\r\n       *\r\n       *  Parameters:\r\n       *    (Object) attrs - The <iq/> element attributes in object notation.\r\n       *\r\n       *  Returns:\r\n       *    A new Strophe.Builder object.\r\n       */\n    function $iq(attrs) {\n      return new Strophe.Builder(\"iq\", attrs);\n    }\n\n    /** Function: $pres\r\n       *  Create a Strophe.Builder with a <presence/> element as the root.\r\n       *\r\n       *  Parameters:\r\n       *    (Object) attrs - The <presence/> element attributes in object notation.\r\n       *\r\n       *  Returns:\r\n       *    A new Strophe.Builder object.\r\n       */\n    function $pres(attrs) {\n      return new Strophe.Builder(\"presence\", attrs);\n    }\n\n    /** Class: Strophe\r\n       *  An object container for all Strophe library functions.\r\n       *\r\n       *  This class is just a container for all the objects and constants\r\n       *  used in the library.  It is not meant to be instantiated, but to\r\n       *  provide a namespace for library objects, constants, and functions.\r\n       */\n    Strophe = {\n      /** Constant: VERSION\r\n                 *  The version of the Strophe library. Unreleased builds will have\r\n                 *  a version of head-HASH where HASH is a partial revision.\r\n                 */\n      VERSION: \"1.2.9\",\n\n      /** Constants: XMPP Namespace Constants\r\n                         *  Common namespace constants from the XMPP RFCs and XEPs.\r\n                         *\r\n                         *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\r\n                         *  NS.BOSH - BOSH namespace from XEP 206.\r\n                         *  NS.CLIENT - Main XMPP client namespace.\r\n                         *  NS.AUTH - Legacy authentication namespace.\r\n                         *  NS.ROSTER - Roster operations namespace.\r\n                         *  NS.PROFILE - Profile namespace.\r\n                         *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\r\n                         *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\r\n                         *  NS.MUC - Multi-User Chat namespace from XEP 45.\r\n                         *  NS.SASL - XMPP SASL namespace from RFC 3920.\r\n                         *  NS.STREAM - XMPP Streams namespace from RFC 3920.\r\n                         *  NS.BIND - XMPP Binding namespace from RFC 3920.\r\n                         *  NS.SESSION - XMPP Session namespace from RFC 3920.\r\n                         *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\r\n                         *  NS.XHTML - XHTML body namespace from XEP 71.\r\n                         */\n      NS: {\n        HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n        BOSH: \"urn:xmpp:xbosh\",\n        CLIENT: \"jabber:client\",\n        AUTH: \"jabber:iq:auth\",\n        ROSTER: \"jabber:iq:roster\",\n        PROFILE: \"jabber:iq:profile\",\n        DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n        DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n        MUC: \"http://jabber.org/protocol/muc\",\n        SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n        STREAM: \"http://etherx.jabber.org/streams\",\n        FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n        BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n        SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n        VERSION: \"jabber:iq:version\",\n        STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n        XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n        XHTML: \"http://www.w3.org/1999/xhtml\" },\n\n\n      /** Constants: XHTML_IM Namespace\r\n                                                  *  contains allowed tags, tag attributes, and css properties.\r\n                                                  *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\r\n                                                  *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\r\n                                                  *  allowed tags and their attributes.\r\n                                                  */\n      XHTML: {\n        tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n        attributes: {\n          'a': ['href'],\n          'blockquote': ['style'],\n          'br': [],\n          'cite': ['style'],\n          'em': [],\n          'img': ['src', 'alt', 'style', 'height', 'width'],\n          'li': ['style'],\n          'ol': ['style'],\n          'p': ['style'],\n          'span': ['style'],\n          'strong': [],\n          'ul': ['style'],\n          'body': [] },\n\n        css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n        /** Function: XHTML.validTag\r\n                                                                                                                                                                      *\r\n                                                                                                                                                                      * Utility method to determine whether a tag is allowed\r\n                                                                                                                                                                      * in the XHTML_IM namespace.\r\n                                                                                                                                                                      *\r\n                                                                                                                                                                      * XHTML tag names are case sensitive and must be lower case.\r\n                                                                                                                                                                      */\n        validTag: function validTag(tag) {\n          for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n            if (tag == Strophe.XHTML.tags[i]) {\n              return true;\n            }\n          }\n          return false;\n        },\n        /** Function: XHTML.validAttribute\r\n            *\r\n            * Utility method to determine whether an attribute is allowed\r\n            * as recommended per XEP-0071\r\n            *\r\n            * XHTML attribute names are case sensitive and must be lower case.\r\n            */\n        validAttribute: function validAttribute(tag, attribute) {\n          if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n            for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n              if (attribute == Strophe.XHTML.attributes[tag][i]) {\n                return true;\n              }\n            }\n          }\n          return false;\n        },\n        validCSS: function validCSS(style) {\n          for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n            if (style == Strophe.XHTML.css[i]) {\n              return true;\n            }\n          }\n          return false;\n        } },\n\n\n      /** Constants: Connection Status Constants\r\n              *  Connection status constants for use by the connection handler\r\n              *  callback.\r\n              *\r\n              *  Status.ERROR - An error has occurred\r\n              *  Status.CONNECTING - The connection is currently being made\r\n              *  Status.CONNFAIL - The connection attempt failed\r\n              *  Status.AUTHENTICATING - The connection is authenticating\r\n              *  Status.AUTHFAIL - The authentication attempt failed\r\n              *  Status.CONNECTED - The connection has succeeded\r\n              *  Status.DISCONNECTED - The connection has been terminated\r\n              *  Status.DISCONNECTING - The connection is currently being terminated\r\n              *  Status.ATTACHED - The connection has been attached\r\n              *  Status.CONNTIMEOUT - The connection has timed out\r\n              */\n      Status: {\n        ERROR: 0,\n        CONNECTING: 1,\n        CONNFAIL: 2,\n        AUTHENTICATING: 3,\n        AUTHFAIL: 4,\n        CONNECTED: 5,\n        DISCONNECTED: 6,\n        DISCONNECTING: 7,\n        ATTACHED: 8,\n        REDIRECT: 9,\n        CONNTIMEOUT: 10 },\n\n\n      /** Constants: Log Level Constants\r\n                            *  Logging level indicators.\r\n                            *\r\n                            *  LogLevel.DEBUG - Debug output\r\n                            *  LogLevel.INFO - Informational output\r\n                            *  LogLevel.WARN - Warnings\r\n                            *  LogLevel.ERROR - Errors\r\n                            *  LogLevel.FATAL - Fatal errors\r\n                            */\n      LogLevel: {\n        DEBUG: 0,\n        INFO: 1,\n        WARN: 2,\n        ERROR: 3,\n        FATAL: 4 },\n\n\n      /** PrivateConstants: DOM Element Type Constants\r\n                     *  DOM element types.\r\n                     *\r\n                     *  ElementType.NORMAL - Normal element.\r\n                     *  ElementType.TEXT - Text data element.\r\n                     *  ElementType.FRAGMENT - XHTML fragment element.\r\n                     */\n      ElementType: {\n        NORMAL: 1,\n        TEXT: 3,\n        CDATA: 4,\n        FRAGMENT: 11 },\n\n\n      /** PrivateConstants: Timeout Values\r\n                         *  Timeout values for error states.  These values are in seconds.\r\n                         *  These should not be changed unless you know exactly what you are\r\n                         *  doing.\r\n                         *\r\n                         *  TIMEOUT - Timeout multiplier. A waiting request will be considered\r\n                         *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\r\n                         *      This defaults to 1.1, and with default wait, 66 seconds.\r\n                         *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\r\n                         *      Strophe can detect early failure, it will consider the request\r\n                         *      failed if it doesn't return after\r\n                         *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\r\n                         *      This defaults to 0.1, and with default wait, 6 seconds.\r\n                         */\n      TIMEOUT: 1.1,\n      SECONDARY_TIMEOUT: 0.1,\n\n      /** Function: addNamespace\r\n                               *  This function is used to extend the current namespaces in\r\n                               *  Strophe.NS.  It takes a key and a value with the key being the\r\n                               *  name of the new namespace, with its actual value.\r\n                               *  For example:\r\n                               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\r\n                               *\r\n                               *  Parameters:\r\n                               *    (String) name - The name under which the namespace will be\r\n                               *      referenced under Strophe.NS\r\n                               *    (String) value - The actual namespace.\r\n                               */\n      addNamespace: function addNamespace(name, value) {\n        Strophe.NS[name] = value;\n      },\n\n      /** Function: forEachChild\r\n          *  Map a function over some or all child elements of a given element.\r\n          *\r\n          *  This is a small convenience function for mapping a function over\r\n          *  some or all of the children of an element.  If elemName is null, all\r\n          *  children will be passed to the function, otherwise only children\r\n          *  whose tag names match elemName will be passed.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The element to operate on.\r\n          *    (String) elemName - The child element tag name filter.\r\n          *    (Function) func - The function to apply to each child.  This\r\n          *      function should take a single argument, a DOM element.\r\n          */\n      forEachChild: function forEachChild(elem, elemName, func) {\n        var i, childNode;\n        for (i = 0; i < elem.childNodes.length; i++) {\n          childNode = elem.childNodes[i];\n          if (childNode.nodeType == Strophe.ElementType.NORMAL && (\n          !elemName || this.isTagEqual(childNode, elemName))) {\n            func(childNode);\n          }\n        }\n      },\n\n      /** Function: isTagEqual\r\n          *  Compare an element's tag name with a string.\r\n          *\r\n          *  This function is case sensitive.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) el - A DOM element.\r\n          *    (String) name - The element name.\r\n          *\r\n          *  Returns:\r\n          *    true if the element's tag name matches _el_, and false\r\n          *    otherwise.\r\n          */\n      isTagEqual: function isTagEqual(el, name) {\n        return el.tagName == name;\n      },\n\n      /** PrivateVariable: _xmlGenerator\r\n          *  _Private_ variable that caches a DOM document to\r\n          *  generate elements.\r\n          */\n      _xmlGenerator: null,\n\n      /** PrivateFunction: _makeGenerator\r\n                            *  _Private_ function that creates a dummy XML DOM document to serve as\r\n                            *  an element and text node generator.\r\n                            */\n      _makeGenerator: function _makeGenerator() {\n        var doc;\n        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n        // less than 10 in the case of IE9 and below.\n        if (document.implementation.createDocument === undefined ||\n        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n          doc = this._getIEXmlDom();\n          doc.appendChild(doc.createElement('strophe'));\n        } else {\n          doc = document.implementation.\n          createDocument('jabber:client', 'strophe', null);\n        }\n        return doc;\n      },\n\n      /** Function: xmlGenerator\r\n          *  Get the DOM document to generate elements.\r\n          *\r\n          *  Returns:\r\n          *    The currently used DOM document.\r\n          */\n      xmlGenerator: function xmlGenerator() {\n        if (!Strophe._xmlGenerator) {\n          Strophe._xmlGenerator = Strophe._makeGenerator();\n        }\n        return Strophe._xmlGenerator;\n      },\n\n      /** PrivateFunction: _getIEXmlDom\r\n          *  Gets IE xml doc object\r\n          *\r\n          *  Returns:\r\n          *    A Microsoft XML DOM Object\r\n          *  See Also:\r\n          *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\r\n          */\n      _getIEXmlDom: function _getIEXmlDom() {\n        var doc = null;\n        var docStrings = [\n        \"Msxml2.DOMDocument.6.0\",\n        \"Msxml2.DOMDocument.5.0\",\n        \"Msxml2.DOMDocument.4.0\",\n        \"MSXML2.DOMDocument.3.0\",\n        \"MSXML2.DOMDocument\",\n        \"MSXML.DOMDocument\",\n        \"Microsoft.XMLDOM\"];\n\n\n        for (var d = 0; d < docStrings.length; d++) {\n          if (doc === null) {\n            try {\n              doc = new ActiveXObject(docStrings[d]);\n            } catch (e) {\n              doc = null;\n            }\n          } else {\n            break;\n          }\n        }\n        return doc;\n      },\n\n      /** Function: xmlElement\r\n          *  Create an XML DOM element.\r\n          *\r\n          *  This function creates an XML DOM element correctly across all\r\n          *  implementations. Note that these are not HTML DOM elements, which\r\n          *  aren't appropriate for XMPP stanzas.\r\n          *\r\n          *  Parameters:\r\n          *    (String) name - The name for the element.\r\n          *    (Array|Object) attrs - An optional array or object containing\r\n          *      key/value pairs to use as element attributes. The object should\r\n          *      be in the format {'key': 'value'} or {key: 'value'}. The array\r\n          *      should have the format [['key1', 'value1'], ['key2', 'value2']].\r\n          *    (String) text - The text child data for the element.\r\n          *\r\n          *  Returns:\r\n          *    A new XML DOM element.\r\n          */\n      xmlElement: function xmlElement(name) {\n        if (!name) {\n          return null;\n        }\n\n        var node = Strophe.xmlGenerator().createElement(name);\n        // FIXME: this should throw errors if args are the wrong type or\n        // there are more than two optional args\n        var a, i, k;\n        for (a = 1; a < arguments.length; a++) {\n          var arg = arguments[a];\n          if (!arg) {\n            continue;\n          }\n          if (typeof arg == \"string\" ||\n          typeof arg == \"number\") {\n            node.appendChild(Strophe.xmlTextNode(arg));\n          } else if (typeof arg == \"object\" &&\n          typeof arg.sort == \"function\") {\n            for (i = 0; i < arg.length; i++) {\n              var attr = arg[i];\n              if (typeof attr == \"object\" &&\n              typeof attr.sort == \"function\" &&\n              attr[1] !== undefined &&\n              attr[1] !== null) {\n                node.setAttribute(attr[0], attr[1]);\n              }\n            }\n          } else if (typeof arg == \"object\") {\n            for (k in arg) {\n              if (arg.hasOwnProperty(k)) {\n                if (arg[k] !== undefined &&\n                arg[k] !== null) {\n                  node.setAttribute(k, arg[k]);\n                }\n              }\n            }\n          }\n        }\n\n        return node;\n      },\n\n      /*  Function: xmlescape\r\n          *  Excapes invalid xml characters.\r\n          *\r\n          *  Parameters:\r\n          *     (String) text - text to escape.\r\n          *\r\n          *  Returns:\r\n          *      Escaped text.\r\n          */\n      xmlescape: function xmlescape(text) {\n        text = text.replace(/\\&/g, \"&amp;\");\n        text = text.replace(/</g, \"&lt;\");\n        text = text.replace(/>/g, \"&gt;\");\n        text = text.replace(/'/g, \"&apos;\");\n        text = text.replace(/\"/g, \"&quot;\");\n        return text;\n      },\n\n      /*  Function: xmlunescape\r\n          *  Unexcapes invalid xml characters.\r\n          *\r\n          *  Parameters:\r\n          *     (String) text - text to unescape.\r\n          *\r\n          *  Returns:\r\n          *      Unescaped text.\r\n          */\n      xmlunescape: function xmlunescape(text) {\n        text = text.replace(/\\&amp;/g, \"&\");\n        text = text.replace(/&lt;/g, \"<\");\n        text = text.replace(/&gt;/g, \">\");\n        text = text.replace(/&apos;/g, \"'\");\n        text = text.replace(/&quot;/g, \"\\\"\");\n        return text;\n      },\n\n      /** Function: xmlTextNode\r\n          *  Creates an XML DOM text node.\r\n          *\r\n          *  Provides a cross implementation version of document.createTextNode.\r\n          *\r\n          *  Parameters:\r\n          *    (String) text - The content of the text node.\r\n          *\r\n          *  Returns:\r\n          *    A new XML DOM text node.\r\n          */\n      xmlTextNode: function xmlTextNode(text) {\n        return Strophe.xmlGenerator().createTextNode(text);\n      },\n\n      /** Function: xmlHtmlNode\r\n          *  Creates an XML DOM html node.\r\n          *\r\n          *  Parameters:\r\n          *    (String) html - The content of the html node.\r\n          *\r\n          *  Returns:\r\n          *    A new XML DOM text node.\r\n          */\n      xmlHtmlNode: function xmlHtmlNode(html) {\n        var node;\n        //ensure text is escaped\n        //console.log('xmlhtmlnode init', window.DOMParser, typeof window.DOMParser)\n        if (window.DOMParser) {\n          var parser = new DOMParser();\n          node = parser.parseFromString(html, \"text/xml\");\n        } else {\n          node = new ActiveXObject(\"Microsoft.XMLDOM\");\n          node.async = \"false\";\n          node.loadXML(html);\n        }\n        return node;\n      },\n\n      /** Function: getText\r\n          *  Get the concatenation of all text children of an element.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - A DOM element.\r\n          *\r\n          *  Returns:\r\n          *    A String with the concatenated text of all text element children.\r\n          */\n      getText: function getText(elem) {\n        if (!elem) {\n          return null;\n        }\n\n        var str = \"\";\n        if (elem.childNodes.length === 0 && elem.nodeType ==\n        Strophe.ElementType.TEXT) {\n          str += elem.nodeValue;\n        }\n\n        for (var i = 0; i < elem.childNodes.length; i++) {\n          if (elem.childNodes[i].nodeType == Strophe.ElementType.TEXT) {\n            str += elem.childNodes[i].nodeValue;\n          }\n        }\n\n        return Strophe.xmlescape(str);\n      },\n\n      /** Function: copyElement\r\n          *  Copy an XML DOM element.\r\n          *\r\n          *  This function copies a DOM element and all its descendants and returns\r\n          *  the new copy.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - A DOM element.\r\n          *\r\n          *  Returns:\r\n          *    A new, copied DOM element tree.\r\n          */\n      copyElement: function copyElement(elem) {\n        var i, el;\n        if (elem.nodeType == Strophe.ElementType.NORMAL) {\n          el = Strophe.xmlElement(elem.tagName);\n\n          for (i = 0; i < elem.attributes.length; i++) {\n            el.setAttribute(elem.attributes[i].nodeName,\n            elem.attributes[i].value);\n          }\n\n          for (i = 0; i < elem.childNodes.length; i++) {\n            el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n          }\n        } else if (elem.nodeType == Strophe.ElementType.TEXT) {\n          el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n        }\n        return el;\n      },\n\n\n      /** Function: createHtml\r\n          *  Copy an HTML DOM element into an XML DOM.\r\n          *\r\n          *  This function copies a DOM element and all its descendants and returns\r\n          *  the new copy.\r\n          *\r\n          *  Parameters:\r\n          *    (HTMLElement) elem - A DOM element.\r\n          *\r\n          *  Returns:\r\n          *    A new, copied DOM element tree.\r\n          */\n      createHtml: function createHtml(elem) {\n        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;\n        if (elem.nodeType == Strophe.ElementType.NORMAL) {\n          tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n          if (Strophe.XHTML.validTag(tag)) {\n            try {\n              el = Strophe.xmlElement(tag);\n              for (i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                attribute = Strophe.XHTML.attributes[tag][i];\n                value = elem.getAttribute(attribute);\n                if (typeof value == 'undefined' || value === null || value === '' || value === false || value === 0) {\n                  continue;\n                }\n                if (attribute == 'style' && typeof value == 'object') {\n                  if (typeof value.cssText != 'undefined') {\n                    value = value.cssText; // we're dealing with IE, need to get CSS out\n                  }\n                }\n                // filter out invalid css styles\n                if (attribute == 'style') {\n                  css = [];\n                  cssAttrs = value.split(';');\n                  for (j = 0; j < cssAttrs.length; j++) {\n                    attr = cssAttrs[j].split(':');\n                    cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n                    if (Strophe.XHTML.validCSS(cssName)) {\n                      cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                      css.push(cssName + ': ' + cssValue);\n                    }\n                  }\n                  if (css.length > 0) {\n                    value = css.join('; ');\n                    el.setAttribute(attribute, value);\n                  }\n                } else {\n                  el.setAttribute(attribute, value);\n                }\n              }\n\n              for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n              }\n            } catch (e) {// invalid elements\n              el = Strophe.xmlTextNode('');\n            }\n          } else {\n            el = Strophe.xmlGenerator().createDocumentFragment();\n            for (i = 0; i < elem.childNodes.length; i++) {\n              el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n            }\n          }\n        } else if (elem.nodeType == Strophe.ElementType.FRAGMENT) {\n          el = Strophe.xmlGenerator().createDocumentFragment();\n          for (i = 0; i < elem.childNodes.length; i++) {\n            el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n          }\n        } else if (elem.nodeType == Strophe.ElementType.TEXT) {\n          el = Strophe.xmlTextNode(elem.nodeValue);\n        }\n        return el;\n      },\n\n      /** Function: escapeNode\r\n          *  Escape the node part (also called local part) of a JID.\r\n          *\r\n          *  Parameters:\r\n          *    (String) node - A node (or local part).\r\n          *\r\n          *  Returns:\r\n          *    An escaped node (or local part).\r\n          */\n      escapeNode: function escapeNode(node) {\n        if (typeof node !== \"string\") {\n          return node;\n        }\n        return node.replace(/^\\s+|\\s+$/g, '').\n        replace(/\\\\/g, \"\\\\5c\").\n        replace(/ /g, \"\\\\20\").\n        replace(/\\\"/g, \"\\\\22\").\n        replace(/\\&/g, \"\\\\26\").\n        replace(/\\'/g, \"\\\\27\").\n        replace(/\\//g, \"\\\\2f\").\n        replace(/:/g, \"\\\\3a\").\n        replace(/</g, \"\\\\3c\").\n        replace(/>/g, \"\\\\3e\").\n        replace(/@/g, \"\\\\40\");\n      },\n\n      /** Function: unescapeNode\r\n          *  Unescape a node part (also called local part) of a JID.\r\n          *\r\n          *  Parameters:\r\n          *    (String) node - A node (or local part).\r\n          *\r\n          *  Returns:\r\n          *    An unescaped node (or local part).\r\n          */\n      unescapeNode: function unescapeNode(node) {\n        if (typeof node !== \"string\") {\n          return node;\n        }\n        return node.replace(/\\\\20/g, \" \").\n        replace(/\\\\22/g, '\"').\n        replace(/\\\\26/g, \"&\").\n        replace(/\\\\27/g, \"'\").\n        replace(/\\\\2f/g, \"/\").\n        replace(/\\\\3a/g, \":\").\n        replace(/\\\\3c/g, \"<\").\n        replace(/\\\\3e/g, \">\").\n        replace(/\\\\40/g, \"@\").\n        replace(/\\\\5c/g, \"\\\\\");\n      },\n\n      /** Function: getNodeFromJid\r\n          *  Get the node portion of a JID String.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - A JID.\r\n          *\r\n          *  Returns:\r\n          *    A String containing the node.\r\n          */\n      getNodeFromJid: function getNodeFromJid(jid) {\n        if (jid.indexOf(\"@\") < 0) {\n          return null;\n        }\n        return jid.split(\"@\")[0];\n      },\n\n      /** Function: getDomainFromJid\r\n          *  Get the domain portion of a JID String.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - A JID.\r\n          *\r\n          *  Returns:\r\n          *    A String containing the domain.\r\n          */\n      getDomainFromJid: function getDomainFromJid(jid) {\n        var bare = Strophe.getBareJidFromJid(jid);\n        if (bare.indexOf(\"@\") < 0) {\n          return bare;\n        } else {\n          var parts = bare.split(\"@\");\n          parts.splice(0, 1);\n          return parts.join('@');\n        }\n      },\n\n      /** Function: getResourceFromJid\r\n          *  Get the resource portion of a JID String.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - A JID.\r\n          *\r\n          *  Returns:\r\n          *    A String containing the resource.\r\n          */\n      getResourceFromJid: function getResourceFromJid(jid) {\n        var s = jid.split(\"/\");\n        if (s.length < 2) {\n          return null;\n        }\n        s.splice(0, 1);\n        return s.join('/');\n      },\n\n      /** Function: getBareJidFromJid\r\n          *  Get the bare JID from a JID String.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - A JID.\r\n          *\r\n          *  Returns:\r\n          *    A String containing the bare JID.\r\n          */\n      getBareJidFromJid: function getBareJidFromJid(jid) {\n        return jid ? jid.split(\"/\")[0] : null;\n      },\n\n      /** PrivateFunction: _handleError\r\n          *  _Private_ function that properly logs an error to the console\r\n          */\n      _handleError: function _handleError(e) {\n        if (typeof e.stack !== \"undefined\") {\n          Strophe.fatal(e.stack);\n        }\n        if (e.sourceURL) {\n          Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" +\n          e.line + \" - \" + e.name + \": \" + e.message);\n        } else if (e.fileName) {\n          Strophe.fatal(\"error: \" + this.handler + \" \" +\n          e.fileName + \":\" + e.lineNumber + \" - \" +\n          e.name + \": \" + e.message);\n        } else {\n          Strophe.fatal(\"error: \" + e.message);\n        }\n      },\n\n      /** Function: log\r\n          *  User overrideable logging function.\r\n          *\r\n          *  This function is called whenever the Strophe library calls any\r\n          *  of the logging functions.  The default implementation of this\r\n          *  function does nothing.  If client code wishes to handle the logging\r\n          *  messages, it should override this with\r\n          *  > Strophe.log = function (level, msg) {\r\n         *  >   (user code here)\r\n         *  > };\r\n          *\r\n          *  Please note that data sent and received over the wire is logged\r\n          *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\r\n          *\r\n          *  The different levels and their meanings are\r\n          *\r\n          *    DEBUG - Messages useful for debugging purposes.\r\n          *    INFO - Informational messages.  This is mostly information like\r\n          *      'disconnect was called' or 'SASL auth succeeded'.\r\n          *    WARN - Warnings about potential problems.  This is mostly used\r\n          *      to report transient connection errors like request timeouts.\r\n          *    ERROR - Some error occurred.\r\n          *    FATAL - A non-recoverable fatal error occurred.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) level - The log level of the log message.  This will\r\n          *      be one of the values in Strophe.LogLevel.\r\n          *    (String) msg - The log message.\r\n          */\n      /* jshint ignore:start */\n      log: function log(level, msg) {\n        //console.log('log', level, msg);\n\n        return;\n      },\n      /* jshint ignore:end */\n\n      /** Function: debug\r\n                               *  Log a message at the Strophe.LogLevel.DEBUG level.\r\n                               *\r\n                               *  Parameters:\r\n                               *    (String) msg - The log message.\r\n                               */\n      debug: function debug(msg) {\n        this.log(this.LogLevel.DEBUG, msg);\n      },\n\n      /** Function: info\r\n          *  Log a message at the Strophe.LogLevel.INFO level.\r\n          *\r\n          *  Parameters:\r\n          *    (String) msg - The log message.\r\n          */\n      info: function info(msg) {\n        this.log(this.LogLevel.INFO, msg);\n      },\n\n      /** Function: warn\r\n          *  Log a message at the Strophe.LogLevel.WARN level.\r\n          *\r\n          *  Parameters:\r\n          *    (String) msg - The log message.\r\n          */\n      warn: function warn(msg) {\n        this.log(this.LogLevel.WARN, msg);\n      },\n\n      /** Function: error\r\n          *  Log a message at the Strophe.LogLevel.ERROR level.\r\n          *\r\n          *  Parameters:\r\n          *    (String) msg - The log message.\r\n          */\n      error: function error(msg) {\n        this.log(this.LogLevel.ERROR, msg);\n      },\n\n      /** Function: fatal\r\n          *  Log a message at the Strophe.LogLevel.FATAL level.\r\n          *\r\n          *  Parameters:\r\n          *    (String) msg - The log message.\r\n          */\n      fatal: function fatal(msg) {\n        this.log(this.LogLevel.FATAL, msg);\n      },\n\n      /** Function: serialize\r\n          *  Render a DOM element and all descendants to a String.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - A DOM element.\r\n          *\r\n          *  Returns:\r\n          *    The serialized element tree as a String.\r\n          */\n      serialize: function serialize(elem) {\n        var result;\n\n        if (!elem) {\n          return null;\n        }\n\n        if (typeof elem.tree === \"function\") {\n          elem = elem.tree();\n        }\n\n        var nodeName = elem.nodeName;\n        var i, child;\n\n        if (elem.getAttribute(\"_realname\")) {\n          nodeName = elem.getAttribute(\"_realname\");\n        }\n\n        result = \"<\" + nodeName;\n        for (i = 0; i < elem.attributes.length; i++) {\n          if (elem.attributes[i].nodeName != \"_realname\") {\n            result += \" \" + elem.attributes[i].nodeName +\n            \"='\" + Strophe.xmlescape(elem.attributes[i].value) + \"'\";\n          }\n        }\n\n        if (elem.childNodes.length > 0) {\n          result += \">\";\n          for (i = 0; i < elem.childNodes.length; i++) {\n            child = elem.childNodes[i];\n            switch (child.nodeType) {\n              case Strophe.ElementType.NORMAL:\n                // normal element, so recurse\n                result += Strophe.serialize(child);\n                break;\n              case Strophe.ElementType.TEXT:\n                // text element to escape values\n                result += Strophe.xmlescape(child.nodeValue);\n                break;\n              case Strophe.ElementType.CDATA:\n                // cdata section so don't escape values\n                result += \"<![CDATA[\" + child.nodeValue + \"]]>\";}\n\n          }\n          result += \"</\" + nodeName + \">\";\n        } else {\n          result += \"/>\";\n        }\n\n        return result;\n      },\n\n      /** PrivateVariable: _requestId\r\n          *  _Private_ variable that keeps track of the request ids for\r\n          *  connections.\r\n          */\n      _requestId: 0,\n\n      /** PrivateVariable: Strophe.connectionPlugins\r\n                      *  _Private_ variable Used to store plugin names that need\r\n                      *  initialization on Strophe.Connection construction.\r\n                      */\n      _connectionPlugins: {},\n\n      /** Function: addConnectionPlugin\r\n                               *  Extends the Strophe.Connection object with the given plugin.\r\n                               *\r\n                               *  Parameters:\r\n                               *    (String) name - The name of the extension.\r\n                               *    (Object) ptype - The plugin's prototype.\r\n                               */\n      addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n        Strophe._connectionPlugins[name] = ptype;\n      } };\n\n\n    /** Class: Strophe.Builder\r\n            *  XML DOM builder.\r\n            *\r\n            *  This object provides an interface similar to JQuery but for building\r\n            *  DOM elements easily and rapidly.  All the functions except for toString()\r\n            *  and tree() return the object, so calls can be chained.  Here's an\r\n            *  example using the $iq() builder helper.\r\n            *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\r\n            *  >     .c('query', {xmlns: 'strophe:example'})\r\n            *  >     .c('example')\r\n            *  >     .toString()\r\n            *\r\n            *  The above generates this XML fragment\r\n            *  > <iq to='you' from='me' type='get' id='1'>\r\n            *  >   <query xmlns='strophe:example'>\r\n            *  >     <example/>\r\n            *  >   </query>\r\n            *  > </iq>\r\n            *  The corresponding DOM manipulations to get a similar fragment would be\r\n            *  a lot more tedious and probably involve several helper variables.\r\n            *\r\n            *  Since adding children makes new operations operate on the child, up()\r\n            *  is provided to traverse up the tree.  To add two children, do\r\n            *  > builder.c('child1', ...).up().c('child2', ...)\r\n            *  The next operation on the Builder will be relative to the second child.\r\n            */\n\n    /** Constructor: Strophe.Builder\r\n                *  Create a Strophe.Builder object.\r\n                *\r\n                *  The attributes should be passed in object notation.  For example\r\n                *  > var b = new Builder('message', {to: 'you', from: 'me'});\r\n                *  or\r\n                *  > var b = new Builder('messsage', {'xml:lang': 'en'});\r\n                *\r\n                *  Parameters:\r\n                *    (String) name - The name of the root element.\r\n                *    (Object) attrs - The attributes for the root element in object notation.\r\n                *\r\n                *  Returns:\r\n                *    A new Strophe.Builder.\r\n                */\n    Strophe.Builder = function (name, attrs) {\n      // Set correct namespace for jabber:client elements\n      if (name == \"presence\" || name == \"message\" || name == \"iq\") {\n        if (attrs && !attrs.xmlns) {\n          attrs.xmlns = Strophe.NS.CLIENT;\n        } else if (!attrs) {\n          attrs = { xmlns: Strophe.NS.CLIENT };\n        }\n      }\n\n      // Holds the tree being built.\n      this.nodeTree = Strophe.xmlElement(name, attrs);\n\n      // Points to the current operation node.\n      this.node = this.nodeTree;\n    };\n\n    Strophe.Builder.prototype = {\n      /** Function: tree\r\n                                   *  Return the DOM tree.\r\n                                   *\r\n                                   *  This function returns the current DOM tree as an element object.  This\r\n                                   *  is suitable for passing to functions like Strophe.Connection.send().\r\n                                   *\r\n                                   *  Returns:\r\n                                   *    The DOM tree as a element object.\r\n                                   */\n      tree: function tree() {\n        return this.nodeTree;\n      },\n\n      /** Function: toString\r\n          *  Serialize the DOM tree to a String.\r\n          *\r\n          *  This function returns a string serialization of the current DOM\r\n          *  tree.  It is often used internally to pass data to a\r\n          *  Strophe.Request object.\r\n          *\r\n          *  Returns:\r\n          *    The serialized DOM tree in a String.\r\n          */\n      toString: function toString() {\n        return Strophe.serialize(this.nodeTree);\n      },\n\n      /** Function: up\r\n          *  Make the current parent element the new current element.\r\n          *\r\n          *  This function is often used after c() to traverse back up the tree.\r\n          *  For example, to add two children to the same element\r\n          *  > builder.c('child1', {}).up().c('child2', {});\r\n          *\r\n          *  Returns:\r\n          *    The Stophe.Builder object.\r\n          */\n      up: function up() {\n        this.node = this.node.parentNode;\n        return this;\n      },\n\n      /** Function: root\r\n          *  Make the root element the new current element.\r\n          *\r\n          *  When at a deeply nested element in the tree, this function can be used\r\n          *  to jump back to the root of the tree, instead of having to repeatedly\r\n          *  call up().\r\n          *\r\n          *  Returns:\r\n          *    The Stophe.Builder object.\r\n          */\n      root: function root() {\n        this.node = this.nodeTree;\n        return this;\n      },\n\n      /** Function: attrs\r\n          *  Add or modify attributes of the current element.\r\n          *\r\n          *  The attributes should be passed in object notation.  This function\r\n          *  does not move the current element pointer.\r\n          *\r\n          *  Parameters:\r\n          *    (Object) moreattrs - The attributes to add/modify in object notation.\r\n          *\r\n          *  Returns:\r\n          *    The Strophe.Builder object.\r\n          */\n      attrs: function attrs(moreattrs) {\n        for (var k in moreattrs) {\n          if (moreattrs.hasOwnProperty(k)) {\n            if (moreattrs[k] === undefined) {\n              this.node.removeAttribute(k);\n            } else {\n              this.node.setAttribute(k, moreattrs[k]);\n            }\n          }\n        }\n        return this;\n      },\n\n      /** Function: c\r\n          *  Add a child to the current element and make it the new current\r\n          *  element.\r\n          *\r\n          *  This function moves the current element pointer to the child,\r\n          *  unless text is provided.  If you need to add another child, it\r\n          *  is necessary to use up() to go back to the parent in the tree.\r\n          *\r\n          *  Parameters:\r\n          *    (String) name - The name of the child.\r\n          *    (Object) attrs - The attributes of the child in object notation.\r\n          *    (String) text - The text to add to the child.\r\n          *\r\n          *  Returns:\r\n          *    The Strophe.Builder object.\r\n          */\n      c: function c(name, attrs, text) {\n        var child = Strophe.xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== \"string\" && typeof text !== \"number\") {\n          this.node = child;\n        }\n        return this;\n      },\n\n      /** Function: cnode\r\n          *  Add a child to the current element and make it the new current\r\n          *  element.\r\n          *\r\n          *  This function is the same as c() except that instead of using a\r\n          *  name and an attributes object to create the child it uses an\r\n          *  existing DOM element object.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - A DOM element.\r\n          *\r\n          *  Returns:\r\n          *    The Strophe.Builder object.\r\n          */\n      cnode: function cnode(elem) {\n        var impNode;\n        var xmlGen = Strophe.xmlGenerator();\n        try {\n          impNode = xmlGen.importNode !== undefined;\n        } catch (e) {\n          impNode = false;\n        }\n        var newElem = impNode ?\n        xmlGen.importNode(elem, true) :\n        Strophe.copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = newElem;\n        return this;\n      },\n\n      /** Function: t\r\n          *  Add a child text element.\r\n          *\r\n          *  This *does not* make the child the new current element since there\r\n          *  are no children of text elements.\r\n          *\r\n          *  Parameters:\r\n          *    (String) text - The text data to append to the current element.\r\n          *\r\n          *  Returns:\r\n          *    The Strophe.Builder object.\r\n          */\n      t: function t(text) {\n        var child = Strophe.xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n      },\n\n      /** Function: h\r\n          *  Replace current element contents with the HTML passed in.\r\n          *\r\n          *  This *does not* make the child the new current element\r\n          *\r\n          *  Parameters:\r\n          *    (String) html - The html to insert as contents of current element.\r\n          *\r\n          *  Returns:\r\n          *    The Strophe.Builder object.\r\n          */\n      h: function h(html) {\n        var fragment = document.createElement('body');\n\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n\n        // copy cleaned html into an xml dom\n        var xhtml = Strophe.createHtml(fragment);\n\n        while (xhtml.childNodes.length > 0) {\n          this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n      } };\n\n\n    /** PrivateClass: Strophe.Handler\r\n            *  _Private_ helper class for managing stanza handlers.\r\n            *\r\n            *  A Strophe.Handler encapsulates a user provided callback function to be\r\n            *  executed when matching stanzas are received by the connection.\r\n            *  Handlers can be either one-off or persistant depending on their\r\n            *  return value. Returning true will cause a Handler to remain active, and\r\n            *  returning false will remove the Handler.\r\n            *\r\n            *  Users will not use Strophe.Handler objects directly, but instead they\r\n            *  will use Strophe.Connection.addHandler() and\r\n            *  Strophe.Connection.deleteHandler().\r\n            */\n\n    /** PrivateConstructor: Strophe.Handler\r\n                *  Create and initialize a new Strophe.Handler.\r\n                *\r\n                *  Parameters:\r\n                *    (Function) handler - A function to be executed when the handler is run.\r\n                *    (String) ns - The namespace to match.\r\n                *    (String) name - The element name to match.\r\n                *    (String) type - The element type to match.\r\n                *    (String) id - The element id attribute to match.\r\n                *    (String) from - The element from attribute to match.\r\n                *    (Object) options - Handler options\r\n                *\r\n                *  Returns:\r\n                *    A new Strophe.Handler object.\r\n                */\n    Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n      this.handler = handler;\n      this.ns = ns;\n      this.name = name;\n      this.type = type;\n      this.id = id;\n      this.options = options || { 'matchBareFromJid': false, 'ignoreNamespaceFragment': false };\n      // BBB: Maintain backward compatibility with old `matchBare` option\n      if (this.options.matchBare) {\n        Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n        this.options.matchBareFromJid = this.options.matchBare;\n        delete this.options.matchBare;\n      }\n\n      if (this.options.matchBareFromJid) {\n        this.from = from ? Strophe.getBareJidFromJid(from) : null;\n      } else {\n        this.from = from;\n      }\n      // whether the handler is a user handler or a system handler\n      this.user = true;\n    };\n\n    Strophe.Handler.prototype = {\n      /** PrivateFunction: getNamespace\r\n                                   *  Returns the XML namespace attribute on an element.\r\n                                   *  If `ignoreNamespaceFragment` was passed in for this handler, then the\r\n                                   *  URL fragment will be stripped.\r\n                                   *\r\n                                   *  Parameters:\r\n                                   *    (XMLElement) elem - The XML element with the namespace.\r\n                                   *\r\n                                   *  Returns:\r\n                                   *    The namespace, with optionally the fragment stripped.\r\n                                   */\n      getNamespace: function getNamespace(elem) {\n        var elNamespace = elem.getAttribute(\"xmlns\");\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n          elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n      },\n\n      /** PrivateFunction: namespaceMatch\r\n          *  Tests if a stanza matches the namespace set for this Strophe.Handler.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The XML element to test.\r\n          *\r\n          *  Returns:\r\n          *    true if the stanza matches and false otherwise.\r\n          */\n      namespaceMatch: function namespaceMatch(elem) {\n        var nsMatch = false;\n        if (!this.ns) {\n          return true;\n        } else {\n          var that = this;\n          Strophe.forEachChild(elem, null, function (elem) {\n            if (that.getNamespace(elem) === that.ns) {\n              nsMatch = true;\n            }\n          });\n          nsMatch = nsMatch || this.getNamespace(elem) === this.ns;\n        }\n        return nsMatch;\n      },\n\n      /** PrivateFunction: isMatch\r\n          *  Tests if a stanza matches the Strophe.Handler.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The XML element to test.\r\n          *\r\n          *  Returns:\r\n          *    true if the stanza matches and false otherwise.\r\n          */\n      isMatch: function isMatch(elem) {\n        var from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n          from = Strophe.getBareJidFromJid(from);\n        }\n        var elem_type = elem.getAttribute(\"type\");\n        if (this.namespaceMatch(elem) && (\n        !this.name || Strophe.isTagEqual(elem, this.name)) && (\n        !this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) != -1 : elem_type == this.type)) && (\n        !this.id || elem.getAttribute(\"id\") == this.id) && (\n        !this.from || from == this.from)) {\n          return true;\n        }\n        return false;\n      },\n\n      /** PrivateFunction: run\r\n          *  Run the callback on a matching stanza.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The DOM element that triggered the\r\n          *      Strophe.Handler.\r\n          *\r\n          *  Returns:\r\n          *    A boolean indicating if the handler should remain active.\r\n          */\n      run: function run(elem) {\n        var result = null;\n        try {\n          result = this.handler(elem);\n        } catch (e) {\n          Strophe._handleError(e);\n          throw e;\n        }\n        return result;\n      },\n\n      /** PrivateFunction: toString\r\n          *  Get a String representation of the Strophe.Handler object.\r\n          *\r\n          *  Returns:\r\n          *    A String.\r\n          */\n      toString: function toString() {\n        return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" +\n        this.id + \",\" + this.ns + \")}\";\n      } };\n\n\n    /** PrivateClass: Strophe.TimedHandler\r\n            *  _Private_ helper class for managing timed handlers.\r\n            *\r\n            *  A Strophe.TimedHandler encapsulates a user provided callback that\r\n            *  should be called after a certain period of time or at regular\r\n            *  intervals.  The return value of the callback determines whether the\r\n            *  Strophe.TimedHandler will continue to fire.\r\n            *\r\n            *  Users will not use Strophe.TimedHandler objects directly, but instead\r\n            *  they will use Strophe.Connection.addTimedHandler() and\r\n            *  Strophe.Connection.deleteTimedHandler().\r\n            */\n\n    /** PrivateConstructor: Strophe.TimedHandler\r\n                *  Create and initialize a new Strophe.TimedHandler object.\r\n                *\r\n                *  Parameters:\r\n                *    (Integer) period - The number of milliseconds to wait before the\r\n                *      handler is called.\r\n                *    (Function) handler - The callback to run when the handler fires.  This\r\n                *      function should take no arguments.\r\n                *\r\n                *  Returns:\r\n                *    A new Strophe.TimedHandler object.\r\n                */\n    Strophe.TimedHandler = function (period, handler) {\n      this.period = period;\n      this.handler = handler;\n      this.lastCalled = new Date().getTime();\n      this.user = true;\n    };\n\n    Strophe.TimedHandler.prototype = {\n      /** PrivateFunction: run\r\n                                        *  Run the callback for the Strophe.TimedHandler.\r\n                                        *\r\n                                        *  Returns:\r\n                                        *    true if the Strophe.TimedHandler should be called again, and false\r\n                                        *      otherwise.\r\n                                        */\n      run: function run() {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n      },\n\n      /** PrivateFunction: reset\r\n          *  Reset the last called time for the Strophe.TimedHandler.\r\n          */\n      reset: function reset() {\n        this.lastCalled = new Date().getTime();\n      },\n\n      /** PrivateFunction: toString\r\n          *  Get a string representation of the Strophe.TimedHandler object.\r\n          *\r\n          *  Returns:\r\n          *    The string representation.\r\n          */\n      toString: function toString() {\n        return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n      } };\n\n\n    /** Class: Strophe.Connection\r\n            *  XMPP Connection manager.\r\n            *\r\n            *  This class is the main part of Strophe.  It manages a BOSH or websocket\r\n            *  connection to an XMPP server and dispatches events to the user callbacks\r\n            *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\r\n            *  and legacy authentication.\r\n            *\r\n            *  After creating a Strophe.Connection object, the user will typically\r\n            *  call connect() with a user supplied callback to handle connection level\r\n            *  events like authentication failure, disconnection, or connection\r\n            *  complete.\r\n            *\r\n            *  The user will also have several event handlers defined by using\r\n            *  addHandler() and addTimedHandler().  These will allow the user code to\r\n            *  respond to interesting stanzas or do something periodically with the\r\n            *  connection. These handlers will be active once authentication is\r\n            *  finished.\r\n            *\r\n            *  To send data to the connection, use send().\r\n            */\n\n    /** Constructor: Strophe.Connection\r\n                *  Create and initialize a Strophe.Connection object.\r\n                *\r\n                *  The transport-protocol for this connection will be chosen automatically\r\n                *  based on the given service parameter. URLs starting with \"ws://\" or\r\n                *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\r\n                *  or without a protocol will use BOSH.\r\n                *\r\n                *  To make Strophe connect to the current host you can leave out the protocol\r\n                *  and host part and just pass the path, e.g.\r\n                *\r\n                *  > var conn = new Strophe.Connection(\"/http-bind/\");\r\n                *\r\n                *  Options common to both Websocket and BOSH:\r\n                *  ------------------------------------------\r\n                *\r\n                *  cookies\r\n                *  ~~~~~~~\r\n                *\r\n                *  The \"cookies\" option allows you to pass in cookies to be added to the\r\n                *  document. These cookies will then be included in the BOSH XMLHttpRequest\r\n                *  or in the websocket connection.\r\n                *\r\n                *  The passed in value must be a map of cookie names and string values:\r\n                *\r\n                *  > { \"myCookie\": {\r\n               *  >     \"value\": \"1234\",\r\n               *  >     \"domain\": \".example.org\",\r\n               *  >     \"path\": \"/\",\r\n               *  >     \"expires\": expirationDate\r\n               *  >     }\r\n               *  > }\r\n                *\r\n                *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\r\n                *  Those cookies need to be set under those domains, for example they can be\r\n                *  set server-side by making a XHR call to that domain to ask it to set any\r\n                *  necessary cookies.\r\n                *\r\n                *  mechanisms\r\n                *  ~~~~~~~~~~\r\n                *\r\n                *  The \"mechanisms\" option allows you to specify the SASL mechanisms that this\r\n                *  instance of Strophe.Connection (and therefore your XMPP client) will\r\n                *  support.\r\n                *\r\n                *  The value must be an array of objects with Strophe.SASLMechanism\r\n                *  prototypes.\r\n                *\r\n                *  If nothing is specified, then the following mechanisms (and their\r\n                *  priorities) are registered:\r\n                *\r\n                *      EXTERNAL - 60\r\n                *      OAUTHBEARER - 50\r\n                *      SCRAM-SHA1 - 40\r\n                *      DIGEST-MD5 - 30\r\n                *      PLAIN - 20\r\n                *      ANONYMOUS - 10\r\n                *\r\n                *  WebSocket options:\r\n                *  ------------------\r\n                *\r\n                *  If you want to connect to the current host with a WebSocket connection you\r\n                *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\r\n                *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\r\n                *  for Secure WebSocket.\r\n                *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\r\n                *\r\n                *  > var conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\r\n                *\r\n                *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\r\n                *  of the current site.\r\n                *\r\n                *  Also because downgrading security is not permitted by browsers, when using\r\n                *  relative URLs both BOSH and WebSocket connections will use their secure\r\n                *  variants if the current connection to the site is also secure (https).\r\n                *\r\n                *  BOSH options:\r\n                *  -------------\r\n                *\r\n                *  By adding \"sync\" to the options, you can control if requests will\r\n                *  be made synchronously or not. The default behaviour is asynchronous.\r\n                *  If you want to make requests synchronous, make \"sync\" evaluate to true:\r\n                *  > var conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\r\n                *\r\n                *  You can also toggle this on an already established connection:\r\n                *  > conn.options.sync = true;\r\n                *\r\n                *  The \"customHeaders\" option can be used to provide custom HTTP headers to be\r\n                *  included in the XMLHttpRequests made.\r\n                *\r\n                *  The \"keepalive\" option can be used to instruct Strophe to maintain the\r\n                *  current BOSH session across interruptions such as webpage reloads.\r\n                *\r\n                *  It will do this by caching the sessions tokens in sessionStorage, and when\r\n                *  \"restore\" is called it will check whether there are cached tokens with\r\n                *  which it can resume an existing session.\r\n                *\r\n                *  The \"withCredentials\" option should receive a Boolean value and is used to\r\n                *  indicate wether cookies should be included in ajax requests (by default\r\n                *  they're not).\r\n                *  Set this value to true if you are connecting to a BOSH service\r\n                *  and for some reason need to send cookies to it.\r\n                *  In order for this to work cross-domain, the server must also enable\r\n                *  credentials by setting the Access-Control-Allow-Credentials response header\r\n                *  to \"true\". For most usecases however this setting should be false (which\r\n                *  is the default).\r\n                *  Additionally, when using Access-Control-Allow-Credentials, the\r\n                *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\r\n                *  instead must be restricted to actual domains.\r\n                *\r\n                *  The \"contentType\" option can be set to change the default Content-Type\r\n                *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\r\n                *  CORS preflight requests that are sent to the server.\r\n                *\r\n                *  Parameters:\r\n                *    (String) service - The BOSH or WebSocket service URL.\r\n                *    (Object) options - A hash of configuration options\r\n                *\r\n                *  Returns:\r\n                *    A new Strophe.Connection object.\r\n                */\n    Strophe.Connection = function (service, options) {\n      // The service URL\n      this.service = service;\n      // Configuration options\n      this.options = options || {};\n      var proto = this.options.protocol || \"\";\n\n      // Select protocal based on service or options\n      if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 ||\n      proto.indexOf(\"ws\") === 0) {\n        this._proto = new Strophe.Websocket(this);\n      } else {\n        this._proto = new Strophe.Bosh(this);\n      }\n\n      /* The connected JID. */\n      this.jid = \"\";\n      /* the JIDs domain */\n      this.domain = null;\n      /* stream:features */\n      this.features = null;\n\n      // SASL\n      this._sasl_data = {};\n      this.do_session = false;\n      this.do_bind = false;\n\n      // handler lists\n      this.timedHandlers = [];\n      this.handlers = [];\n      this.removeTimeds = [];\n      this.removeHandlers = [];\n      this.addTimeds = [];\n      this.addHandlers = [];\n      this.protocolErrorHandlers = {\n        'HTTP': {},\n        'websocket': {} };\n\n\n      this._idleTimeout = null;\n      this._disconnectTimeout = null;\n\n      this.authenticated = false;\n      this.connected = false;\n      this.disconnecting = false;\n      this.do_authentication = true;\n      this.paused = false;\n      this.restored = false;\n\n      this._data = [];\n      this._uniqueId = 0;\n\n      this._sasl_success_handler = null;\n      this._sasl_failure_handler = null;\n      this._sasl_challenge_handler = null;\n\n      // Max retries before disconnecting\n      this.maxRetries = 5;\n\n      // Call onIdle callback every 1/10th of a second\n      // XXX: setTimeout should be called only with function expressions (23974bc1)\n      this._idleTimeout = setTimeout(function () {\n        this._onIdle();\n      }.bind(this), 100);\n\n      utils.addCookies(this.options.cookies);\n      this.registerSASLMechanisms(this.options.mechanisms);\n\n      // initialize plugins\n      for (var k in Strophe._connectionPlugins) {\n        if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n          var ptype = Strophe._connectionPlugins[k];\n          // jslint complaints about the below line, but this is fine\n          var F = function F() {\n          }; // jshint ignore:line\n          F.prototype = ptype;\n          this[k] = new F();\n          this[k].init(this);\n        }\n      }\n    };\n\n    Strophe.Connection.prototype = {\n      /** Function: reset\r\n                                      *  Reset the connection.\r\n                                      *\r\n                                      *  This function should be called after a connection is disconnected\r\n                                      *  before that connection is reused.\r\n                                      */\n      reset: function reset() {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        this._data = [];\n        this._requests = [];\n        this._uniqueId = 0;\n      },\n\n      /** Function: pause\r\n          *  Pause the request manager.\r\n          *\r\n          *  This will prevent Strophe from sending any more requests to the\r\n          *  server.  This is very useful for temporarily pausing\r\n          *  BOSH-Connections while a lot of send() calls are happening quickly.\r\n          *  This causes Strophe to send the data in a single request, saving\r\n          *  many request trips.\r\n          */\n      pause: function pause() {\n        this.paused = true;\n      },\n\n      /** Function: resume\r\n          *  Resume the request manager.\r\n          *\r\n          *  This resumes after pause() has been called.\r\n          */\n      resume: function resume() {\n        this.paused = false;\n      },\n\n      /** Function: getUniqueId\r\n          *  Generate a unique ID for use in <iq/> elements.\r\n          *\r\n          *  All <iq/> stanzas are required to have unique id attributes.  This\r\n          *  function makes creating these easy.  Each connection instance has\r\n          *  a counter which starts from zero, and the value of this counter\r\n          *  plus a colon followed by the suffix becomes the unique id. If no\r\n          *  suffix is supplied, the counter is used as the unique id.\r\n          *\r\n          *  Suffixes are used to make debugging easier when reading the stream\r\n          *  data, and their use is recommended.  The counter resets to 0 for\r\n          *  every new connection for the same reason.  For connections to the\r\n          *  same server that authenticate the same way, all the ids should be\r\n          *  the same, which makes it easy to see changes.  This is useful for\r\n          *  automated testing as well.\r\n          *\r\n          *  Parameters:\r\n          *    (String) suffix - A optional suffix to append to the id.\r\n          *\r\n          *  Returns:\r\n          *    A unique string to be used for the id attribute.\r\n          */\n      getUniqueId: function getUniqueId(suffix) {\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n          return v.toString(16);\n        });\n        if (typeof suffix == \"string\" || typeof suffix == \"number\") {\n          return uuid + \":\" + suffix;\n        } else {\n          return uuid + \"\";\n        }\n      },\n\n      /** Function: addProtocolErrorHandler\r\n          *  Register a handler function for when a protocol (websocker or HTTP)\r\n          *  error occurs.\r\n          *\r\n          *  NOTE: Currently only HTTP errors for BOSH requests are handled.\r\n          *  Patches that handle websocket errors would be very welcome.\r\n          *\r\n          *  Parameters:\r\n          *    (String) protocol - 'HTTP' or 'websocket'\r\n          *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\r\n          *    (Function) callback - Function that will fire on Http error\r\n          *\r\n          *  Example:\r\n          *  function onError(err_code){\r\n         *    //do stuff\r\n         *  }\r\n          *\r\n          *  var conn = Strophe.connect('http://example.com/http-bind');\r\n          *  conn.addProtocolErrorHandler('HTTP', 500, onError);\r\n          *  // Triggers HTTP 500 error and onError handler will be called\r\n          *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\r\n          */\n      addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n      },\n\n\n      /** Function: connect\r\n          *  Starts the connection process.\r\n          *\r\n          *  As the connection process proceeds, the user supplied callback will\r\n          *  be triggered multiple times with status updates.  The callback\r\n          *  should take two arguments - the status code and the error condition.\r\n          *\r\n          *  The status code will be one of the values in the Strophe.Status\r\n          *  constants.  The error condition will be one of the conditions\r\n          *  defined in RFC 3920 or the condition 'strophe-parsererror'.\r\n          *\r\n          *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\r\n          *  for BOSH connections. Please see XEP 124 for a more detailed explanation\r\n          *  of the optional parameters.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - The user's JID.  This may be a bare JID,\r\n          *      or a full JID.  If a node is not supplied, SASL ANONYMOUS\r\n          *      authentication will be attempted.\r\n          *    (String) pass - The user's password.\r\n          *    (Function) callback - The connect callback function.\r\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n          *      time the server will wait before returning an empty result for\r\n          *      a request.  The default setting of 60 seconds is recommended.\r\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n          *      number of connections the server will hold at one time.  This\r\n          *      should almost always be set to 1 (the default).\r\n          *    (String) route - The optional route value.\r\n          *    (String) authcid - The optional alternative authentication identity\r\n          *      (username) if intending to impersonate another user.\r\n          *      When using the SASL-EXTERNAL authentication mechanism, for example\r\n          *      with client certificates, then the authcid value is used to\r\n          *      determine whether an authorization JID (authzid) should be sent to\r\n          *      the server. The authzid should not be sent to the server if the\r\n          *      authzid and authcid are the same. So to prevent it from being sent\r\n          *      (for example when the JID is already contained in the client\r\n          *      certificate), set authcid to that same JID. See XEP-178 for more\r\n          *      details.\r\n          */\n      connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n        this.jid = jid;\n        /** Variable: authzid\r\n                         *  Authorization identity.\r\n                         */\n        this.authzid = Strophe.getBareJidFromJid(this.jid);\n\n        /** Variable: authcid\r\n                                                             *  Authentication identity (User name).\r\n                                                             */\n        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n\n        /** Variable: pass\r\n                                                                     *  Authentication identity (User password).\r\n                                                                     */\n        this.pass = pass;\n\n        /** Variable: servtype\r\n                           *  Digest MD5 compatibility.\r\n                           */\n        this.servtype = \"xmpp\";\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n\n        // parse jid for domain\n        this.domain = Strophe.getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n      },\n\n      /** Function: attach\r\n          *  Attach to an already created and authenticated BOSH session.\r\n          *\r\n          *  This function is provided to allow Strophe to attach to BOSH\r\n          *  sessions which have been created externally, perhaps by a Web\r\n          *  application.  This is often used to support auto-login type features\r\n          *  without putting user credentials into the page.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - The full JID that is bound by the session.\r\n          *    (String) sid - The SID of the BOSH session.\r\n          *    (String) rid - The current RID of the BOSH session.  This RID\r\n          *      will be used by the next request.\r\n          *    (Function) callback The connect callback function.\r\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n          *      time the server will wait before returning an empty result for\r\n          *      a request.  The default setting of 60 seconds is recommended.\r\n          *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n          *      number of connections the server will hold at one time.  This\r\n          *      should almost always be set to 1 (the default).\r\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n          *      allowed range of request ids that are valid.  The default is 5.\r\n          */\n      attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Strophe.Bosh) {\n          this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else {\n          throw {\n            name: 'StropheSessionError',\n            message: 'The \"attach\" method can only be used with a BOSH connection.' };\n\n        }\n      },\n\n      /** Function: restore\r\n          *  Attempt to restore a cached BOSH session.\r\n          *\r\n          *  This function is only useful in conjunction with providing the\r\n          *  \"keepalive\":true option when instantiating a new Strophe.Connection.\r\n          *\r\n          *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\r\n          *  RID (Request ID) and SID (Session ID) and then when this function is\r\n          *  called, it will attempt to restore the session from those cached\r\n          *  tokens.\r\n          *\r\n          *  This function must therefore be called instead of connect or attach.\r\n          *\r\n          *  For an example on how to use it, please see examples/restore.js\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\r\n          *    (Function) callback - The connect callback function.\r\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n          *      time the server will wait before returning an empty result for\r\n          *      a request.  The default setting of 60 seconds is recommended.\r\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n          *      number of connections the server will hold at one time.  This\r\n          *      should almost always be set to 1 (the default).\r\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n          *      allowed range of request ids that are valid.  The default is 5.\r\n          */\n      restore: function restore(jid, callback, wait, hold, wind) {\n        if (this._sessionCachingSupported()) {\n          this._proto._restore(jid, callback, wait, hold, wind);\n        } else {\n          throw {\n            name: 'StropheSessionError',\n            message: 'The \"restore\" method can only be used with a BOSH connection.' };\n\n        }\n      },\n\n      /** PrivateFunction: _sessionCachingSupported\r\n          * Checks whether sessionStorage and JSON are supported and whether we're\r\n          * using BOSH.\r\n          */\n      _sessionCachingSupported: function _sessionCachingSupported() {\n        if (this._proto instanceof Strophe.Bosh) {\n          if (!JSON) {\n            return false;\n          }\n          try {\n            window.sessionStorage.setItem('_strophe_', '_strophe_');\n            window.sessionStorage.removeItem('_strophe_');\n          } catch (e) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      },\n\n      /** Function: xmlInput\r\n          *  User overrideable function that receives XML data coming into the\r\n          *  connection.\r\n          *\r\n          *  The default function does nothing.  User code can override this with\r\n          *  > Strophe.Connection.xmlInput = function (elem) {\r\n         *  >   (user code)\r\n         *  > };\r\n          *\r\n          *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n          *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n          *\r\n          *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n          *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The XML data received by the connection.\r\n          */\n      /* jshint unused:false */\n      xmlInput: function xmlInput(elem) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: xmlOutput\r\n                                *  User overrideable function that receives XML data sent to the\r\n                                *  connection.\r\n                                *\r\n                                *  The default function does nothing.  User code can override this with\r\n                                *  > Strophe.Connection.xmlOutput = function (elem) {\r\n                               *  >   (user code)\r\n                               *  > };\r\n                                *\r\n                                *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n                                *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n                                *\r\n                                *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n                                *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n                                *\r\n                                *  Parameters:\r\n                                *    (XMLElement) elem - The XMLdata sent by the connection.\r\n                                */\n      /* jshint unused:false */\n      xmlOutput: function xmlOutput(elem) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: rawInput\r\n                                *  User overrideable function that receives raw data coming into the\r\n                                *  connection.\r\n                                *\r\n                                *  The default function does nothing.  User code can override this with\r\n                                *  > Strophe.Connection.rawInput = function (data) {\r\n                               *  >   (user code)\r\n                               *  > };\r\n                                *\r\n                                *  Parameters:\r\n                                *    (String) data - The data received by the connection.\r\n                                */\n      /* jshint unused:false */\n      rawInput: function rawInput(data) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: rawOutput\r\n                                *  User overrideable function that receives raw data sent to the\r\n                                *  connection.\r\n                                *\r\n                                *  The default function does nothing.  User code can override this with\r\n                                *  > Strophe.Connection.rawOutput = function (data) {\r\n                               *  >   (user code)\r\n                               *  > };\r\n                                *\r\n                                *  Parameters:\r\n                                *    (String) data - The data sent by the connection.\r\n                                */\n      /* jshint unused:false */\n      rawOutput: function rawOutput(data) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: nextValidRid\r\n                                *  User overrideable function that receives the new valid rid.\r\n                                *\r\n                                *  The default function does nothing. User code can override this with\r\n                                *  > Strophe.Connection.nextValidRid = function (rid) {\r\n                               *  >    (user code)\r\n                               *  > };\r\n                                *\r\n                                *  Parameters:\r\n                                *    (Number) rid - The next valid rid\r\n                                */\n      /* jshint unused:false */\n      nextValidRid: function nextValidRid(rid) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: send\r\n                                *  Send a stanza.\r\n                                *\r\n                                *  This function is called to push data onto the send queue to\r\n                                *  go out over the wire.  Whenever a request is sent to the BOSH\r\n                                *  server, all pending data is sent and the queue is flushed.\r\n                                *\r\n                                *  Parameters:\r\n                                *    (XMLElement |\r\n                                *     [XMLElement] |\r\n                                *     Strophe.Builder) elem - The stanza to send.\r\n                                */\n      send: function send(elem, fail) {\n        // console.log(elem)\n        if (elem === null) {\n          return;\n        }\n        if (typeof elem.sort === \"function\") {\n          for (var i = 0; i < elem.length; i++) {\n            this._queueData(elem[i]);\n          }\n        } else if (typeof elem.tree === \"function\") {\n          this._queueData(elem.tree());\n        } else {\n          this._queueData(elem);\n        }\n        this._proto._send(fail);\n      },\n\n      /** Function: flush\r\n          *  Immediately send any pending outgoing data.\r\n          *\r\n          *  Normally send() queues outgoing data until the next idle period\r\n          *  (100ms), which optimizes network use in the common cases when\r\n          *  several send()s are called in succession. flush() can be used to\r\n          *  immediately send all pending data.\r\n          */\n      flush: function flush(fail) {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle(fail);\n      },\n\n      /** Function: sendIQ\r\n          *  Helper function to send IQ stanzas.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The stanza to send.\r\n          *    (Function) callback - The callback function for a successful request.\r\n          *    (Function) errback - The callback function for a failed or timed\r\n          *      out request.  On timeout, the stanza will be null.\r\n          *    (Integer) timeout - The time specified in milliseconds for a\r\n          *      timeout to occur.\r\n          *\r\n          *  Returns:\r\n          *    The id used to send the IQ.\r\n          */\n      sendIQ: function sendIQ(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n\n        if (typeof elem.tree === \"function\") {\n          elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n\n        // inject id if not found\n        if (!id) {\n          id = this.getUniqueId(\"sendIQ\");\n          elem.setAttribute(\"id\", id);\n        }\n\n        var expectedFrom = elem.getAttribute(\"to\");\n        var fulljid = this.jid;\n\n        var handler = this.addHandler(function (stanza) {\n          // remove timeout handler if there is one\n          if (timeoutHandler) {\n            that.deleteTimedHandler(timeoutHandler);\n          }\n\n          var acceptable = false;\n          var from = stanza.getAttribute(\"from\");\n          if (from === expectedFrom ||\n          !expectedFrom && (\n          from === Strophe.getBareJidFromJid(fulljid) ||\n          from === Strophe.getDomainFromJid(fulljid) ||\n          from === fulljid)) {\n            acceptable = true;\n          }\n\n          if (!acceptable) {\n            throw {\n              name: \"StropheError\",\n              message: \"Got answer to IQ from wrong jid:\" + from +\n              \"\\nExpected jid: \" + expectedFrom };\n\n          }\n\n          var iqtype = stanza.getAttribute('type');\n          if (iqtype == 'result') {\n            if (callback) {\n              callback(stanza);\n            }\n          } else if (iqtype == 'error') {\n            if (errback) {\n              errback(stanza);\n            }\n          } else {\n            throw {\n              name: \"StropheError\",\n              message: \"Got bad IQ type of \" + iqtype };\n\n          }\n        }, null, 'iq', ['error', 'result'], id);\n\n        // if timeout specified, setup timeout handler.\n        if (timeout) {\n          timeoutHandler = this.addTimedHandler(timeout, function () {\n            // get rid of normal handler\n            that.deleteHandler(handler);\n            // call errback on timeout with null stanza\n            if (errback) {\n              errback(null);\n            }\n            return false;\n          });\n        }\n        this.send(elem);\n        return id;\n      },\n\n      /** PrivateFunction: _queueData\r\n          *  Queue outgoing data for later sending.  Also ensures that the data\r\n          *  is a DOMElement.\r\n          */\n      _queueData: function _queueData(element) {\n        if (element === null || !element.tagName || !element.childNodes) {\n          throw {\n            name: \"StropheError\",\n            message: \"Cannot queue non-DOMElement.\" };\n\n        }\n        this._data.push(element);\n      },\n\n      /** PrivateFunction: _sendRestart\r\n          *  Send an xmpp:restart stanza.\r\n          */\n      _sendRestart: function _sendRestart() {\n        this._data.push(\"restart\");\n        this._proto._sendRestart();\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._idleTimeout = setTimeout(function () {\n          this._onIdle();\n        }.bind(this), 100);\n      },\n\n      /** Function: addTimedHandler\r\n          *  Add a timed handler to the connection.\r\n          *\r\n          *  This function adds a timed handler.  The provided handler will\r\n          *  be called every period milliseconds until it returns false,\r\n          *  the connection is terminated, or the handler is removed.  Handlers\r\n          *  that wish to continue being invoked should return true.\r\n          *\r\n          *  Because of method binding it is necessary to save the result of\r\n          *  this function if you wish to remove a handler with\r\n          *  deleteTimedHandler().\r\n          *\r\n          *  Note that user handlers are not active until authentication is\r\n          *  successful.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) period - The period of the handler.\r\n          *    (Function) handler - The callback function.\r\n          *\r\n          *  Returns:\r\n          *    A reference to the handler that can be used to remove it.\r\n          */\n      addTimedHandler: function addTimedHandler(period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n      },\n\n      /** Function: deleteTimedHandler\r\n          *  Delete a timed handler for a connection.\r\n          *\r\n          *  This function removes a timed handler from the connection.  The\r\n          *  handRef parameter is *not* the function passed to addTimedHandler(),\r\n          *  but is the reference returned from addTimedHandler().\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.TimedHandler) handRef - The handler reference.\r\n          */\n      deleteTimedHandler: function deleteTimedHandler(handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n      },\n\n      /** Function: addHandler\r\n          *  Add a stanza handler for the connection.\r\n          *\r\n          *  This function adds a stanza handler to the connection.  The\r\n          *  handler callback will be called for any stanza that matches\r\n          *  the parameters.  Note that if multiple parameters are supplied,\r\n          *  they must all match for the handler to be invoked.\r\n          *\r\n          *  The handler will receive the stanza that triggered it as its argument.\r\n          *  *The handler should return true if it is to be invoked again;\r\n          *  returning false will remove the handler after it returns.*\r\n          *\r\n          *  As a convenience, the ns parameters applies to the top level element\r\n          *  and also any of its immediate children.  This is primarily to make\r\n          *  matching /iq/query elements easy.\r\n          *\r\n          *  Options\r\n          *  ~~~~~~~\r\n          *  With the options argument, you can specify boolean flags that affect how\r\n          *  matches are being done.\r\n          *\r\n          *  Currently two flags exist:\r\n          *\r\n          *  - matchBareFromJid:\r\n          *      When set to true, the from parameter and the\r\n          *      from attribute on the stanza will be matched as bare JIDs instead\r\n          *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\r\n          *      value of options. The default value for matchBareFromJid is false.\r\n          *\r\n          *  - ignoreNamespaceFragment:\r\n          *      When set to true, a fragment specified on the stanza's namespace\r\n          *      URL will be ignored when it's matched with the one configured for\r\n          *      the handler.\r\n          *\r\n          *      This means that if you register like this:\r\n          *      >   connection.addHandler(\r\n          *      >       handler,\r\n          *      >       'http://jabber.org/protocol/muc',\r\n          *      >       null, null, null, null,\r\n          *      >       {'ignoreNamespaceFragment': true}\r\n          *      >   );\r\n          *\r\n          *      Then a stanza with XML namespace of\r\n          *      'http://jabber.org/protocol/muc#user' will also be matched. If\r\n          *      'ignoreNamespaceFragment' is false, then only stanzas with\r\n          *      'http://jabber.org/protocol/muc' will be matched.\r\n          *\r\n          *  Deleting the handler\r\n          *  ~~~~~~~~~~~~~~~~~~~~\r\n          *  The return value should be saved if you wish to remove the handler\r\n          *  with deleteHandler().\r\n          *\r\n          *  Parameters:\r\n          *    (Function) handler - The user callback.\r\n          *    (String) ns - The namespace to match.\r\n          *    (String) name - The stanza name to match.\r\n          *    (String|Array) type - The stanza type (or types if an array) to match.\r\n          *    (String) id - The stanza id attribute to match.\r\n          *    (String) from - The stanza from attribute to match.\r\n          *    (String) options - The handler options\r\n          *\r\n          *  Returns:\r\n          *    A reference to the handler that can be used to remove it.\r\n          */\n      addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n      },\n\n      /** Function: deleteHandler\r\n          *  Delete a stanza handler for a connection.\r\n          *\r\n          *  This function removes a stanza handler from the connection.  The\r\n          *  handRef parameter is *not* the function passed to addHandler(),\r\n          *  but is the reference returned from addHandler().\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Handler) handRef - The handler reference.\r\n          */\n      deleteHandler: function deleteHandler(handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        var i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n          this.addHandlers.splice(i, 1);\n        }\n      },\n\n      /** Function: registerSASLMechanisms\r\n          *\r\n          * Register the SASL mechanisms which will be supported by this instance of\r\n          * Strophe.Connection (i.e. which this XMPP client will support).\r\n          *\r\n          *  Parameters:\r\n          *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\r\n          *\r\n          */\n      registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n        this.mechanisms = {};\n        mechanisms = mechanisms || [\n        Strophe.SASLAnonymous,\n        Strophe.SASLExternal,\n        Strophe.SASLMD5,\n        Strophe.SASLOAuthBearer,\n        Strophe.SASLPlain,\n        Strophe.SASLSHA1];\n\n        mechanisms.forEach(this.registerSASLMechanism.bind(this));\n      },\n\n      /** Function: registerSASLMechanism\r\n          *\r\n          * Register a single SASL mechanism, to be supported by this client.\r\n          *\r\n          *  Parameters:\r\n          *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\r\n          *\r\n          */\n      registerSASLMechanism: function registerSASLMechanism(mechanism) {\n        this.mechanisms[mechanism.prototype.name] = mechanism;\n      },\n\n      /** Function: disconnect\r\n          *  Start the graceful disconnection process.\r\n          *\r\n          *  This function starts the disconnection process.  This process starts\r\n          *  by sending unavailable presence and sending BOSH body of type\r\n          *  terminate.  A timeout handler makes sure that disconnection happens\r\n          *  even if the BOSH server does not respond.\r\n          *  If the Connection object isn't connected, at least tries to abort all pending requests\r\n          *  so the connection object won't generate successful requests (which were already opened).\r\n          *\r\n          *  The user supplied connection callback will be notified of the\r\n          *  progress as this process happens.\r\n          *\r\n          *  Parameters:\r\n          *    (String) reason - The reason the disconnect is occuring.\r\n          */\n      disconnect: function disconnect(reason) {\n        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n        Strophe.info(\"Disconnect was called because: \" + reason);\n        if (this.connected) {\n          var pres = false;\n          this.disconnecting = true;\n          if (this.authenticated) {\n            pres = $pres({\n              xmlns: Strophe.NS.CLIENT,\n              type: 'unavailable' });\n\n          }\n          // setup timeout handler\n          this._disconnectTimeout = this._addSysTimedHandler(\n          3000, this._onDisconnectTimeout.bind(this));\n          this._proto._disconnect(pres);\n        } else {\n          Strophe.info(\"Disconnect was called before Strophe connected to the server\");\n          this._proto._abortAllRequests();\n        }\n      },\n\n      /** PrivateFunction: _changeConnectStatus\r\n          *  _Private_ helper function that makes sure plugins and the user's\r\n          *  callback are notified of connection status changes.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) status - the new connection status, one of the values\r\n          *      in Strophe.Status\r\n          *    (String) condition - the error condition or null\r\n          */\n      _changeConnectStatus: function _changeConnectStatus(status, condition) {\n        // notify all plugins listening for status changes\n        for (var k in Strophe._connectionPlugins) {\n          if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n            var plugin = this[k];\n            if (plugin.statusChanged) {\n              try {\n                plugin.statusChanged(status, condition);\n              } catch (err) {\n                Strophe.error(\"\" + k + \" plugin caused an exception \" +\n                \"changing status: \" + err);\n              }\n            }\n          }\n        }\n\n        // notify the user's callback\n        if (this.connect_callback) {\n          try {\n            this.connect_callback(status, condition);\n          } catch (e) {\n            Strophe._handleError(e);\n            Strophe.error(\n            \"User connection callback caused an \" + \"exception: \" + e);\n          }\n        }\n      },\n\n      /** PrivateFunction: _doDisconnect\r\n          *  _Private_ function to disconnect.\r\n          *\r\n          *  This is the last piece of the disconnection logic.  This resets the\r\n          *  connection and alerts the user's connection callback.\r\n          */\n      _doDisconnect: function _doDisconnect(condition) {\n        //console.log('_doDisconnect 14', condition)\n        if (typeof this._idleTimeout == \"number\") {\n          clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n          this.deleteTimedHandler(this._disconnectTimeout);\n          this._disconnectTimeout = null;\n        }\n\n        Strophe.info(\"_doDisconnect was called\");\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n        this.connected = false;\n      },\n\n      /** PrivateFunction: _dataRecv\r\n          *  _Private_ handler to processes incoming data from the the connection.\r\n          *\r\n          *  Except for _connect_cb handling the initial connection request,\r\n          *  this function handles the incoming data for all requests.  This\r\n          *  function also fires stanza handlers that match each incoming\r\n          *  stanza.\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Request) req - The request that has data ready.\r\n          *    (string) req - The stanza a raw string (optiona).\r\n          */\n      _dataRecv: function _dataRecv(req, raw) {\n        Strophe.info(\"_dataRecv called\");\n        var elem = this._proto._reqToData(req);\n        if (elem === null) {\n          return;\n        }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n          if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n            this.xmlInput(elem.childNodes[0]);\n          } else {\n            this.xmlInput(elem);\n          }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n          if (raw) {\n            this.rawInput(raw);\n          } else {\n            this.rawInput(Strophe.serialize(elem));\n          }\n        }\n\n        // remove handlers scheduled for deletion\n        var i, hand;\n        while (this.removeHandlers.length > 0) {\n          hand = this.removeHandlers.pop();\n          i = this.handlers.indexOf(hand);\n          if (i >= 0) {\n            this.handlers.splice(i, 1);\n          }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n          this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n          //console.log('_doDisconnect 1')\n          this._doDisconnect();\n          return;\n        }\n\n        var type = elem.getAttribute(\"type\");\n        var cond, conflict;\n        if (type !== null && type == \"terminate\") {\n          // Don't process stanzas that come in after disconnect\n          if (this.disconnecting) {\n            return;\n          }\n\n          // an error occurred\n          cond = elem.getAttribute(\"condition\");\n          conflict = elem.getElementsByTagName(\"conflict\");\n          if (cond !== null) {\n            if (cond == \"remote-stream-error\" && conflict.length > 0) {\n              cond = \"conflict\";\n            }\n            this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n          } else {\n            this._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n          }\n          this._doDisconnect(cond);\n          return;\n        }\n\n        // send each incoming stanza through the handler chain\n        var that = this;\n        Strophe.forEachChild(elem, null, function (child) {\n          var i, newList;\n          // process handlers\n          newList = that.handlers;\n          that.handlers = [];\n          for (i = 0; i < newList.length; i++) {\n            var hand = newList[i];\n            // encapsulate 'handler.run' not to lose the whole handler list if\n            // one of the handlers throws an exception\n            try {\n              if (hand.isMatch(child) && (\n              that.authenticated || !hand.user)) {\n                if (hand.run(child)) {\n                  that.handlers.push(hand);\n                }\n              } else {\n                that.handlers.push(hand);\n              }\n            } catch (e) {\n              // if the handler throws an exception, we consider it as false\n              Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n            }\n          }\n        });\n      },\n\n\n      /** Attribute: mechanisms\r\n          *  SASL Mechanisms available for Connection.\r\n          */\n      mechanisms: {},\n\n      /** PrivateFunction: _connect_cb\r\n                       *  _Private_ handler for initial connection request.\r\n                       *\r\n                       *  This handler is used to process the initial connection request\r\n                       *  response from the BOSH server. It is used to set up authentication\r\n                       *  handlers and start the authentication process.\r\n                       *\r\n                       *  SASL authentication will be attempted if available, otherwise\r\n                       *  the code will fall back to legacy authentication.\r\n                       *\r\n                       *  Parameters:\r\n                       *    (Strophe.Request) req - The current request.\r\n                       *    (Function) _callback - low level (xmpp) connect callback function.\r\n                       *      Useful for plugins with their own xmpp connect callback (when their)\r\n                       *      want to do something special).\r\n                       */\n      _connect_cb: function _connect_cb(req, _callback, raw) {\n        Strophe.info(\"_connect_cb was called\");\n        this.connected = true;\n\n        var bodyWrap;\n        try {\n          bodyWrap = this._proto._reqToData(req);\n        } catch (e) {\n          if (e != \"badformat\") {\n            throw e;\n          }\n          this._changeConnectStatus(Strophe.Status.CONNFAIL, 'bad-format');\n          this._doDisconnect('bad-format');\n        }\n        if (!bodyWrap) {\n          return;\n        }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n          if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n            this.xmlInput(bodyWrap.childNodes[0]);\n          } else {\n            this.xmlInput(bodyWrap);\n          }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n          if (raw) {\n            this.rawInput(raw);\n          } else {\n            this.rawInput(Strophe.serialize(bodyWrap));\n          }\n        }\n\n        var conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Strophe.Status.CONNFAIL) {\n          return;\n        }\n\n        // Check for the stream:features tag\n        var hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n          hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n        } else {\n          hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 ||\n          bodyWrap.getElementsByTagName(\"features\").length > 0;\n        }\n\n        //console.log('hasFeatures', hasFeatures, bodyWrap, _callback)\n        if (!hasFeatures) {\n          try {\n            this._proto._no_auth_received(_callback);\n          } catch (e) {\n          }\n\n          return;\n        }\n\n        var matched = [],i,mech;\n        var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n        if (mechanisms.length > 0) {\n          for (i = 0; i < mechanisms.length; i++) {\n            mech = Strophe.getText(mechanisms[i]);\n            if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n          }\n        }\n\n        //console.log('matched', matched, bodyWrap)\n        if (matched.length === 0) {\n          if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n            // There are no matching SASL mechanisms and also no legacy\n            // auth available.\n            this._proto._no_auth_received(_callback);\n            return;\n          }\n        }\n        if (this.do_authentication !== false) {\n          this.authenticate(matched);\n        }\n      },\n\n      /** Function: sortMechanismsByPriority\r\n          *\r\n          *  Sorts an array of objects with prototype SASLMechanism according to\r\n          *  their priorities.\r\n          *\r\n          *  Parameters:\r\n          *    (Array) mechanisms - Array of SASL mechanisms.\r\n          *\r\n          */\n      sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n        // Sorting mechanisms according to priority.\n        var i, j, higher, swap;\n        for (i = 0; i < mechanisms.length - 1; ++i) {\n          higher = i;\n          for (j = i + 1; j < mechanisms.length; ++j) {\n            if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n              higher = j;\n            }\n          }\n          if (higher != i) {\n            swap = mechanisms[i];\n            mechanisms[i] = mechanisms[higher];\n            mechanisms[higher] = swap;\n          }\n        }\n        return mechanisms;\n      },\n\n      /** PrivateFunction: _attemptSASLAuth\r\n          *\r\n          *  Iterate through an array of SASL mechanisms and attempt authentication\r\n          *  with the highest priority (enabled) mechanism.\r\n          *\r\n          *  Parameters:\r\n          *    (Array) mechanisms - Array of SASL mechanisms.\r\n          *\r\n          *  Returns:\r\n          *    (Boolean) mechanism_found - true or false, depending on whether a\r\n          *          valid SASL mechanism was found with which authentication could be\r\n          *          started.\r\n          */\n      _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        var i = 0,mechanism_found = false;\n        for (i = 0; i < mechanisms.length; ++i) {\n          if (!mechanisms[i].prototype.test(this)) {\n            continue;\n          }\n          this._sasl_success_handler = this._addSysHandler(\n          this._sasl_success_cb.bind(this), null,\n          \"success\", null, null);\n          this._sasl_failure_handler = this._addSysHandler(\n          this._sasl_failure_cb.bind(this), null,\n          \"failure\", null, null);\n          this._sasl_challenge_handler = this._addSysHandler(\n          this._sasl_challenge_cb.bind(this), null,\n          \"challenge\", null, null);\n\n          this._sasl_mechanism = new mechanisms[i]();\n          this._sasl_mechanism.onStart(this);\n\n          var request_auth_exchange = $build(\"auth\", {\n            xmlns: Strophe.NS.SASL,\n            mechanism: this._sasl_mechanism.name });\n\n          if (this._sasl_mechanism.isClientFirst) {\n            var response = this._sasl_mechanism.onChallenge(this, null);\n            request_auth_exchange.t(Base64.encode(response));\n          }\n          this.send(request_auth_exchange.tree());\n          mechanism_found = true;\n          break;\n        }\n        return mechanism_found;\n      },\n\n      /** PrivateFunction: _attemptLegacyAuth\r\n          *\r\n          *  Attempt legacy (i.e. non-SASL) authentication.\r\n          *\r\n          */\n      _attemptLegacyAuth: function _attemptLegacyAuth() {\n        if (Strophe.getNodeFromJid(this.jid) === null) {\n          // we don't have a node, which is required for non-anonymous\n          // client connections\n          this._changeConnectStatus(\n          Strophe.Status.CONNFAIL,\n          'x-strophe-bad-non-anon-jid');\n\n          this.disconnect('x-strophe-bad-non-anon-jid');\n        } else {\n          // Fall back to legacy authentication\n          this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n          this._addSysHandler(\n          this._auth1_cb.bind(this),\n          null, null, null, \"_auth_1\");\n\n          this.send($iq({\n            'type': \"get\",\n            'to': this.domain,\n            'id': \"_auth_1\" }).\n          c(\"query\", { xmlns: Strophe.NS.AUTH }).\n          c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).\n          tree());\n        }\n      },\n\n      /** Function: authenticate\r\n          * Set up authentication\r\n          *\r\n          *  Continues the initial connection request by setting up authentication\r\n          *  handlers and starting the authentication process.\r\n          *\r\n          *  SASL authentication will be attempted if available, otherwise\r\n          *  the code will fall back to legacy authentication.\r\n          *\r\n          *  Parameters:\r\n          *    (Array) matched - Array of SASL mechanisms supported.\r\n          *\r\n          */\n      authenticate: function authenticate(matched) {\n        //console.log('authenticate');\n        if (!this._attemptSASLAuth(matched)) {\n          this._attemptLegacyAuth();\n        }\n      },\n\n      /** PrivateFunction: _sasl_challenge_cb\r\n          *  _Private_ handler for the SASL challenge\r\n          *\r\n          */\n      _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n        var challenge = Base64.decode(Strophe.getText(elem));\n        var response = this._sasl_mechanism.onChallenge(this, challenge);\n        var stanza = $build('response', {\n          'xmlns': Strophe.NS.SASL });\n\n        if (response !== \"\") {\n          stanza.t(Base64.encode(response));\n        }\n        this.send(stanza.tree());\n        return true;\n      },\n\n      /** PrivateFunction: _auth1_cb\r\n          *  _Private_ handler for legacy authentication.\r\n          *\r\n          *  This handler is called in response to the initial <iq type='get'/>\r\n          *  for legacy authentication.  It builds an authentication <iq/> and\r\n          *  sends it, creating a handler (calling back to _auth2_cb()) to\r\n          *  handle the result\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The stanza that triggered the callback.\r\n          *\r\n          *  Returns:\r\n          *    false to remove the handler.\r\n          */\n      /* jshint unused:false */\n      _auth1_cb: function _auth1_cb(elem) {\n        // build plaintext auth iq\n        var iq = $iq({ type: \"set\", id: \"_auth_2\" }).\n        c('query', { xmlns: Strophe.NS.AUTH }).\n        c('username', {}).t(Strophe.getNodeFromJid(this.jid)).\n        up().\n        c('password').t(this.pass);\n\n        if (!Strophe.getResourceFromJid(this.jid)) {\n          // since the user has not supplied a resource, we pick\n          // a default one here.  unlike other auth methods, the server\n          // cannot do this for us.\n          this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null,\n        null, null, \"_auth_2\");\n        this.send(iq.tree());\n        return false;\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: _sasl_success_cb\r\n                                *  _Private_ handler for succesful SASL authentication.\r\n                                *\r\n                                *  Parameters:\r\n                                *    (XMLElement) elem - The matching stanza.\r\n                                *\r\n                                *  Returns:\r\n                                *    false to remove the handler.\r\n                                */\n      _sasl_success_cb: function _sasl_success_cb(elem) {\n        //console.log('_sasl_success_cb', elem)\n        if (this._sasl_data[\"server-signature\"]) {\n          var serverSignature;\n          var success = Base64.decode(Strophe.getText(elem));\n          var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n          var matches = success.match(attribMatch);\n          if (matches[1] == \"v\") {\n            serverSignature = matches[2];\n          }\n\n          if (serverSignature != this._sasl_data[\"server-signature\"]) {\n            // remove old handlers\n            this.deleteHandler(this._sasl_failure_handler);\n            this._sasl_failure_handler = null;\n            if (this._sasl_challenge_handler) {\n              this.deleteHandler(this._sasl_challenge_handler);\n              this._sasl_challenge_handler = null;\n            }\n\n            this._sasl_data = {};\n            return this._sasl_failure_cb(null);\n          }\n        }\n        Strophe.info(\"SASL authentication succeeded.\");\n\n        if (this._sasl_mechanism) {\n          this._sasl_mechanism.onSuccess();\n        }\n\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n          this.deleteHandler(this._sasl_challenge_handler);\n          this._sasl_challenge_handler = null;\n        }\n\n        var streamfeature_handlers = [];\n        var wrapper = function wrapper(handlers, elem) {\n          while (handlers.length) {\n            this.deleteHandler(handlers.pop());\n          }\n          this._sasl_auth1_cb.bind(this)(elem);\n          return false;\n        };\n        streamfeature_handlers.push(this._addSysHandler(function (elem) {\n          wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), null, \"stream:features\", null, null));\n        streamfeature_handlers.push(this._addSysHandler(function (elem) {\n          wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), Strophe.NS.STREAM, \"features\", null, null));\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n\n        return false;\n      },\n\n      /** PrivateFunction: _sasl_auth1_cb\r\n          *  _Private_ handler to start stream binding.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The matching stanza.\r\n          *\r\n          *  Returns:\r\n          *    false to remove the handler.\r\n          */\n      _sasl_auth1_cb: function _sasl_auth1_cb(elem) {\n        //console.log('_sasl_auth1_cb', elem)\n\n        // save stream:features for future usage\n        this.features = elem;\n        var i, child;\n        for (i = 0; i < elem.childNodes.length; i++) {\n          child = elem.childNodes[i];\n          if (child.nodeName == 'bind') {\n            this.do_bind = true;\n          }\n\n          if (child.nodeName == 'session') {\n            this.do_session = true;\n          }\n        }\n\n        if (!this.do_bind) {\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          return false;\n        } else {\n          this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n          null, \"_bind_auth_2\");\n\n          var resource = Strophe.getResourceFromJid(this.jid);\n          if (resource) {\n            this.send($iq({ type: \"set\", id: \"_bind_auth_2\" }).\n            c('bind', { xmlns: Strophe.NS.BIND }).\n            c('resource', {}).t(resource).tree());\n          } else {\n            this.send($iq({ type: \"set\", id: \"_bind_auth_2\" }).\n            c('bind', { xmlns: Strophe.NS.BIND }).\n            tree());\n          }\n        }\n        return false;\n      },\n\n      /** PrivateFunction: _sasl_bind_cb\r\n          *  _Private_ handler for binding result and session start.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The matching stanza.\r\n          *\r\n          *  Returns:\r\n          *    false to remove the handler.\r\n          */\n      _sasl_bind_cb: function _sasl_bind_cb(elem) {\n        //console.log('_sasl_bind_cb', elem)\n\n        if (elem.getAttribute(\"type\") == \"error\") {\n          Strophe.info(\"SASL binding failed.\");\n          var conflict = elem.getElementsByTagName(\"conflict\"),condition;\n          if (conflict.length > 0) {\n            condition = 'conflict';\n          }\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition);\n          return false;\n        }\n\n        // TODO - need to grab errors\n        var bind = elem.getElementsByTagName(\"bind\");\n        var jidNode;\n        if (bind.length > 0) {\n          // Grab jid\n          jidNode = bind[0].getElementsByTagName(\"jid\");\n          if (jidNode.length > 0) {\n            this.jid = Strophe.getText(jidNode[0]);\n\n            if (this.do_session) {\n              this._addSysHandler(this._sasl_session_cb.bind(this),\n              null, null, null, \"_session_auth_2\");\n\n              this.send($iq({ type: \"set\", id: \"_session_auth_2\" }).\n              c('session', { xmlns: Strophe.NS.SESSION }).\n              tree());\n            } else {\n              this.authenticated = true;\n              this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n            }\n          }\n        } else {\n          Strophe.info(\"SASL binding failed.\");\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          return false;\n        }\n      },\n\n      /** PrivateFunction: _sasl_session_cb\r\n          *  _Private_ handler to finish successful SASL connection.\r\n          *\r\n          *  This sets Connection.authenticated to true on success, which\r\n          *  starts the processing of user handlers.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The matching stanza.\r\n          *\r\n          *  Returns:\r\n          *    false to remove the handler.\r\n          */\n      _sasl_session_cb: function _sasl_session_cb(elem) {\n        if (elem.getAttribute(\"type\") == \"result\") {\n          this.authenticated = true;\n          this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") == \"error\") {\n          Strophe.info(\"Session creation failed.\");\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          return false;\n        }\n        return false;\n      },\n\n      /** PrivateFunction: _sasl_failure_cb\r\n          *  _Private_ handler for SASL authentication failure.\r\n          *\r\n          *  Parameters:\r\n          *    (XMLElement) elem - The matching stanza.\r\n          *\r\n          *  Returns:\r\n          *    false to remove the handler.\r\n          */\n      /* jshint unused:false */\n      _sasl_failure_cb: function _sasl_failure_cb(elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n          this.deleteHandler(this._sasl_success_handler);\n          this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n          this.deleteHandler(this._sasl_challenge_handler);\n          this._sasl_challenge_handler = null;\n        }\n\n        if (this._sasl_mechanism)\n        this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n        return false;\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: _auth2_cb\r\n                                *  _Private_ handler to finish legacy authentication.\r\n                                *\r\n                                *  This handler is called when the result from the jabber:iq:auth\r\n                                *  <iq/> stanza is returned.\r\n                                *\r\n                                *  Parameters:\r\n                                *    (XMLElement) elem - The stanza that triggered the callback.\r\n                                *\r\n                                *  Returns:\r\n                                *    false to remove the handler.\r\n                                */\n      _auth2_cb: function _auth2_cb(elem) {\n        if (elem.getAttribute(\"type\") == \"result\") {\n          this.authenticated = true;\n          this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") == \"error\") {\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          this.disconnect('authentication failed');\n        }\n        return false;\n      },\n\n      /** PrivateFunction: _addSysTimedHandler\r\n          *  _Private_ function to add a system level timed handler.\r\n          *\r\n          *  This function is used to add a Strophe.TimedHandler for the\r\n          *  library code.  System timed handlers are allowed to run before\r\n          *  authentication is complete.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) period - The period of the handler.\r\n          *    (Function) handler - The callback function.\r\n          */\n      _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n      },\n\n      /** PrivateFunction: _addSysHandler\r\n          *  _Private_ function to add a system level stanza handler.\r\n          *\r\n          *  This function is used to add a Strophe.Handler for the\r\n          *  library code.  System stanza handlers are allowed to run before\r\n          *  authentication is complete.\r\n          *\r\n          *  Parameters:\r\n          *    (Function) handler - The callback function.\r\n          *    (String) ns - The namespace to match.\r\n          *    (String) name - The stanza name to match.\r\n          *    (String) type - The stanza type attribute to match.\r\n          *    (String) id - The stanza id attribute to match.\r\n          */\n      _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n      },\n\n      /** PrivateFunction: _onDisconnectTimeout\r\n          *  _Private_ timeout handler for handling non-graceful disconnection.\r\n          *\r\n          *  If the graceful disconnect process does not complete within the\r\n          *  time allotted, this handler finishes the disconnect anyway.\r\n          *\r\n          *  Returns:\r\n          *    false to remove the handler.\r\n          */\n      _onDisconnectTimeout: function _onDisconnectTimeout() {\n        Strophe.info(\"_onDisconnectTimeout was called\");\n        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n      },\n\n      /** PrivateFunction: _onIdle\r\n          *  _Private_ handler to process events during idle cycle.\r\n          *\r\n          *  This handler is called every 100ms to fire timed handlers that\r\n          *  are ready and keep poll requests going.\r\n          */\n      _onIdle: function _onIdle(fail) {\n        var i, thand, since, newList;\n\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n          this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n          thand = this.removeTimeds.pop();\n          i = this.timedHandlers.indexOf(thand);\n          if (i >= 0) {\n            this.timedHandlers.splice(i, 1);\n          }\n        }\n\n        // call ready timed handlers\n        var now = new Date().getTime();\n        newList = [];\n        for (i = 0; i < this.timedHandlers.length; i++) {\n          thand = this.timedHandlers[i];\n          if (this.authenticated || !thand.user) {\n            since = thand.lastCalled + thand.period;\n            if (since - now <= 0) {\n              if (thand.run()) {\n                newList.push(thand);\n              }\n            } else {\n              newList.push(thand);\n            }\n          }\n        }\n        this.timedHandlers = newList;\n\n        clearTimeout(this._idleTimeout);\n\n        this._proto._onIdle(fail);\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n          // XXX: setTimeout should be called only with function expressions (23974bc1)\n          this._idleTimeout = setTimeout(function () {\n            this._onIdle(fail);\n          }.bind(this), 100);\n        }\n      } };\n\n\n    /** Class: Strophe.SASLMechanism\r\n            *\r\n            *  encapsulates SASL authentication mechanisms.\r\n            *\r\n            *  User code may override the priority for each mechanism or disable it completely.\r\n            *  See <priority> for information about changing priority and <test> for informatian on\r\n            *  how to disable a mechanism.\r\n            *\r\n            *  By default, all mechanisms are enabled and the priorities are\r\n            *\r\n            *  EXTERNAL - 60\r\n            *  OAUTHBEARER - 50\r\n            *  SCRAM-SHA1 - 40\r\n            *  DIGEST-MD5 - 30\r\n            *  PLAIN - 20\r\n            *  ANONYMOUS - 10\r\n            *\r\n            *  See: Strophe.Connection.addSupportedSASLMechanisms\r\n            */\n\n    /**\r\n                * PrivateConstructor: Strophe.SASLMechanism\r\n                * SASL auth mechanism abstraction.\r\n                *\r\n                *  Parameters:\r\n                *    (String) name - SASL Mechanism name.\r\n                *    (Boolean) isClientFirst - If client should send response first without challenge.\r\n                *    (Number) priority - Priority.\r\n                *\r\n                *  Returns:\r\n                *    A new Strophe.SASLMechanism object.\r\n                */\n    Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n      /** PrivateVariable: name\r\n                                                                       *  Mechanism name.\r\n                                                                       */\n      this.name = name;\n      /** PrivateVariable: isClientFirst\r\n                         *  If client sends response without initial server challenge.\r\n                         */\n      this.isClientFirst = isClientFirst;\n      /** Variable: priority\r\n                                           *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\r\n                                           *  Users may override this to prioritize mechanisms differently.\r\n                                           *\r\n                                           *  In the default configuration the priorities are\r\n                                           *\r\n                                           *  SCRAM-SHA1 - 40\r\n                                           *  DIGEST-MD5 - 30\r\n                                           *  Plain - 20\r\n                                           *\r\n                                           *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\r\n                                           *\r\n                                           *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\r\n                                           *\r\n                                           *  See <SASL mechanisms> for a list of available mechanisms.\r\n                                           *\r\n                                           */\n      this.priority = priority;\n    };\n\n    Strophe.SASLMechanism.prototype = {\n      /**\r\n                                         *  Function: test\r\n                                         *  Checks if mechanism able to run.\r\n                                         *  To disable a mechanism, make this return false;\r\n                                         *\r\n                                         *  To disable plain authentication run\r\n                                         *  > Strophe.SASLPlain.test = function() {\r\n                                        *  >   return false;\r\n                                        *  > }\r\n                                         *\r\n                                         *  See <SASL mechanisms> for a list of available mechanisms.\r\n                                         *\r\n                                         *  Parameters:\r\n                                         *    (Strophe.Connection) connection - Target Connection.\r\n                                         *\r\n                                         *  Returns:\r\n                                         *    (Boolean) If mechanism was able to run.\r\n                                         */\n      /* jshint unused:false */\n      test: function test(connection) {\n        return true;\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: onStart\r\n                                *  Called before starting mechanism on some connection.\r\n                                *\r\n                                *  Parameters:\r\n                                *    (Strophe.Connection) connection - Target Connection.\r\n                                */\n      onStart: function onStart(connection) {\n        this._connection = connection;\n      },\n\n      /** PrivateFunction: onChallenge\r\n          *  Called by protocol implementation on incoming challenge. If client is\r\n          *  first (isClientFirst == true) challenge will be null on the first call.\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Connection) connection - Target Connection.\r\n          *    (String) challenge - current challenge to handle.\r\n          *\r\n          *  Returns:\r\n          *    (String) Mechanism response.\r\n          */\n      /* jshint unused:false */\n      onChallenge: function onChallenge(connection, challenge) {\n        throw new Error(\"You should implement challenge handling!\");\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: onFailure\r\n                                *  Protocol informs mechanism implementation about SASL failure.\r\n                                */\n      onFailure: function onFailure() {\n        this._connection = null;\n      },\n\n      /** PrivateFunction: onSuccess\r\n          *  Protocol informs mechanism implementation about SASL success.\r\n          */\n      onSuccess: function onSuccess() {\n        this._connection = null;\n      } };\n\n\n    /** Constants: SASL mechanisms\r\n            *  Available authentication mechanisms\r\n            *\r\n            *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\r\n            *  Strophe.SASLPlain - SASL PLAIN authentication.\r\n            *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\r\n            *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\r\n            *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\r\n            *  Strophe.SASLExternal - SASL EXTERNAL authentication\r\n            */\n\n    // Building SASL callbacks\n\n    /** PrivateConstructor: SASLAnonymous\r\n     *  SASL ANONYMOUS authentication.\r\n     */\n    Strophe.SASLAnonymous = function () {\n    };\n    Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 10);\n\n    Strophe.SASLAnonymous.prototype.test = function (connection) {\n      return connection.authcid === null;\n    };\n\n\n    /** PrivateConstructor: SASLPlain\r\n        *  SASL PLAIN authentication.\r\n        */\n    Strophe.SASLPlain = function () {\n    };\n    Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 20);\n\n    Strophe.SASLPlain.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n      var auth_str = connection.authzid;\n      auth_str = auth_str + \"\\0\";\n      auth_str = auth_str + connection.authcid;\n      auth_str = auth_str + \"\\0\";\n      auth_str = auth_str + connection.pass;\n      return utils.utf16to8(auth_str);\n    };\n\n\n    /** PrivateConstructor: SASLSHA1\r\n        *  SASL SCRAM SHA 1 authentication.\r\n        */\n    Strophe.SASLSHA1 = function () {\n    };\n    Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 40);\n\n    Strophe.SASLSHA1.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n      var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);\n      var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n      auth_str += \",r=\";\n      auth_str += cnonce;\n      connection._sasl_data.cnonce = cnonce;\n      connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n\n      auth_str = \"n,,\" + auth_str;\n\n      this.onChallenge = function (connection, challenge) {\n        var nonce, salt, iter, Hi, U, U_old, i, k, pass;\n        var clientKey, serverKey, clientSignature;\n        var responseText = \"c=biws,\";\n        var authMessage = connection._sasl_data[\"client-first-message-bare\"] + \",\" +\n        challenge + \",\";\n        var cnonce = connection._sasl_data.cnonce;\n        var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n        while (challenge.match(attribMatch)) {\n          var matches = challenge.match(attribMatch);\n          challenge = challenge.replace(matches[0], \"\");\n          switch (matches[1]) {\n            case \"r\":\n              nonce = matches[2];\n              break;\n            case \"s\":\n              salt = matches[2];\n              break;\n            case \"i\":\n              iter = matches[2];\n              break;}\n\n        }\n\n        if (nonce.substr(0, cnonce.length) !== cnonce) {\n          connection._sasl_data = {};\n          return connection._sasl_failure_cb();\n        }\n\n        responseText += \"r=\" + nonce;\n        authMessage += responseText;\n\n        salt = Base64.decode(salt);\n        salt += \"\\x00\\x00\\x00\\x01\";\n\n        pass = utils.utf16to8(connection.pass);\n        Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n        for (i = 1; i < iter; i++) {\n          U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n          for (k = 0; k < 5; k++) {\n            Hi[k] ^= U[k];\n          }\n          U_old = U;\n        }\n        Hi = SHA1.binb2str(Hi);\n\n        clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n        serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n        clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n        connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n        for (k = 0; k < 5; k++) {\n          clientKey[k] ^= clientSignature[k];\n        }\n\n        responseText += \",p=\" + Base64.encode(SHA1.binb2str(clientKey));\n        return responseText;\n      }.bind(this);\n\n      return auth_str;\n    };\n\n\n    /** PrivateConstructor: SASLMD5\r\n        *  SASL DIGEST MD5 authentication.\r\n        */\n    Strophe.SASLMD5 = function () {\n    };\n    Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 30);\n\n    Strophe.SASLMD5.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    /** PrivateFunction: _quote\r\n        *  _Private_ utility function to backslash escape and quote strings.\r\n        *\r\n        *  Parameters:\r\n        *    (String) str - The string to be quoted.\r\n        *\r\n        *  Returns:\r\n        *    quoted string\r\n        */\n    Strophe.SASLMD5.prototype._quote = function (str) {\n      return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"';\n      //\" end string workaround for emacs\n    };\n\n    Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n      var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n      var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n      var realm = \"\";\n      var host = null;\n      var nonce = \"\";\n      var qop = \"\";\n      var matches;\n\n      while (challenge.match(attribMatch)) {\n        matches = challenge.match(attribMatch);\n        challenge = challenge.replace(matches[0], \"\");\n        matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n        switch (matches[1]) {\n          case \"realm\":\n            realm = matches[2];\n            break;\n          case \"nonce\":\n            nonce = matches[2];\n            break;\n          case \"qop\":\n            qop = matches[2];\n            break;\n          case \"host\":\n            host = matches[2];\n            break;}\n\n      }\n\n      var digest_uri = connection.servtype + \"/\" + connection.domain;\n      if (host !== null) {\n        digest_uri = digest_uri + \"/\" + host;\n      }\n\n      var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n      var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n      var A2 = 'AUTHENTICATE:' + digest_uri;\n\n      var responseText = \"\";\n      responseText += 'charset=utf-8,';\n      responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n      responseText += 'realm=' + this._quote(realm) + ',';\n      responseText += 'nonce=' + this._quote(nonce) + ',';\n      responseText += 'nc=00000001,';\n      responseText += 'cnonce=' + this._quote(cnonce) + ',';\n      responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n      responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" +\n      nonce + \":00000001:\" +\n      cnonce + \":auth:\" +\n      MD5.hexdigest(A2)) + \",\";\n      responseText += 'qop=auth';\n\n      this.onChallenge = function () {\n        return \"\";\n      };\n      return responseText;\n    };\n\n\n    /** PrivateConstructor: SASLOAuthBearer\r\n        *  SASL OAuth Bearer authentication.\r\n        */\n    Strophe.SASLOAuthBearer = function () {\n    };\n    Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 50);\n\n    Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n      var auth_str = 'n,a=';\n      auth_str = auth_str + connection.authzid;\n      auth_str = auth_str + ',';\n      auth_str = auth_str + \"\\x01\";\n      auth_str = auth_str + 'auth=Bearer ';\n      auth_str = auth_str + connection.pass;\n      auth_str = auth_str + \"\\x01\";\n      auth_str = auth_str + \"\\x01\";\n      return utils.utf16to8(auth_str);\n    };\n\n\n    /** PrivateConstructor: SASLExternal\r\n        *  SASL EXTERNAL authentication.\r\n        *\r\n        *  The EXTERNAL mechanism allows a client to request the server to use\r\n        *  credentials established by means external to the mechanism to\r\n        *  authenticate the client. The external means may be, for instance,\r\n        *  TLS services.\r\n        */\n    Strophe.SASLExternal = function () {\n    };\n    Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 60);\n\n    Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n      /** According to XEP-178, an authzid SHOULD NOT be presented when the\r\n                                                                         * authcid contained or implied in the client certificate is the JID (i.e.\r\n                                                                         * authzid) with which the user wants to log in as.\r\n                                                                         *\r\n                                                                         * To NOT send the authzid, the user should therefore set the authcid equal\r\n                                                                         * to the JID when instantiating a new Strophe.Connection object.\r\n                                                                         */\n      return connection.authcid === connection.authzid ? '' : connection.authzid;\n    };\n\n    return {\n      Strophe: Strophe,\n      $build: $build,\n      $msg: $msg,\n      $iq: $iq,\n      $pres: $pres,\n      SHA1: SHA1,\n      Base64: Base64,\n      MD5: MD5 };\n\n  });\n\n\n  /*\r\n       This program is distributed under the terms of the MIT license.\r\n       Please see the LICENSE file for details.\r\n      \n       Copyright 2006-2008, OGG, LLC\r\n       */\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_6__ = ((function (core) {\n        return factory(\n        core.Strophe,\n        core.$build);\n\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else {}\n  })(this, function (Strophe, $build) {\n\n    /** PrivateClass: Strophe.Request\r\n                                        *  _Private_ helper class that provides a cross implementation abstraction\r\n                                        *  for a BOSH related XMLHttpRequest.\r\n                                        *\r\n                                        *  The Strophe.Request class is used internally to encapsulate BOSH request\r\n                                        *  information.  It is not meant to be used from user's code.\r\n                                        */\n\n    /** PrivateConstructor: Strophe.Request\r\n                                            *  Create and initialize a new Strophe.Request object.\r\n                                            *\r\n                                            *  Parameters:\r\n                                            *    (XMLElement) elem - The XML data to be sent in the request.\r\n                                            *    (Function) func - The function that will be called when the\r\n                                            *      XMLHttpRequest readyState changes.\r\n                                            *    (Integer) rid - The BOSH rid attribute associated with this request.\r\n                                            *    (Integer) sends - The number of times this same request has been sent.\r\n                                            */\n    Strophe.Request = function (elem, func, rid, sends) {\n      this.id = ++Strophe._requestId;\n      this.xmlData = elem;\n      this.data = Strophe.serialize(elem);\n      // save original function in case we need to make a new request\n      // from this one.\n      this.origFunc = func;\n      this.func = func;\n      this.rid = rid;\n      this.date = NaN;\n      this.sends = sends || 0;\n      this.abort = false;\n      this.dead = null;\n\n      this.age = function () {\n        if (!this.date) {\n          return 0;\n        }\n        var now = new Date();\n        return (now - this.date) / 1000;\n      };\n      this.timeDead = function () {\n        if (!this.dead) {\n          return 0;\n        }\n        var now = new Date();\n        return (now - this.dead) / 1000;\n      };\n      this.xhr = this._newXHR();\n    };\n\n    Strophe.Request.prototype = {\n      /** PrivateFunction: getResponse\r\n                                   *  Get a response from the underlying XMLHttpRequest.\r\n                                   *\r\n                                   *  This function attempts to get a response from the request and checks\r\n                                   *  for errors.\r\n                                   *\r\n                                   *  Throws:\r\n                                   *    \"parsererror\" - A parser error occured.\r\n                                   *    \"badformat\" - The entity has sent XML that cannot be processed.\r\n                                   *\r\n                                   *  Returns:\r\n                                   *    The DOM element tree of the response.\r\n                                   */\n      getResponse: function getResponse() {\n        var node = null;\n        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n          node = this.xhr.responseXML.documentElement;\n          if (node.tagName == \"parsererror\") {\n            Strophe.error(\"invalid response received\");\n            Strophe.error(\"responseText: \" + this.xhr.responseText);\n            Strophe.error(\"responseXML: \" +\n            Strophe.serialize(this.xhr.responseXML));\n            throw \"parsererror\";\n          }\n        } else if (this.xhr.responseText) {\n          Strophe.error(\"invalid response received\");\n          Strophe.error(\"responseText: \" + this.xhr.responseText);\n          throw \"badformat\";\n        }\n\n        return node;\n      },\n\n      /** PrivateFunction: _newXHR\r\n          *  _Private_ helper function to create XMLHttpRequests.\r\n          *\r\n          *  This function creates XMLHttpRequests across all implementations.\r\n          *\r\n          *  Returns:\r\n          *    A new XMLHttpRequest.\r\n          */\n      _newXHR: function _newXHR() {\n        var xhr = null;\n        if (window.XMLHttpRequest) {\n          xhr = new XMLHttpRequest();\n          if (xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n          }\n        } else if (window.ActiveXObject) {\n          xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n      } };\n\n\n    /** Class: Strophe.Bosh\r\n            *  _Private_ helper class that handles BOSH Connections\r\n            *\r\n            *  The Strophe.Bosh class is used internally by Strophe.Connection\r\n            *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\r\n            */\n\n    /** File: bosh.js\r\n                *  A JavaScript library to enable BOSH in Strophejs.\r\n                *\r\n                *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\r\n                *  to emulate a persistent, stateful, two-way connection to an XMPP server.\r\n                *  More information on BOSH can be found in XEP 124.\r\n                */\n\n    /** PrivateConstructor: Strophe.Bosh\r\n                    *  Create and initialize a Strophe.Bosh object.\r\n                    *\r\n                    *  Parameters:\r\n                    *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\r\n                    *\r\n                    *  Returns:\r\n                    *    A new Strophe.Bosh object.\r\n                    */\n    Strophe.Bosh = function (connection) {\n      this._conn = connection;\n      /* request id for body tags */\n      this.rid = Math.floor(Math.random() * 4294967295);\n      /* The current session ID. */\n      this.sid = null;\n\n      // default BOSH values\n      this.hold = 1;\n      this.wait = 60;\n      this.window = 5;\n      this.errors = 0;\n\n      this._requests = [];\n    };\n\n    Strophe.Bosh.prototype = {\n      /** Variable: strip\r\n                                *\r\n                                *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\r\n                                *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\r\n                                *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\r\n                                *\r\n                                *  > Strophe.Bosh.prototype.strip = \"body\";\r\n                                *\r\n                                *  This will enable stripping of the body tag in both\r\n                                *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\r\n                                */\n      strip: null,\n\n      /** PrivateFunction: _buildBody\r\n                    *  _Private_ helper function to generate the <body/> wrapper for BOSH.\r\n                    *\r\n                    *  Returns:\r\n                    *    A Strophe.Builder with a <body/> element.\r\n                    */\n      _buildBody: function _buildBody() {\n        var bodyWrap = $build('body', {\n          rid: this.rid++,\n          xmlns: Strophe.NS.HTTPBIND });\n\n        if (this.sid !== null) {\n          bodyWrap.attrs({ sid: this.sid });\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n          this._cacheSession();\n        }\n        return bodyWrap;\n      },\n\n      /** PrivateFunction: _reset\r\n          *  Reset the connection.\r\n          *\r\n          *  This function is called by the reset function of the Strophe Connection\r\n          */\n      _reset: function _reset() {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n          window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n      },\n\n      /** PrivateFunction: _connect\r\n          *  _Private_ function that initializes the BOSH connection.\r\n          *\r\n          *  Creates and sends the Request that initializes the BOSH connection.\r\n          */\n      _connect: function _connect(wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        // build the body tag\n        var body = this._buildBody().attrs({\n          to: this._conn.domain,\n          \"xml:lang\": \"en\",\n          wait: this.wait,\n          hold: this.hold,\n          content: \"text/xml; charset=utf-8\",\n          ver: \"1.6\",\n          \"xmpp:version\": \"1.0\",\n          \"xmlns:xmpp\": Strophe.NS.BOSH });\n\n\n        if (route) {\n          body.attrs({\n            route: route });\n\n        }\n\n        var _connect_cb = this._conn._connect_cb;\n\n        this._requests.push(\n        new Strophe.Request(body.tree(),\n        this._onRequestStateChange.bind(\n        this, _connect_cb.bind(this._conn)),\n        body.tree().getAttribute(\"rid\")));\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _attach\r\n          *  Attach to an already created and authenticated BOSH session.\r\n          *\r\n          *  This function is provided to allow Strophe to attach to BOSH\r\n          *  sessions which have been created externally, perhaps by a Web\r\n          *  application.  This is often used to support auto-login type features\r\n          *  without putting user credentials into the page.\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - The full JID that is bound by the session.\r\n          *    (String) sid - The SID of the BOSH session.\r\n          *    (String) rid - The current RID of the BOSH session.  This RID\r\n          *      will be used by the next request.\r\n          *    (Function) callback The connect callback function.\r\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n          *      time the server will wait before returning an empty result for\r\n          *      a request.  The default setting of 60 seconds is recommended.\r\n          *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n          *      number of connections the server will hold at one time.  This\r\n          *      should almost always be set to 1 (the default).\r\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n          *      allowed range of request ids that are valid.  The default is 5.\r\n          */\n      _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n\n        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n      },\n\n      /** PrivateFunction: _restore\r\n          *  Attempt to restore a cached BOSH session\r\n          *\r\n          *  Parameters:\r\n          *    (String) jid - The full JID that is bound by the session.\r\n          *      This parameter is optional but recommended, specifically in cases\r\n          *      where prebinded BOSH sessions are used where it's important to know\r\n          *      that the right session is being restored.\r\n          *    (Function) callback The connect callback function.\r\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n          *      time the server will wait before returning an empty result for\r\n          *      a request.  The default setting of 60 seconds is recommended.\r\n          *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n          *      number of connections the server will hold at one time.  This\r\n          *      should almost always be set to 1 (the default).\r\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n          *      allowed range of request ids that are valid.  The default is 5.\r\n          */\n      _restore: function _restore(jid, callback, wait, hold, wind) {\n        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n        if (typeof session !== \"undefined\" &&\n        session !== null &&\n        session.rid &&\n        session.sid &&\n        session.jid && (\n        typeof jid === \"undefined\" || jid === null || Strophe.getBareJidFromJid(session.jid) == Strophe.getBareJidFromJid(jid))) {\n          this._conn.restored = true;\n          this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n          throw { name: \"StropheSessionError\", message: \"_restore: no restoreable session.\" };\n        }\n      },\n\n      /** PrivateFunction: _cacheSession\r\n          *  _Private_ handler for the beforeunload event.\r\n          *\r\n          *  This handler is used to process the Bosh-part of the initial request.\r\n          *  Parameters:\r\n          *    (Strophe.Request) bodyWrap - The received stanza.\r\n          */\n      _cacheSession: function _cacheSession() {\n        if (this._conn.authenticated) {\n          if (this._conn.jid && this.rid && this.sid) {\n            window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n              'jid': this._conn.jid,\n              'rid': this.rid,\n              'sid': this.sid }));\n\n          }\n        } else {\n          window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n      },\n\n      /** PrivateFunction: _connect_cb\r\n          *  _Private_ handler for initial connection request.\r\n          *\r\n          *  This handler is used to process the Bosh-part of the initial request.\r\n          *  Parameters:\r\n          *    (Strophe.Request) bodyWrap - The received stanza.\r\n          */\n      _connect_cb: function _connect_cb(bodyWrap) {\n        var typ = bodyWrap.getAttribute(\"type\");\n        var cond, conflict;\n        if (typ !== null && typ == \"terminate\") {\n          // an error occurred\n          cond = bodyWrap.getAttribute(\"condition\");\n          Strophe.error(\"BOSH-Connection failed: \" + cond);\n          conflict = bodyWrap.getElementsByTagName(\"conflict\");\n          if (cond !== null) {\n            if (cond == \"remote-stream-error\" && conflict.length > 0) {\n              cond = \"conflict\";\n            }\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n          } else {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n          }\n          this._conn._doDisconnect(cond);\n          return Strophe.Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n          this.sid = bodyWrap.getAttribute(\"sid\");\n        }\n        var wind = bodyWrap.getAttribute('requests');\n        if (wind) {\n          this.window = parseInt(wind, 10);\n        }\n        var hold = bodyWrap.getAttribute('hold');\n        if (hold) {\n          this.hold = parseInt(hold, 10);\n        }\n        var wait = bodyWrap.getAttribute('wait');\n        if (wait) {\n          this.wait = parseInt(wait, 10);\n        }\n      },\n\n      /** PrivateFunction: _disconnect\r\n          *  _Private_ part of Connection.disconnect for Bosh\r\n          *\r\n          *  Parameters:\r\n          *    (Request) pres - This stanza will be sent before disconnecting.\r\n          */\n      _disconnect: function _disconnect(pres) {\n        this._sendTerminate(pres);\n      },\n\n      /** PrivateFunction: _doDisconnect\r\n          *  _Private_ function to disconnect.\r\n          *\r\n          *  Resets the SID and RID.\r\n          */\n      _doDisconnect: function _doDisconnect() {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n          window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n      },\n\n      /** PrivateFunction: _emptyQueue\r\n          * _Private_ function to check if the Request queue is empty.\r\n          *\r\n          *  Returns:\r\n          *    True, if there are no Requests queued, False otherwise.\r\n          */\n      _emptyQueue: function _emptyQueue() {\n        return this._requests.length === 0;\n      },\n\n      /** PrivateFunction: _callProtocolErrorHandlers\r\n          *  _Private_ function to call error handlers registered for HTTP errors.\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Request) req - The request that is changing readyState.\r\n          */\n      _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n        var reqStatus = this._getRequestStatus(req),\n        err_callback;\n        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n          err_callback.call(this, reqStatus);\n        }\n      },\n\n      /** PrivateFunction: _hitError\r\n          *  _Private_ function to handle the error count.\r\n          *\r\n          *  Requests are resent automatically until their error count reaches\r\n          *  5.  Each time an error is encountered, this function is called to\r\n          *  increment the count and disconnect if the count is too high.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) reqStatus - The request status.\r\n          */\n      _hitError: function _hitError(reqStatus) {\n        this.errors++;\n        Strophe.warn(\"request errored, status: \" + reqStatus +\n        \", number of errors: \" + this.errors);\n        if (this.errors > 4) {\n          this._conn._onDisconnectTimeout();\n        }\n      },\n\n      /** PrivateFunction: _no_auth_received\r\n          *\r\n          * Called on stream start/restart when no stream:features\r\n          * has been received and sends a blank poll request.\r\n          */\n      _no_auth_received: function _no_auth_received(_callback) {\n        //console.log('_no_auth_received')\n\n        if (_callback) {\n          _callback = _callback.bind(this._conn);\n        } else {\n          _callback = this._conn._connect_cb.bind(this._conn);\n        }\n        var body = this._buildBody();\n        this._requests.push(\n        new Strophe.Request(body.tree(),\n        this._onRequestStateChange.bind(\n        this, _callback.bind(this._conn)),\n        body.tree().getAttribute(\"rid\")));\n        //console.log(this._requests)\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _onDisconnectTimeout\r\n          *  _Private_ timeout handler for handling non-graceful disconnection.\r\n          *\r\n          *  Cancels all remaining Requests and clears the queue.\r\n          */\n      _onDisconnectTimeout: function _onDisconnectTimeout() {\n        this._abortAllRequests();\n      },\n\n      /** PrivateFunction: _abortAllRequests\r\n          *  _Private_ helper function that makes sure all pending requests are aborted.\r\n          */\n      _abortAllRequests: function _abortAllRequests() {\n        var req;\n        while (this._requests.length > 0) {\n          req = this._requests.pop();\n          req.abort = true;\n          req.xhr.abort();\n          // jslint complains, but this is fine. setting to empty func\n          // is necessary for IE6\n          req.xhr.onreadystatechange = function () {\n          }; // jshint ignore:line\n        }\n      },\n\n      /** PrivateFunction: _onIdle\r\n          *  _Private_ handler called by Strophe.Connection._onIdle\r\n          *\r\n          *  Sends all queued Requests or polls with empty Request if there are none.\r\n          */\n      _onIdle: function _onIdle() {\n        var data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 &&\n        data.length === 0 && !this._conn.disconnecting) {\n          Strophe.info(\"no requests during idle cycle, sending \" +\n          \"blank request\");\n          data.push(null);\n        }\n\n        if (this._conn.paused) {\n          return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n          var body = this._buildBody();\n          for (var i = 0; i < data.length; i++) {\n            if (data[i] !== null) {\n              if (data[i] === \"restart\") {\n                body.attrs({\n                  to: this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"xmpp:restart\": \"true\",\n                  \"xmlns:xmpp\": Strophe.NS.BOSH });\n\n              } else {\n                body.cnode(data[i]).up();\n              }\n            }\n          }\n          delete this._conn._data;\n          this._conn._data = [];\n          this._requests.push(\n          new Strophe.Request(body.tree(),\n          this._onRequestStateChange.bind(\n          this, this._conn._dataRecv.bind(this._conn)),\n          body.tree().getAttribute(\"rid\")));\n          this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n          var time_elapsed = this._requests[0].age();\n          if (this._requests[0].dead !== null) {\n            if (this._requests[0].timeDead() >\n            Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n              this._throttledRequestHandler();\n            }\n          }\n\n          if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n            Strophe.warn(\"Request \" +\n            this._requests[0].id +\n            \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) +\n            \" seconds since last activity\");\n            this._throttledRequestHandler();\n          }\n        }\n      },\n\n      /** PrivateFunction: _getRequestStatus\r\n          *\r\n          *  Returns the HTTP status code from a Strophe.Request\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Request) req - The Strophe.Request instance.\r\n          *    (Integer) def - The default value that should be returned if no\r\n          *          status value was found.\r\n          */\n      _getRequestStatus: function _getRequestStatus(req, def) {\n        var reqStatus;\n        if (req.xhr.readyState == 4) {\n          try {\n            reqStatus = req.xhr.status;\n          } catch (e) {\n            // ignore errors from undefined status attribute. Works\n            // around a browser bug\n            Strophe.error(\n            \"Caught an error while retrieving a request's status, \" +\n            \"reqStatus: \" + reqStatus);\n          }\n        }\n        if (typeof reqStatus == \"undefined\") {\n          reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n      },\n\n      /** PrivateFunction: _onRequestStateChange\r\n          *  _Private_ handler for Strophe.Request state changes.\r\n          *\r\n          *  This function is called when the XMLHttpRequest readyState changes.\r\n          *  It contains a lot of error handling logic for the many ways that\r\n          *  requests can fail, and calls the request callback when requests\r\n          *  succeed.\r\n          *\r\n          *  Parameters:\r\n          *    (Function) func - The handler for the request.\r\n          *    (Strophe.Request) req - The request that is changing readyState.\r\n          */\n      _onRequestStateChange: function _onRequestStateChange(func, req) {\n        Strophe.debug(\"request id \" + req.id + \".\" + req.sends +\n        \" state changed to \" + req.xhr.readyState);\n        if (req.abort) {\n          req.abort = false;\n          return;\n        }\n        if (req.xhr.readyState !== 4) {\n          // The request is not yet complete\n          return;\n        }\n        var reqStatus = this._getRequestStatus(req);\n        if (this.disconnecting && reqStatus >= 400) {\n          this._hitError(reqStatus);\n          this._callProtocolErrorHandlers(req);\n          return;\n        }\n\n        if (reqStatus > 0 && reqStatus < 500 || req.sends > 5) {\n          // remove from internal queue\n          this._removeRequest(req);\n          Strophe.debug(\"request id \" + req.id + \" should now be removed\");\n        }\n\n        if (reqStatus == 200) {\n          // request succeeded\n          var reqIs0 = this._requests[0] == req;\n          var reqIs1 = this._requests[1] == req;\n          // if request 1 finished, or request 0 finished and request\n          // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n          // restart the other - both will be in the first spot, as the\n          // completed request has been removed from the queue already\n          if (reqIs1 ||\n          reqIs0 && this._requests.length > 0 &&\n          this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n            this._restartRequest(0);\n          }\n          this._conn.nextValidRid(Number(req.rid) + 1);\n          Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n          func(req); // call handler\n          this.errors = 0;\n        } else if (reqStatus === 0 ||\n        reqStatus >= 400 && reqStatus < 600 ||\n        reqStatus >= 12000) {\n          // request failed\n          Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n          this._hitError(reqStatus);\n          this._callProtocolErrorHandlers(req);\n          if (reqStatus >= 400 && reqStatus < 500) {\n            this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n            this._conn._doDisconnect();\n          }\n        } else {\n          Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n        }\n        if (!(reqStatus > 0 && reqStatus < 500) || req.sends > 5) {\n          this._throttledRequestHandler();\n        }\n      },\n\n      /** PrivateFunction: _processRequest\r\n          *  _Private_ function to process a request in the queue.\r\n          *\r\n          *  This function takes requests off the queue and sends them and\r\n          *  restarts dead requests.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) i - The index of the request in the queue.\r\n          */\n      _processRequest: function _processRequest(i) {\n        var self = this;\n        var req = this._requests[i];\n        var reqStatus = this._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n          this._conn._onDisconnectTimeout();\n          return;\n        }\n\n        var time_elapsed = req.age();\n        var primaryTimeout = !isNaN(time_elapsed) &&\n        time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);\n        var secondaryTimeout = req.dead !== null &&\n        req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);\n        var requestCompletedWithServerError = req.xhr.readyState == 4 && (\n        reqStatus < 1 || reqStatus >= 500);\n        if (primaryTimeout || secondaryTimeout ||\n        requestCompletedWithServerError) {\n          if (secondaryTimeout) {\n            Strophe.error(\"Request \" + this._requests[i].id +\n            \" timed out (secondary), restarting\");\n          }\n          req.abort = true;\n          req.xhr.abort();\n          // setting to null fails on IE6, so set to empty function\n          req.xhr.onreadystatechange = function () {\n          };\n          this._requests[i] = new Strophe.Request(req.xmlData,\n          req.origFunc,\n          req.rid,\n          req.sends);\n          req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n          Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n          try {\n            var contentType = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n            req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n            if (typeof req.xhr.setRequestHeader !== 'undefined') {\n              // IE9 doesn't have setRequestHeader\n              req.xhr.setRequestHeader(\"Content-Type\", contentType);\n            }\n            if (this._conn.options.withCredentials) {\n              req.xhr.withCredentials = true;\n            }\n          } catch (e2) {\n            Strophe.error(\"XHR open failed.\");\n            if (!this._conn.connected) {\n              this._conn._changeConnectStatus(\n              Strophe.Status.CONNFAIL, \"bad-service\");\n            }\n            this._conn.disconnect();\n            return;\n          }\n\n          // Fires the XHR request -- may be invoked immediately\n          // or on a gradually expanding retry window for reconnects\n          var sendFunc = function sendFunc() {\n            req.date = new Date();\n            if (self._conn.options.customHeaders) {\n              var headers = self._conn.options.customHeaders;\n              for (var header in headers) {\n                if (headers.hasOwnProperty(header)) {\n                  req.xhr.setRequestHeader(header, headers[header]);\n                }\n              }\n            }\n            req.xhr.send(req.data);\n          };\n\n          // Implement progressive backoff for reconnects --\n          // First retry (send == 1) should also be instantaneous\n          if (req.sends > 1) {\n            // Using a cube of the retry number creates a nicely\n            // expanding retry window\n            var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),\n            Math.pow(req.sends, 3)) * 1000;\n            setTimeout(function () {\n              // XXX: setTimeout should be called only with function expressions (23974bc1)\n              sendFunc();\n            }, backoff);\n          } else {\n            sendFunc();\n          }\n\n          req.sends++;\n\n          if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n            if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n              this._conn.xmlOutput(req.xmlData.childNodes[0]);\n            } else {\n              this._conn.xmlOutput(req.xmlData);\n            }\n          }\n          if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n            this._conn.rawOutput(req.data);\n          }\n        } else {\n          Strophe.debug(\"_processRequest: \" + (\n          i === 0 ? \"first\" : \"second\") +\n          \" request has readyState of \" +\n          req.xhr.readyState);\n        }\n      },\n\n      /** PrivateFunction: _removeRequest\r\n          *  _Private_ function to remove a request from the queue.\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Request) req - The request to remove.\r\n          */\n      _removeRequest: function _removeRequest(req) {\n        Strophe.debug(\"removing request\");\n        var i;\n        for (i = this._requests.length - 1; i >= 0; i--) {\n          if (req == this._requests[i]) {\n            this._requests.splice(i, 1);\n          }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {\n        };\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _restartRequest\r\n          *  _Private_ function to restart a request that is presumed dead.\r\n          *\r\n          *  Parameters:\r\n          *    (Integer) i - The index of the request in the queue.\r\n          */\n      _restartRequest: function _restartRequest(i) {\n        var req = this._requests[i];\n        if (req.dead === null) {\n          req.dead = new Date();\n        }\n\n        this._processRequest(i);\n      },\n\n      /** PrivateFunction: _reqToData\r\n          * _Private_ function to get a stanza out of a request.\r\n          *\r\n          * Tries to extract a stanza out of a Request Object.\r\n          * When this fails the current connection will be disconnected.\r\n          *\r\n          *  Parameters:\r\n          *    (Object) req - The Request.\r\n          *\r\n          *  Returns:\r\n          *    The stanza that was passed.\r\n          */\n      _reqToData: function _reqToData(req) {\n        try {\n          return req.getResponse();\n        } catch (e) {\n          if (e != \"parsererror\") {\n            throw e;\n          }\n          this._conn.disconnect(\"strophe-parsererror\");\n        }\n      },\n\n      /** PrivateFunction: _sendTerminate\r\n          *  _Private_ function to send initial disconnect sequence.\r\n          *\r\n          *  This is the first step in a graceful disconnect.  It sends\r\n          *  the BOSH server a terminate body and includes an unavailable\r\n          *  presence if authentication has completed.\r\n          */\n      _sendTerminate: function _sendTerminate(pres) {\n        Strophe.info(\"_sendTerminate was called\");\n        var body = this._buildBody().attrs({ type: \"terminate\" });\n        if (pres) {\n          body.cnode(pres.tree());\n        }\n        var req = new Strophe.Request(\n        body.tree(),\n        this._onRequestStateChange.bind(\n        this, this._conn._dataRecv.bind(this._conn)),\n        body.tree().getAttribute(\"rid\"));\n\n        this._requests.push(req);\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _send\r\n          *  _Private_ part of the Connection.send function for BOSH\r\n          *\r\n          * Just triggers the RequestHandler to send the messages that are in the queue\r\n          */\n      _send: function _send(fail) {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._conn._idleTimeout = setTimeout(function () {\n          this._onIdle(fail);\n        }.bind(this._conn), 100);\n      },\n\n      /** PrivateFunction: _sendRestart\r\n          *\r\n          *  Send an xmpp:restart stanza.\r\n          */\n      _sendRestart: function _sendRestart() {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n      },\n\n      /** PrivateFunction: _throttledRequestHandler\r\n          *  _Private_ function to throttle requests to the connection window.\r\n          *\r\n          *  This function makes sure we don't send requests so fast that the\r\n          *  request ids overflow the connection window in the case that one\r\n          *  request died.\r\n          */\n      _throttledRequestHandler: function _throttledRequestHandler() {\n        if (!this._requests) {\n          Strophe.debug(\"_throttledRequestHandler called with \" +\n          \"undefined requests\");\n        } else {\n          Strophe.debug(\"_throttledRequestHandler called with \" +\n          this._requests.length + \" requests\");\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n          return;\n        }\n\n        if (this._requests.length > 0) {\n          this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 &&\n        Math.abs(this._requests[0].rid -\n        this._requests[1].rid) < this.window) {\n          this._processRequest(1);\n        }\n      } };\n\n    return Strophe;\n  });\n\n  /*\r\n       This program is distributed under the terms of the MIT license.\r\n       Please see the LICENSE file for details.\r\n      \n       Copyright 2006-2008, OGG, LLC\r\n       */\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_7__ = ((function (core) {\n        return factory(\n        core.Strophe,\n        core.$build);\n\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else {}\n  })(this, function (Strophe, $build) {\n    //console.log(Strophe)\n    var _socketTask = undefined;\n    /** Class: Strophe.WebSocket\r\n                                  *  _Private_ helper class that handles WebSocket Connections\r\n                                  *\r\n                                  *  The Strophe.WebSocket class is used internally by Strophe.Connection\r\n                                  *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\r\n                                  */\n\n    /** File: websocket.js\r\n                                      *  A JavaScript library to enable XMPP over Websocket in Strophejs.\r\n                                      *\r\n                                      *  This file implements XMPP over WebSockets for Strophejs.\r\n                                      *  If a Connection is established with a Websocket url (ws://...)\r\n                                      *  Strophe will use WebSockets.\r\n                                      *  For more information on XMPP-over-WebSocket see RFC 7395:\r\n                                      *  http://tools.ietf.org/html/rfc7395\r\n                                      *\r\n                                      *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\r\n                                      */\n\n    /** PrivateConstructor: Strophe.Websocket\r\n                                          *  Create and initialize a Strophe.WebSocket object.\r\n                                          *  Currently only sets the connection Object.\r\n                                          *\r\n                                          *  Parameters:\r\n                                          *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\r\n                                          *\r\n                                          *  Returns:\r\n                                          *    A new Strophe.WebSocket object.\r\n                                          */\n    Strophe.Websocket = function (connection) {\n      //console.log(connection)\n      this._conn = connection;\n      this.strip = \"wrapper\";\n\n      var service = connection.service; //\"wss://im-api.sandbox.easemob.com/ws/\"\n      if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n        // If the service is not an absolute URL, assume it is a path and put the absolute\n        // URL together from options, current URL and the path.\n        var new_service = \"\";\n\n        if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n          new_service += \"ws\";\n        } else {\n          new_service += \"wss\";\n        }\n\n        new_service += \"://\" + window.location.host;\n\n        if (service.indexOf(\"/\") !== 0) {\n          new_service += window.location.pathname + service;\n        } else {\n          new_service += service;\n        }\n\n        connection.service = new_service;\n      }\n    };\n\n    Strophe.Websocket.prototype = {\n      /** PrivateFunction: _buildStream\r\n                                     *  _Private_ helper function to generate the <stream> start tag for WebSockets\r\n                                     *\r\n                                     *  Returns:\r\n                                     *    A Strophe.Builder with a <stream> element.\r\n                                     */\n      _buildStream: function _buildStream() {\n        return $build(\"open\", {\n          \"xmlns\": Strophe.NS.FRAMING,\n          \"to\": this._conn.domain,\n          \"version\": '1.0' });\n\n      },\n\n      /** PrivateFunction: _check_streamerror\r\n          * _Private_ checks a message for stream:error\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Request) bodyWrap - The received stanza.\r\n          *    connectstatus - The ConnectStatus that will be set on error.\r\n          *  Returns:\r\n          *     true if there was a streamerror, false otherwise.\r\n          */\n      _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n        var errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n          errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n        } else {\n          errors = bodyWrap.getElementsByTagName(\"stream:error\");\n        }\n        if (errors.length === 0) {\n          return false;\n        }\n        var error = errors[0];\n\n        var condition = \"\";\n        var text = \"\";\n\n        var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n        for (var i = 0; i < error.childNodes.length; i++) {\n          var e = error.childNodes[i];\n          if (e.getAttribute(\"xmlns\") !== ns) {\n            break;\n          }\n          if (e.nodeName === \"text\") {\n            text = e.textContent;\n          } else {\n            condition = e.nodeName;\n          }\n        }\n\n        var errorString = \"WebSocket stream error: \";\n\n        if (condition) {\n          errorString += condition;\n        } else {\n          errorString += \"unknown\";\n        }\n\n        if (text) {\n          errorString += \" - \" + condition;\n        }\n\n        Strophe.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n      },\n\n      /** PrivateFunction: _reset\r\n          *  Reset the connection.\r\n          *\r\n          *  This function is called by the reset function of the Strophe Connection.\r\n          *  Is not needed by WebSockets.\r\n          */\n      _reset: function _reset() {\n        return;\n      },\n\n      /** PrivateFunction: _connect\r\n          *  _Private_ function called by Strophe.Connection.connect\r\n          *\r\n          *  Creates a WebSocket for a connection and assigns Callbacks to it.\r\n          *  Does nothing if there already is a WebSocket.\r\n          */\n\n      _connect: function _connect() {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        // Create the new WobSocket\n        var isAndroid = false;\n        var res = wx.getSystemInfoSync();\n        if (res.platform == \"devtools\") {\n          isAndroid = false;\n        } else if (res.platform == \"ios\") {\n          isAndroid = false;\n        } else if (res.platform == \"android\") {\n          isAndroid = true;\n        }\n\n        var me = this;\n        this.socket = {\n          onopen: this._onOpen,\n          onmessage: this._connect_cb_wrapper,\n          onerror: this._onError,\n          onclose: this._onClose,\n          send: function send(str) {\n            wx.sendSocketMessage({ data: str });\n          } };\n\n\n        function creatSocket() {\n          if (_socketTask) {\n            console.log(__f__('有sockettask了。。。', \" at sdk\\\\libs\\\\strophe.js:5582\"));\n            _socketTask.close();\n            _socketTask = undefined;\n          }\n\n          setTimeout(function () {\n            var SocketTask = wx.connectSocket({\n              url: me._conn.service,\n              fail: function fail(e) {\n                console.log(__f__('连接失败', e, \" at sdk\\\\libs\\\\strophe.js:5591\"));\n                //部分机型从后台切回前台状态有延迟\n                if (e.errMsg.indexOf('suspend') != -1) {\n                  creatSocket();\n                }\n              },\n              success: function success(e) {\n                console.log(__f__('连接成功', e, \" at sdk\\\\libs\\\\strophe.js:5598\"));\n              } });\n\n            _socketTask = SocketTask;\n\n            _socketTask.onOpen(function (res) {\n              console.log(__f__(\"WebSocket 连接已打开！\", \" at sdk\\\\libs\\\\strophe.js:5604\"));\n              isSocketConnnected = true;\n              // wx.sendSocketMessage({\n              //     data: \"Hello,World:\"\n              // });\n              me.socket.onopen.call(me);\n            });\n            _socketTask.onMessage(function (msg) {\n              //console.log(\"onSocketMessage\", msg, JSON.stringify(msg));\n              me.socket.onmessage.call(me, msg);\n            });\n            _socketTask.onClose(function (e) {\n              console.log(__f__(\"WebSocket 连接已经关闭！\", \" at sdk\\\\libs\\\\strophe.js:5616\"));\n              isSocketConnnected = false;\n              me._conn.connected = true;\n              me.socket.onclose.call(me);\n              // 外部回调，需要设计一个更合适的\n              //保存聊天数据\n\n\n\n              disp.fire('em.chat.saveHistory', e);\n              /* console.log(JSON.stringify(store.state.linkList))\r\n                                                   uni.setStorageSync(\"chatData\",JSON.stringify(temp));\r\n                                                   }catch(e){\r\n                                                   \tconsole.log(\"保存历史记录失败\")\r\n                                                   } */\n\n              me._onSocketClose && me._onSocketClose(e);\n              //me._conn._changeConnectStatus(Strophe.Status.DISCONNECTED, e);\n            });\n            _socketTask.onError(function (e) {\n              console.log(__f__('出错了 出错了', \" at sdk\\\\libs\\\\strophe.js:5636\"));\n\n              if (isAndroid) {\n                console.log(__f__('安卓', \" at sdk\\\\libs\\\\strophe.js:5639\"));\n                //这个是安卓操作系统\n                isSocketConnnected = false;\n                me._conn.connected = true;\n                me.socket.onclose.call(me);\n                // 外部回调，需要设计一个更合适的\n                me._onSocketClose && me._onSocketClose(e);\n              } else {\n                me.socket.onclose.call(me);\n              }\n\n            });\n\n          }, 1000);\n        }\n        creatSocket();\n\n      },\n\n      /** PrivateFunction: _connect_cb\r\n          *  _Private_ function called by Strophe.Connection._connect_cb\r\n          *\r\n          * checks for stream:error\r\n          *\r\n          *  Parameters:\r\n          *    (Strophe.Request) bodyWrap - The received stanza.\r\n          */\n      _connect_cb: function _connect_cb(bodyWrap) {\n        //console.log('connnect_cb', bodyWrap)\n        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);\n        if (error) {\n          return Strophe.Status.CONNFAIL;\n        }\n      },\n\n      /** PrivateFunction: _handleStreamStart\r\n          * _Private_ function that checks the opening <open /> tag for errors.\r\n          *\r\n          * Disconnects if there is an error and returns false, true otherwise.\r\n          *\r\n          *  Parameters:\r\n          *    (Node) message - Stanza containing the <open /> tag.\r\n          */\n      _handleStreamStart: function _handleStreamStart(message) {\n        var error = false;\n\n        //console.log('_handleStreamStart', message, typeof message)\n\n        // Check for errors in the <open /> tag\n        var ns = message.getAttribute(\"xmlns\");\n        if (typeof ns !== \"string\") {\n          error = \"Missing xmlns in <open />\";\n        } else if (ns !== Strophe.NS.FRAMING) {\n          error = \"Wrong xmlns in <open />: \" + ns;\n        }\n\n        var ver = message.getAttribute(\"version\");\n        if (typeof ver !== \"string\") {\n          error = \"Missing version in <open />\";\n        } else if (ver !== \"1.0\") {\n          error = \"Wrong version in <open />: \" + ver;\n        }\n\n        if (error) {\n          this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n          this._conn._doDisconnect();\n          return false;\n        }\n\n        return true;\n      },\n\n      /** PrivateFunction: _connect_cb_wrapper\r\n          * _Private_ function that handles the first connection messages.\r\n          *\r\n          * On receiving an opening stream tag this callback replaces itself with the real\r\n          * message handler. On receiving a stream error the connection is terminated.\r\n          */\n      _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n        //console.log('_connect_cb_wrapper inited')\n\n        if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n          //console.log('_connect_cb_wrapper open 2')\n\n          // Strip the XML Declaration, if there is one\n          var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n          //console.log('_connect_cb_wrapper open 3', data)\n\n          if (data === '') return;\n\n          //console.log(new DOMParser().parseFromString(data, \"text/xml\"))\n          //console.log('_connect_cb_wrapper open 3.1', data)\n\n          var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n          //console.log('_connect_cb_wrapper open 4', streamStart)\n          this._conn.xmlInput(streamStart);\n          this._conn.rawInput(message.data);\n\n          //_handleStreamSteart will check for XML errors and disconnect on error\n          //console.log('_handleStreamStart', streamStart)\n          if (this._handleStreamStart(streamStart)) {\n            //_connect_cb will check for stream:error and disconnect on error\n            //console.log('_connect_cb')\n            this._connect_cb(streamStart);\n          }\n        } else if (message.data.indexOf(\"<close \") === 0) {//'<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />') {\n          //console.log('_connect_cb_wrapper inited 3')\n          this._conn.rawInput(message.data);\n          this._conn.xmlInput(message);\n          var see_uri = message.getAttribute(\"see-other-uri\");\n          if (see_uri) {\n            this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n            this._conn.reset();\n            this._conn.service = see_uri;\n            this._connect();\n          } else {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Received closing stream\");\n            this._conn._doDisconnect();\n          }\n        } else {\n          //console.log('_connect_cb_wrapper inited 4')\n\n          var string = this._streamWrap(message.data);\n          //console.log('_connect_cb_wrapper inited 5')\n\n          var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n          //console.log('_connect_cb_wrapper inited 6')\n\n          this.socket.onmessage = this._onMessage.bind(this);\n          //console.log('_connect_cb_wrapper inited 7')\n\n          this._conn._connect_cb(elem, null, message.data);\n        }\n      },\n\n      /** PrivateFunction: _disconnect\r\n          *  _Private_ function called by Strophe.Connection.disconnect\r\n          *\r\n          *  Disconnects and sends a last stanza if one is given\r\n          *\r\n          *  Parameters:\r\n          *    (Request) pres - This stanza will be sent before disconnecting.\r\n          */\n      _disconnect: function _disconnect(pres) {\n        console.log(__f__('_disconnect', this.socket.readyState, !!this.socket, \" at sdk\\\\libs\\\\strophe.js:5783\"));\n        //  && this.socket.readyState !== WebSocket.CLOSED\n        if (this.socket) {\n          if (pres) {\n            this._conn.send(pres);\n          }\n          var close = $build(\"close\", { \"xmlns\": Strophe.NS.FRAMING });\n          this._conn.xmlOutput(close);\n          var closeString = Strophe.serialize(close);\n          this._conn.rawOutput(closeString);\n          try {\n            this.socket.send(closeString);\n          } catch (e) {\n            Strophe.info(\"Couldn't send <close /> tag.\");\n          }\n        }\n        this._conn._doDisconnect();\n      },\n\n      /** PrivateFunction: _doDisconnect\r\n          *  _Private_ function to disconnect.\r\n          *\r\n          *  Just closes the Socket for WebSockets\r\n          */\n      _doDisconnect: function _doDisconnect() {\n        Strophe.info(\"WebSockets _doDisconnect was called\");\n        this._closeSocket && this._closeSocket();\n      },\n\n      /** PrivateFunction _streamWrap\r\n          *  _Private_ helper function to wrap a stanza in a <stream> tag.\r\n          *  This is used so Strophe can process stanzas from WebSockets like BOSH\r\n          */\n      _streamWrap: function _streamWrap(stanza) {\n        return \"<wrapper>\" + stanza + '</wrapper>';\n      },\n\n\n      /** PrivateFunction: _closeSocket\r\n          *  _Private_ function to close the WebSocket.\r\n          *\r\n          *  Closes the socket if it is still open and deletes it\r\n          */\n      // _closeSocket: function () {\n      //     if (this.socket) { try {\n      //         this.socket.close();\n      //     } catch (e) {} }\n      //     this.socket = null;\n      // },\n\n      /** PrivateFunction: _emptyQueue\r\n       * _Private_ function to check if the message queue is empty.\r\n       *\r\n       *  Returns:\r\n       *    True, because WebSocket messages are send immediately after queueing.\r\n       */\n      _emptyQueue: function _emptyQueue() {\n        return true;\n      },\n\n      /** PrivateFunction: _onClose\r\n          * _Private_ function to handle websockets closing.\r\n          *\r\n          * Nothing to do here for WebSockets\r\n          */\n      _onClose: function _onClose() {\n        if (this._conn.connected && !this._conn.disconnecting) {\n          Strophe.error(\"Websocket closed unexpectedly\");\n          this._conn._doDisconnect();\n        } else {\n          Strophe.info(\"Websocket closed\");\n        }\n      },\n\n      /** PrivateFunction: _no_auth_received\r\n          *\r\n          * Called on stream start/restart when no stream:features\r\n          * has been received.\r\n          */\n      _no_auth_received: function _no_auth_received(_callback) {\n        Strophe.error(\"Server did not send any auth methods\");\n        this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Server did not send any auth methods\");\n        if (_callback) {\n          _callback = _callback.bind(this._conn);\n          _callback();\n        }\n        this._conn._doDisconnect();\n      },\n\n      /** PrivateFunction: _onDisconnectTimeout\r\n          *  _Private_ timeout handler for handling non-graceful disconnection.\r\n          *\r\n          *  This does nothing for WebSockets\r\n          */\n      _onDisconnectTimeout: function _onDisconnectTimeout() {\n      },\n\n      /** PrivateFunction: _abortAllRequests\r\n          *  _Private_ helper function that makes sure all pending requests are aborted.\r\n          */\n      _abortAllRequests: function _abortAllRequests() {\n      },\n\n      /** PrivateFunction: _onError\r\n          * _Private_ function to handle websockets errors.\r\n          *\r\n          * Parameters:\r\n          * (Object) error - The websocket error.\r\n          */\n      _onError: function _onError(error) {\n        wx.onSocketError(function (res) {\n          // console.log('WebSocket连接打开失败，请检查！')\n        });\n        // Strophe.error(\"Websocket error \" + error);\n        // this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n        // this._disconnect();\n      },\n\n      /** PrivateFunction: _onIdle\r\n          *  _Private_ function called by Strophe.Connection._onIdle\r\n          *\r\n          *  sends all queued stanzas\r\n          */\n      _onIdle: function _onIdle(_fail) {\n        var data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n          for (var i = 0; i < data.length; i++) {\n            if (data[i] !== null) {\n              var stanza, rawStanza;\n              if (data[i] === \"restart\") {\n                stanza = this._buildStream().tree();\n              } else {\n                stanza = data[i];\n              }\n              rawStanza = Strophe.serialize(stanza);\n\n              this._conn.xmlOutput(stanza);\n              this._conn.rawOutput(rawStanza);\n              // onsend todo\n              if (isSocketConnnected) {\n                wx.sendSocketMessage({\n                  data: rawStanza,\n                  fail: function fail() {\n                    console.log(__f__('socjet发送失败', \" at sdk\\\\libs\\\\strophe.js:5926\"));\n                    _fail && _fail('socket error');\n                  },\n                  success: function success() {\n\n                  } });\n\n              } else {\n                //this._conn._doDisconnect();\n                isSocketConnnected = false;\n                _fail && _fail('socket disconnnected');\n                //this._changeConnectStatus(Strophe.Status.DISCONNECTED, null);\n              }\n\n              //this.socket.send(rawStanza);\n            }\n          }\n          this._conn._data = [];\n        }\n      },\n\n      /** PrivateFunction: _onMessage\r\n          * _Private_ function to handle websockets messages.\r\n          *\r\n          * This function parses each of the messages as if they are full documents.\r\n          * [TODO : We may actually want to use a SAX Push parser].\r\n          *\r\n          * Since all XMPP traffic starts with\r\n          *  <stream:stream version='1.0'\r\n          *                 xml:lang='en'\r\n          *                 xmlns='jabber:client'\r\n          *                 xmlns:stream='http://etherx.jabber.org/streams'\r\n          *                 id='3697395463'\r\n          *                 from='SERVER'>\r\n          *\r\n          * The first stanza will always fail to be parsed.\r\n          *\r\n          * Additionally, the seconds stanza will always be <stream:features> with\r\n          * the stream NS defined in the previous stanza, so we need to 'force'\r\n          * the inclusion of the NS in this stanza.\r\n          *\r\n          * Parameters:\r\n          * (string) message - The websocket message.\r\n          */\n      _onMessage: function _onMessage(message) {\n        //console.log('_onMessage')\n        // wx.sendSocketMessage({\n        //   data: message\n        // })\n        var elem, data;\n        // check for closing stream\n        var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n          this._conn.rawInput(close);\n          this._conn.xmlInput(message);\n          if (!this._conn.disconnecting) {\n            this._conn._doDisconnect();\n          }\n          return;\n        } else if (message.data.search(\"<open \") === 0) {\n          // This handles stream restarts\n          elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n          if (!this._handleStreamStart(elem)) {\n            return;\n          }\n        } else {\n          data = this._streamWrap(message.data);\n          elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n        }\n\n        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n          return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (this._conn.disconnecting &&\n        elem.firstChild.nodeName === \"presence\" &&\n        elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n          this._conn.xmlInput(elem);\n          this._conn.rawInput(Strophe.serialize(elem));\n          // if we are already disconnecting we will ignore the unavailable stanza and\n          // wait for the </stream:stream> tag before we close the connection\n          return;\n        }\n        this._conn._dataRecv(elem, message.data);\n      },\n\n      /** PrivateFunction: _onOpen\r\n          * _Private_ function to handle websockets connection setup.\r\n          *\r\n          * The opening stream tag is sent here.\r\n          */\n      _onOpen: function _onOpen() {\n        Strophe.info(\"Websocket open\");\n        var start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        var startString = Strophe.serialize(start);\n        this._conn.rawOutput(startString);\n        // onsend todo\n        //console.log('startString', startString)\n        //_socketTask.send({data: startString})\n        wx.sendSocketMessage({ data: startString });\n        //this.socket.send(rawStanza);\n        // this.socket.send(startString);\n      },\n\n      /** PrivateFunction: _reqToData\r\n          * _Private_ function to get a stanza out of a request.\r\n          *\r\n          * WebSockets don't use requests, so the passed argument is just returned.\r\n          *\r\n          *  Parameters:\r\n          *    (Object) stanza - The stanza.\r\n          *\r\n          *  Returns:\r\n          *    The stanza that was passed.\r\n          */\n      _reqToData: function _reqToData(stanza) {\n        return stanza;\n      },\n\n      /** PrivateFunction: _send\r\n          *  _Private_ part of the Connection.send function for WebSocket\r\n          *\r\n          * Just flushes the messages that are in the queue\r\n          */\n      _send: function _send(flush) {\n        this._conn.flush(flush);\n      },\n\n      /** PrivateFunction: _sendRestart\r\n          *\r\n          *  Send an xmpp:restart stanza.\r\n          */\n      _sendRestart: function _sendRestart() {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n      } };\n\n    return Strophe;\n  });\n\n  (function (root) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __WEBPACK_LOCAL_MODULE_5__,\n      __WEBPACK_LOCAL_MODULE_6__,\n      __WEBPACK_LOCAL_MODULE_7__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (wrapper) {\n        return wrapper;\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  })(this);\n\n  /* jshint ignore:start */\n  if (callback) {\n    if (true) {\n      //For backwards compatability\n      var n_callback = callback;\n      if (typeof requirejs === 'function') {\n        requirejs([\"./strophe\"], function (o) {\n          n_callback(o.Strophe, o.$build, o.$msg, o.$iq, o.$pres);\n        });\n      } else {\n        Promise.resolve(/*! AMD require */).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(/*! ./strophe */ 15)]; (function (o) {\n          n_callback(o.Strophe, o.$build, o.$msg, o.$iq, o.$pres);\n        }).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);}).catch(__webpack_require__.oe);\n      }\n    } else {}\n  }\n\n\n}).bind(window)(function (Strophe, build, msg, iq, pres) {\n  // window.Strophe = Strophe;\n  // //console.log(window.Strophe)\n  // window.$build = build;\n  // window.$msg = msg;\n  // window.$iq = iq;\n  // window.$pres = pres;\n});\n/* jshint ignore:end */\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!**************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/store/index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n_vue.default.use(_vuex.default);\n\nvar store = new _vuex.default.Store({\n  state: {\n    /**\r\n            * 是否需要强制登录\r\n            */\n    forcedLogin: true,\n    hasLogin: false,\n    userName: \"\",\n    //serverUrl:\"http://pps1899097338.natapp1.cc\",\n    serverUrl: \"http://q3ejpf.natappfree.cc\",\n    user: {},\n    data: {},\n    linkList: [] },\n\n  updated: function updated() {\n    console.log(__f__('message update:' + this.scrollTop, \" at store\\\\index.js:21\"));\n  },\n  mutations: {\n    login: function login(state, userName) {\n      state.userName = userName || '新用户';\n      state.hasLogin = true;\n    },\n    logout: function logout(state) {\n      state.userName = \"\";\n      state.hasLogin = false;\n    },\n    updateUser: function updateUser(state, u) {\n      state.user = u;\n    },\n    updateData: function updateData(state, k, v) {\n      state.data[k] = v;\n    },\n    setLinkList: function setLinkList(state, data) {\n      state.linkList = data;\n\n    } } });var _default =\n\n\n\nstore;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSIsImZvcmNlZExvZ2luIiwiaGFzTG9naW4iLCJ1c2VyTmFtZSIsInNlcnZlclVybCIsInVzZXIiLCJkYXRhIiwibGlua0xpc3QiLCJ1cGRhdGVkIiwiY29uc29sZSIsImxvZyIsInNjcm9sbFRvcCIsIm11dGF0aW9ucyIsImxvZ2luIiwibG9nb3V0IiwidXBkYXRlVXNlciIsInUiLCJ1cGRhdGVEYXRhIiwiayIsInYiLCJzZXRMaW5rTGlzdCJdLCJtYXBwaW5ncyI6Im9JQUFBO0FBQ0Esd0U7O0FBRUFBLGFBQUlDLEdBQUosQ0FBUUMsYUFBUjs7QUFFQSxJQUFNQyxLQUFLLEdBQUcsSUFBSUQsY0FBS0UsS0FBVCxDQUFlO0FBQ3pCQyxPQUFLLEVBQUU7QUFDSDs7O0FBR0FDLGVBQVcsRUFBRSxJQUpWO0FBS0hDLFlBQVEsRUFBRSxLQUxQO0FBTUhDLFlBQVEsRUFBRSxFQU5QO0FBT1Q7QUFDQUMsYUFBUyxFQUFDLDZCQVJEO0FBU1RDLFFBQUksRUFBRSxFQVRHO0FBVVRDLFFBQUksRUFBQyxFQVZJO0FBV1RDLFlBQVEsRUFBQyxFQVhBLEVBRGtCOztBQWM1QkMsU0FBTyxFQUFDLG1CQUFVO0FBQ2hCQyxXQUFPLENBQUNDLEdBQVIsT0FBWSxvQkFBbUIsS0FBS0MsU0FBcEM7QUFDRCxHQWhCMkI7QUFpQnpCQyxXQUFTLEVBQUU7QUFDUEMsU0FETyxpQkFDRGIsS0FEQyxFQUNNRyxRQUROLEVBQ2dCO0FBQ25CSCxXQUFLLENBQUNHLFFBQU4sR0FBaUJBLFFBQVEsSUFBSSxLQUE3QjtBQUNBSCxXQUFLLENBQUNFLFFBQU4sR0FBaUIsSUFBakI7QUFDSCxLQUpNO0FBS1BZLFVBTE8sa0JBS0FkLEtBTEEsRUFLTztBQUNWQSxXQUFLLENBQUNHLFFBQU4sR0FBaUIsRUFBakI7QUFDQUgsV0FBSyxDQUFDRSxRQUFOLEdBQWlCLEtBQWpCO0FBQ0gsS0FSTTtBQVNiYSxjQVRhLHNCQVNGZixLQVRFLEVBU0lnQixDQVRKLEVBU007QUFDbEJoQixXQUFLLENBQUNLLElBQU4sR0FBV1csQ0FBWDtBQUNBLEtBWFk7QUFZYkMsY0FaYSxzQkFZRmpCLEtBWkUsRUFZSWtCLENBWkosRUFZTUMsQ0FaTixFQVlRO0FBQ3BCbkIsV0FBSyxDQUFDTSxJQUFOLENBQVdZLENBQVgsSUFBY0MsQ0FBZDtBQUNBLEtBZFk7QUFlYkMsZUFmYSx1QkFlRHBCLEtBZkMsRUFlS00sSUFmTCxFQWVVO0FBQ3RCTixXQUFLLENBQUNPLFFBQU4sR0FBZUQsSUFBZjs7QUFFQSxLQWxCWSxFQWpCYyxFQUFmLENBQWQsQzs7OztBQXVDZVIsSyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgVnVleCBmcm9tICd2dWV4J1xyXG5cclxuVnVlLnVzZShWdWV4KVxyXG5cclxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XHJcbiAgICBzdGF0ZToge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaYr+WQpumcgOimgeW8uuWItueZu+W9lVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvcmNlZExvZ2luOiB0cnVlLFxyXG4gICAgICAgIGhhc0xvZ2luOiBmYWxzZSxcclxuICAgICAgICB1c2VyTmFtZTogXCJcIixcclxuXHRcdC8vc2VydmVyVXJsOlwiaHR0cDovL3BwczE4OTkwOTczMzgubmF0YXBwMS5jY1wiLFxyXG5cdFx0c2VydmVyVXJsOlwiaHR0cDovL3EzZWpwZi5uYXRhcHBmcmVlLmNjXCIsXHJcblx0XHR1c2VyOiB7fSxcclxuXHRcdGRhdGE6e30sXHJcblx0XHRsaW5rTGlzdDpbXVxyXG4gICAgfSxcclxuXHR1cGRhdGVkOmZ1bmN0aW9uKCl7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdtZXNzYWdlIHVwZGF0ZTonKyB0aGlzLnNjcm9sbFRvcCk7XHJcblx0fSxcclxuICAgIG11dGF0aW9uczoge1xyXG4gICAgICAgIGxvZ2luKHN0YXRlLCB1c2VyTmFtZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS51c2VyTmFtZSA9IHVzZXJOYW1lIHx8ICfmlrDnlKjmiLcnO1xyXG4gICAgICAgICAgICBzdGF0ZS5oYXNMb2dpbiA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2dvdXQoc3RhdGUpIHtcclxuICAgICAgICAgICAgc3RhdGUudXNlck5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBzdGF0ZS5oYXNMb2dpbiA9IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblx0XHR1cGRhdGVVc2VyKHN0YXRlLHUpe1xyXG5cdFx0XHRzdGF0ZS51c2VyPXU7XHJcblx0XHR9LFxyXG5cdFx0dXBkYXRlRGF0YShzdGF0ZSxrLHYpe1xyXG5cdFx0XHRzdGF0ZS5kYXRhW2tdPXY7XHJcblx0XHR9LFxyXG5cdFx0c2V0TGlua0xpc3Qoc3RhdGUsZGF0YSl7XHJcblx0XHRcdHN0YXRlLmxpbmtMaXN0PWRhdGE7XHJcblx0XHRcdFxyXG5cdFx0fVxyXG4gICAgfVxyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RvcmVcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!*****************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/libs/xmldom/dom-parser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function DOMParser(options) {\n  this.options = options || { locator: {} };\n\n}\nDOMParser.prototype.parseFromString = function (source, mimeType) {\n  var options = this.options;\n  var sax = new XMLReader();\n  var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\n  var errorHandler = options.errorHandler;\n  var locator = options.locator;\n  var defaultNSMap = options.xmlns || {};\n  var entityMap = { 'lt': '<', 'gt': '>', 'amp': '&', 'quot': '\"', 'apos': \"'\" };\n  if (locator) {\n    domBuilder.setDocumentLocator(locator);\n  }\n\n  sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\n  sax.domBuilder = options.domBuilder || domBuilder;\n  if (/\\/x?html?$/.test(mimeType)) {\n    entityMap.nbsp = '\\xa0';\n    entityMap.copy = '\\xa9';\n    defaultNSMap[''] = 'http://www.w3.org/1999/xhtml';\n  }\n  defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\n  if (source) {\n    sax.parse(source, defaultNSMap, entityMap);\n  } else {\n    sax.errorHandler.error(\"invalid document source\");\n  }\n  return domBuilder.document;\n};\nfunction buildErrorHandler(errorImpl, domBuilder, locator) {\n  if (!errorImpl) {\n    if (domBuilder instanceof DOMHandler) {\n      return domBuilder;\n    }\n    errorImpl = domBuilder;\n  }\n  var errorHandler = {};\n  var isCallback = errorImpl instanceof Function;\n  locator = locator || {};\n  function build(key) {\n    var fn = errorImpl[key];\n    if (!fn && isCallback) {\n      fn = errorImpl.length == 2 ? function (msg) {\n        errorImpl(key, msg);\n      } : errorImpl;\n    }\n    errorHandler[key] = fn && function (msg) {\n      fn('[xmldom ' + key + ']\\t' + msg + _locator(locator));\n    } || function () {\n    };\n  }\n\n  build('warning');\n  build('error');\n  build('fatalError');\n  return errorHandler;\n}\n\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler\r\n *\r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\nfunction DOMHandler() {\n  this.cdata = false;\n}\nfunction position(locator, node) {\n  node.lineNumber = locator.lineNumber;\n  node.columnNumber = locator.columnNumber;\n}\n/**\r\n   * @see org.xml.sax.ContentHandler#startDocument\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n   */\nDOMHandler.prototype = {\n  startDocument: function startDocument() {\n    this.document = new DOMImplementation().createDocument(null, null, null);\n    if (this.locator) {\n      this.document.documentURI = this.locator.systemId;\n    }\n  },\n  startElement: function startElement(namespaceURI, localName, qName, attrs) {\n    var doc = this.document;\n    var el = doc.createElementNS(namespaceURI, qName || localName);\n    var len = attrs.length;\n    appendElement(this, el);\n    this.currentElement = el;\n\n    this.locator && position(this.locator, el);\n    for (var i = 0; i < len; i++) {\n      var namespaceURI = attrs.getURI(i);\n      var value = attrs.getValue(i);\n      var qName = attrs.getQName(i);\n      var attr = doc.createAttributeNS(namespaceURI, qName);\n      if (attr.getOffset) {\n        position(attr.getOffset(1), attr);\n      }\n      attr.value = attr.nodeValue = value;\n      el.setAttributeNode(attr);\n    }\n  },\n  endElement: function endElement(namespaceURI, localName, qName) {\n    var current = this.currentElement;\n    var tagName = current.tagName;\n    this.currentElement = current.parentNode;\n  },\n  startPrefixMapping: function startPrefixMapping(prefix, uri) {\n  },\n  endPrefixMapping: function endPrefixMapping(prefix) {\n  },\n  processingInstruction: function processingInstruction(target, data) {\n    var ins = this.document.createProcessingInstruction(target, data);\n    this.locator && position(this.locator, ins);\n    appendElement(this, ins);\n  },\n  ignorableWhitespace: function ignorableWhitespace(ch, start, length) {\n  },\n  characters: function characters(chars, start, length) {\n    chars = _toString.apply(this, arguments);\n    //console.log(chars)\n    if (this.currentElement && chars) {\n      if (this.cdata) {\n        var charNode = this.document.createCDATASection(chars);\n        this.currentElement.appendChild(charNode);\n      } else {\n        var charNode = this.document.createTextNode(chars);\n        this.currentElement.appendChild(charNode);\n      }\n      this.locator && position(this.locator, charNode);\n    }\n  },\n  skippedEntity: function skippedEntity(name) {\n  },\n  endDocument: function endDocument() {\n    this.document.normalize();\n  },\n  setDocumentLocator: function setDocumentLocator(locator) {\n    if (this.locator = locator) {// && !('lineNumber' in locator)){\n      locator.lineNumber = 0;\n    }\n  },\n  //LexicalHandler\n  comment: function comment(chars, start, length) {\n    chars = _toString.apply(this, arguments);\n    var comm = this.document.createComment(chars);\n    this.locator && position(this.locator, comm);\n    appendElement(this, comm);\n  },\n\n  startCDATA: function startCDATA() {\n    //used in characters() methods\n    this.cdata = true;\n  },\n  endCDATA: function endCDATA() {\n    this.cdata = false;\n  },\n\n  startDTD: function startDTD(name, publicId, systemId) {\n    var impl = this.document.implementation;\n    if (impl && impl.createDocumentType) {\n      var dt = impl.createDocumentType(name, publicId, systemId);\n      this.locator && position(this.locator, dt);\n      appendElement(this, dt);\n    }\n  },\n  /**\r\n      * @see org.xml.sax.ErrorHandler\r\n      * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n      */\n  warning: function warning(error) {\n    //console.warn('[xmldom warning]\\t' + error, _locator(this.locator));\n  },\n  error: function error(_error) {\n    //console.error('[xmldom error]\\t' + error, _locator(this.locator));\n  },\n  fatalError: function fatalError(error) {\n    //console.error('[xmldom fatalError]\\t' + error, _locator(this.locator));\n    throw error;\n  } };\n\nfunction _locator(l) {\n  if (l) {\n    return '\\n@' + (l.systemId || '') + '#[line:' + l.lineNumber + ',col:' + l.columnNumber + ']';\n  }\n}\nfunction _toString(chars, start, length) {\n  if (typeof chars == 'string') {\n    return chars.substr(start, length);\n  } else {//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\n    if (chars.length >= start + length || start) {\n      return new java.lang.String(chars, start, length) + '';\n    }\n    return chars;\n  }\n}\n\n/*\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n   * used method of org.xml.sax.ext.LexicalHandler:\r\n   *  #comment(chars, start, length)\r\n   *  #startCDATA()\r\n   *  #endCDATA()\r\n   *  #startDTD(name, publicId, systemId)\r\n   *\r\n   *\r\n   * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n   *  #endDTD()\r\n   *  #startEntity(name)\r\n   *  #endEntity(name)\r\n   *\r\n   *\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n   * IGNORED method of org.xml.sax.ext.DeclHandler\r\n   * \t#attributeDecl(eName, aName, type, mode, value)\r\n   *  #elementDecl(name, model)\r\n   *  #externalEntityDecl(name, publicId, systemId)\r\n   *  #internalEntityDecl(name, value)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n   * IGNORED method of org.xml.sax.EntityResolver2\r\n   *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n   *  #resolveEntity(publicId, systemId)\r\n   *  #getExternalSubset(name, baseURI)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n   * IGNORED method of org.xml.sax.DTDHandler\r\n   *  #notationDecl(name, publicId, systemId) {};\r\n   *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n   */\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function (key) {\n  DOMHandler.prototype[key] = function () {\n    return null;\n  };\n});\n\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\nfunction appendElement(hander, node) {\n  if (!hander.currentElement) {\n    hander.document.appendChild(node);\n  } else {\n    hander.currentElement.appendChild(node);\n  }\n} //appendChild and setAttributeNS are preformance key\n\nif (true) {\n  var XMLReader = __webpack_require__(/*! ./sax */ 18).XMLReader;\n  var DOMImplementation = exports.DOMImplementation = __webpack_require__(/*! ./dom */ 19).DOMImplementation;\n  var XMLSerializer = exports.XMLSerializer = __webpack_require__(/*! ./dom */ 19).XMLSerializer;\n  exports.DOMParser = DOMParser;\n  var DOMParser = {\n    DOMImplementation: DOMImplementation,\n    XMLSerializer: XMLSerializer,\n    DOMParser: DOMParser };\n\n  module.exports = DOMParser;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!**********************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/libs/xmldom/sax.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/; //\\u10000-\\uEFFFF\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\xB7\\u0300-\\u036F\\\\u203F-\\u2040]\");\nvar tagNamePattern = new RegExp('^' + nameStartChar.source + nameChar.source + '*(?:\\:' + nameStartChar.source + nameChar.source + '*)?$');\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_V\n//S_ATTR_S,\tS_E,\tS_S,\tS_C\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring\nvar S_ATTR_S = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_V = 4; //attr value(no quot value only)\nvar S_E = 5; //attr value end and no space(quot end)\nvar S_S = 6; //(attr value end || tag end ) && (space offer)\nvar S_C = 7; //closed el<el />\n\nfunction XMLReader() {\n\n}\n\nXMLReader.prototype = {\n  parse: function parse(source, defaultNSMap, entityMap) {\n    var domBuilder = this.domBuilder;\n    domBuilder.startDocument();\n    _copy(defaultNSMap, defaultNSMap = {});\n    _parse(source, defaultNSMap, entityMap,\n    domBuilder, this.errorHandler);\n    domBuilder.endDocument();\n  } };\n\nfunction _parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n  function fixedFromCharCode(code) {\n    // String.prototype.fromCharCode does not supports\n    // > 2 bytes unicode chars directly\n    if (code > 0xffff) {\n      code -= 0x10000;\n      var surrogate1 = 0xd800 + (code >> 10),\n      surrogate2 = 0xdc00 + (code & 0x3ff);\n\n      return String.fromCharCode(surrogate1, surrogate2);\n    } else {\n      return String.fromCharCode(code);\n    }\n  }\n\n  function entityReplacer(a) {\n    var k = a.slice(1, -1);\n    if (k in entityMap) {\n      return entityMap[k];\n    } else if (k.charAt(0) === '#') {\n      return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));\n    } else {\n      errorHandler.error('entity not found:' + a);\n      return a;\n    }\n  }\n\n  function appendText(end) {//has some bugs\n    if (end > start) {\n      var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\n      locator && position(start);\n      domBuilder.characters(xt, 0, end - start);\n      start = end;\n    }\n  }\n\n  function position(p, m) {\n    while (p >= lineEnd && (m = linePattern.exec(source))) {\n      lineStart = m.index;\n      lineEnd = lineStart + m[0].length;\n      locator.lineNumber++;\n      ////console.log('line++:',locator,startPos,endPos)\n    }\n    locator.columnNumber = p - lineStart + 1;\n  }\n\n  var lineStart = 0;\n  var lineEnd = 0;\n  var linePattern = /.+(?:\\r\\n?|\\n)|.*$/g;\n  var locator = domBuilder.locator;\n\n  var parseStack = [{ currentNSMap: defaultNSMapCopy }];\n  var closeMap = {};\n  var start = 0;\n  while (true) {\n    try {\n      var tagStart = source.indexOf('<', start);\n      if (tagStart < 0) {\n        if (!source.substr(start).match(/^\\s*$/)) {\n          var doc = domBuilder.document;\n          var text = doc.createTextNode(source.substr(start));\n          doc.appendChild(text);\n          domBuilder.currentElement = text;\n        }\n        return;\n      }\n      if (tagStart > start) {\n        appendText(tagStart);\n      }\n      switch (source.charAt(tagStart + 1)) {\n        case '/':\n          var end = source.indexOf('>', tagStart + 3);\n          var tagName = source.substring(tagStart + 2, end);\n          var config = parseStack.pop();\n          var localNSMap = config.localNSMap;\n          if (config.tagName != tagName) {\n            errorHandler.fatalError(\"end tag name: \" + tagName + ' is not match the current start tagName:' + config.tagName);\n          }\n          domBuilder.endElement(config.uri, config.localName, tagName);\n          if (localNSMap) {\n            for (var prefix in localNSMap) {\n              domBuilder.endPrefixMapping(prefix);\n            }\n          }\n          end++;\n          break;\n        // end elment\n        case '?': // <?...?>\n          locator && position(tagStart);\n          end = parseInstruction(source, tagStart, domBuilder);\n          break;\n        case '!': // <!doctype,<![CDATA,<!--\n          locator && position(tagStart);\n          end = parseDCC(source, tagStart, domBuilder, errorHandler);\n          break;\n        default:\n          //console.log('locator', locator)\n\n          locator && position(tagStart);\n\n          var el = new ElementAttributes();\n\n          //elStartEnd\n          var end = parseElementStartPart(source, tagStart, el, entityReplacer, errorHandler);\n          //console.log('end', end)\n\n          var len = el.length;\n\n          if (locator) {\n            if (len) {\n              //attribute position fixed\n              for (var i = 0; i < len; i++) {\n                var a = el[i];\n                position(a.offset);\n                a.offset = copyLocator(locator, {});\n              }\n            }\n            position(end);\n          }\n          //console.log('el', el)\n\n          if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\n            el.closed = true;\n            if (!entityMap.nbsp) {\n              errorHandler.warning('unclosed xml attribute');\n            }\n          }\n          //console.log('parseStack', parseStack)\n\n          appendElement(el, domBuilder, parseStack);\n\n          //console.log('el', el, parseStack)\n\n\n          if (el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed) {\n            end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n          } else {\n            end++;\n          }}\n\n    } catch (e) {\n      errorHandler.error('element parse error: ' + e);\n      //console.log('element parse error: ', e)\n      end = -1;\n    }\n    //console.log('out', end, start)\n\n\n    if (end > start) {\n      start = end;\n    } else {\n      //TODO: 这里有可能sax回退，有位置错误风险\n      appendText(Math.max(tagStart, start) + 1);\n    }\n  }\n}\nfunction copyLocator(f, t) {\n  t.lineNumber = f.lineNumber;\n  t.columnNumber = f.columnNumber;\n  return t;\n}\n\n/**\r\n   * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n   */\nfunction parseElementStartPart(source, start, el, entityReplacer, errorHandler) {\n  var attrName;\n  var value;\n  var p = ++start;\n  var s = S_TAG; //status\n  while (true) {\n    var c = source.charAt(p);\n    switch (c) {\n      case '=':\n        if (s === S_ATTR) {//attrName\n          attrName = source.slice(start, p);\n          s = S_EQ;\n        } else if (s === S_ATTR_S) {\n          s = S_EQ;\n        } else {\n          //fatalError: equal must after attrName or space after attrName\n          throw new Error('attribute equal must after attrName');\n        }\n        break;\n      case '\\'':\n      case '\"':\n        if (s === S_EQ) {//equal\n          start = p + 1;\n          p = source.indexOf(c, start);\n          if (p > 0) {\n            value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n            el.add(attrName, value, start - 1);\n            s = S_E;\n          } else {\n            //fatalError: no end quot match\n            throw new Error('attribute value no end \\'' + c + '\\' match');\n          }\n        } else if (s == S_V) {\n          value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n          ////console.log(attrName,value,start,p)\n          el.add(attrName, value, start);\n          //console.dir(el)\n          errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + ')!!');\n          start = p + 1;\n          s = S_E;\n        } else {\n          //fatalError: no equal before\n          throw new Error('attribute value must after \"=\"');\n        }\n        break;\n      case '/':\n        switch (s) {\n          case S_TAG:\n            el.setTagName(source.slice(start, p));\n          case S_E:\n          case S_S:\n          case S_C:\n            s = S_C;\n            el.closed = true;\n          case S_V:\n          case S_ATTR:\n          case S_ATTR_S:\n            break;\n          //case S_EQ:\n          default:\n            throw new Error(\"attribute invalid close char('/')\");}\n\n        break;\n      case '': //end document\n        //throw new Error('unexpected end of input')\n        errorHandler.error('unexpected end of input');\n      case '>':\n        switch (s) {\n          case S_TAG:\n            el.setTagName(source.slice(start, p));\n          case S_E:\n          case S_S:\n          case S_C:\n            break; //normal\n          case S_V: //Compatible state\n          case S_ATTR:\n            value = source.slice(start, p);\n            if (value.slice(-1) === '/') {\n              el.closed = true;\n              value = value.slice(0, -1);\n            }\n          case S_ATTR_S:\n            if (s === S_ATTR_S) {\n              value = attrName;\n            }\n            if (s == S_V) {\n              errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n              el.add(attrName, value.replace(/&#?\\w+;/g, entityReplacer), start);\n            } else {\n              errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n              el.add(value, value, start);\n            }\n            break;\n          case S_EQ:\n            throw new Error('attribute value missed!!');}\n\n        //\t\t\t//console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n        return p;\n      /*xml space '\\x20' | #x9 | #xD | #xA; */\n      case \"\\x80\":\n        c = ' ';\n      default:\n        if (c <= ' ') {//space\n          switch (s) {\n            case S_TAG:\n              el.setTagName(source.slice(start, p)); //tagName\n              s = S_S;\n              break;\n            case S_ATTR:\n              attrName = source.slice(start, p);\n              s = S_ATTR_S;\n              break;\n            case S_V:\n              var value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n              errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n              el.add(attrName, value, start);\n            case S_E:\n              s = S_S;\n              break;\n            //case S_S:\n            //case S_EQ:\n            //case S_ATTR_S:\n            //\tvoid();break;\n            //case S_C:\n            //ignore warning\n          }\n        } else {//not space\n          //S_TAG,\tS_ATTR,\tS_EQ,\tS_V\n          //S_ATTR_S,\tS_E,\tS_S,\tS_C\n          switch (s) {\n            //case S_TAG:void();break;\n            //case S_ATTR:void();break;\n            //case S_V:void();break;\n            case S_ATTR_S:\n              errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead!!');\n              el.add(attrName, attrName, start);\n              start = p;\n              s = S_ATTR;\n              break;\n            case S_E:\n              errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n            case S_S:\n              s = S_ATTR;\n              start = p;\n              break;\n            case S_EQ:\n              s = S_V;\n              start = p;\n              break;\n            case S_C:\n              throw new Error(\"elements closed character '/' and '>' must be connected to\");}\n\n        }}\n\n    p++;\n  }\n}\n/**\r\n   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n   */\nfunction appendElement(el, domBuilder, parseStack) {\n  var tagName = el.tagName;\n  var localNSMap = null;\n  var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n  var i = el.length;\n  while (i--) {\n    var a = el[i];\n    var qName = a.qName;\n    var value = a.value;\n    var nsp = qName.indexOf(':');\n    if (nsp > 0) {\n      var prefix = a.prefix = qName.slice(0, nsp);\n      var localName = qName.slice(nsp + 1);\n      var nsPrefix = prefix === 'xmlns' && localName;\n    } else {\n      localName = qName;\n      prefix = null;\n      nsPrefix = qName === 'xmlns' && '';\n    }\n    //can not set prefix,because prefix !== ''\n    a.localName = localName;\n    //prefix == null for no ns prefix attribute\n    if (nsPrefix !== false) {//hack!!\n      if (localNSMap == null) {\n        localNSMap = {};\n        ////console.log(currentNSMap,0)\n        _copy(currentNSMap, currentNSMap = {});\n        ////console.log(currentNSMap,1)\n      }\n      currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n      a.uri = 'http://www.w3.org/2000/xmlns/';\n      domBuilder.startPrefixMapping(nsPrefix, value);\n    }\n  }\n  var i = el.length;\n  while (i--) {\n    a = el[i];\n    var prefix = a.prefix;\n    if (prefix) {//no prefix attribute has no namespace\n      if (prefix === 'xml') {\n        a.uri = 'http://www.w3.org/XML/1998/namespace';\n      }\n      if (prefix !== 'xmlns') {\n        a.uri = currentNSMap[prefix];\n\n        //{//console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n      }\n    }\n  }\n  var nsp = tagName.indexOf(':');\n  if (nsp > 0) {\n    prefix = el.prefix = tagName.slice(0, nsp);\n    localName = el.localName = tagName.slice(nsp + 1);\n  } else {\n    prefix = null; //important!!\n    localName = el.localName = tagName;\n  }\n  //no prefix element has default namespace\n  var ns = el.uri = currentNSMap[prefix || ''];\n  domBuilder.startElement(ns, localName, tagName, el);\n  //endPrefixMapping and startPrefixMapping have not any help for dom builder\n  //localNSMap = null\n  if (el.closed) {\n    domBuilder.endElement(ns, localName, tagName);\n    if (localNSMap) {\n      for (prefix in localNSMap) {\n        domBuilder.endPrefixMapping(prefix);\n      }\n    }\n  } else {\n    el.currentNSMap = currentNSMap;\n    el.localNSMap = localNSMap;\n    parseStack.push(el);\n  }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n  if (/^(?:script|textarea)$/i.test(tagName)) {\n    var elEndStart = source.indexOf('</' + tagName + '>', elStartEnd);\n    var text = source.substring(elStartEnd + 1, elEndStart);\n    if (/[&<]/.test(text)) {\n      if (/^script$/i.test(tagName)) {\n        //if(!/\\]\\]>/.test(text)){\n        //lexHandler.startCDATA();\n        domBuilder.characters(text, 0, text.length);\n        //lexHandler.endCDATA();\n        return elEndStart;\n        //}\n      } //}else{//text area\n      text = text.replace(/&#?\\w+;/g, entityReplacer);\n      domBuilder.characters(text, 0, text.length);\n      return elEndStart;\n      //}\n\n    }\n  }\n  return elStartEnd + 1;\n}\nfunction fixSelfClosed(source, elStartEnd, tagName, closeMap) {\n  //if(tagName in closeMap){\n  var pos = closeMap[tagName];\n  if (pos == null) {\n    ////console.log(tagName)\n    pos = closeMap[tagName] = source.lastIndexOf('</' + tagName + '>');\n  }\n  return pos < elStartEnd;\n  //}\n}\nfunction _copy(source, target) {\n  for (var n in source) {\n    target[n] = source[n];\n  }\n}\nfunction parseDCC(source, start, domBuilder, errorHandler) {//sure start with '<!'\n  var next = source.charAt(start + 2);\n  switch (next) {\n    case '-':\n      if (source.charAt(start + 3) === '-') {\n        var end = source.indexOf('-->', start + 4);\n        //append comment source.substring(4,end)//<!--\n        if (end > start) {\n          domBuilder.comment(source, start + 4, end - start - 4);\n          return end + 3;\n        } else {\n          errorHandler.error(\"Unclosed comment\");\n          return -1;\n        }\n      } else {\n        //error\n        return -1;\n      }\n    default:\n      if (source.substr(start + 3, 6) == 'CDATA[') {\n        var end = source.indexOf(']]>', start + 9);\n        domBuilder.startCDATA();\n        domBuilder.characters(source, start + 9, end - start - 9);\n        domBuilder.endCDATA();\n        return end + 3;\n      }\n      //<!DOCTYPE\n      //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\n      var matchs = split(source, start);\n      var len = matchs.length;\n      if (len > 1 && /!doctype/i.test(matchs[0][0])) {\n        var name = matchs[1][0];\n        var pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];\n        var sysid = len > 4 && matchs[4][0];\n        var lastMatch = matchs[len - 1];\n        domBuilder.startDTD(name, pubid && pubid.replace(/^(['\"])(.*?)\\1$/, '$2'),\n        sysid && sysid.replace(/^(['\"])(.*?)\\1$/, '$2'));\n        domBuilder.endDTD();\n\n        return lastMatch.index + lastMatch[0].length;\n      }}\n\n  return -1;\n}\n\n\nfunction parseInstruction(source, start, domBuilder) {\n  var end = source.indexOf('?>', start);\n  if (end) {\n    var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n    if (match) {\n      var len = match[0].length;\n      domBuilder.processingInstruction(match[1], match[2]);\n      return end + 2;\n    } else {//error\n      return -1;\n    }\n  }\n  return -1;\n}\n\n/**\r\n   * @param source\r\n   */\nfunction ElementAttributes(source) {\n\n}\nElementAttributes.prototype = {\n  setTagName: function setTagName(tagName) {\n    if (!tagNamePattern.test(tagName)) {\n      throw new Error('invalid tagName:' + tagName);\n    }\n    this.tagName = tagName;\n  },\n  add: function add(qName, value, offset) {\n    if (!tagNamePattern.test(qName)) {\n      throw new Error('invalid attribute:' + qName);\n    }\n    this[this.length++] = { qName: qName, value: value, offset: offset };\n  },\n  length: 0,\n  getLocalName: function getLocalName(i) {\n    return this[i].localName;\n  },\n  getOffset: function getOffset(i) {\n    return this[i].offset;\n  },\n  getQName: function getQName(i) {\n    return this[i].qName;\n  },\n  getURI: function getURI(i) {\n    return this[i].uri;\n  },\n  getValue: function getValue(i) {\n    return this[i].value;\n  }\n  //\t,getIndex:function(uri, localName)){\n  //\t\tif(localName){\n  //\n  //\t\t}else{\n  //\t\t\tvar qName = uri\n  //\t\t}\n  //\t},\n  //\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\n  //\tgetType:function(uri,localName){}\n  //\tgetType:function(i){},\n};\n\n\nfunction _set_proto_(thiz, parent) {\n  thiz.__proto__ = parent;\n  return thiz;\n}\nif (!(_set_proto_({}, _set_proto_.prototype) instanceof _set_proto_)) {\n  _set_proto_ = function _set_proto_(thiz, parent) {\n    function p() {\n    };\n    p.prototype = parent;\n    p = new p();\n    for (parent in thiz) {\n      p[parent] = thiz[parent];\n    }\n    return p;\n  };\n}\n\nfunction split(source, start) {\n  var match;\n  var buf = [];\n  var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n  reg.lastIndex = start;\n  reg.exec(source); //skip <\n  while (match = reg.exec(source)) {\n    buf.push(match);\n    if (match[1]) return buf;\n  }\n}\n\nif (true) {\n  exports.XMLReader = XMLReader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 19:
/*!**********************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/libs/xmldom/dom.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*\n               * DOM Level 2\n               * Object DOMException\n               * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n               * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n               */\n\nfunction copy(src, dest) {\n  for (var p in src) {\n    dest[p] = src[p];\n  }\n}\n/**\n   ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n   ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n   */\nfunction _extends(Class, Super) {\n  var pt = Class.prototype;\n  if (Object.create) {\n    var ppt = Object.create(Super.prototype);\n    pt.__proto__ = ppt;\n  }\n  if (!(pt instanceof Super)) {var\n    t = function t() {\n    };;\n    t.prototype = Super.prototype;\n    t = new t();\n    copy(pt, t);\n    Class.prototype = pt = t;\n  }\n  if (pt.constructor != Class) {\n    if (typeof Class != 'function') {\n      //console.error(\"unknow Class:\" + Class)\n    }\n    pt.constructor = Class;\n  }\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml';\n// Node Types\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\n\n// ExceptionCode\nvar ExceptionCode = {};\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\nvar DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\nvar HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\nvar WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\nvar INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\nvar NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\nvar NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\nvar NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\nvar INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\n//level2\nvar INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\nvar SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\nvar INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\nvar NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\nvar INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\n\n\nfunction DOMException(code, message) {\n  if (message instanceof Error) {\n    var error = message;\n  } else {\n    error = this;\n    Error.call(this, ExceptionMessage[code]);\n    this.message = ExceptionMessage[code];\n    if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n  }\n  error.code = code;\n  if (message) this.message = this.message + \": \" + message;\n  return error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode, DOMException);\n/**\n                                    * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n                                    * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n                                    * The items in the NodeList are accessible via an integral index, starting from 0.\n                                    */\nfunction NodeList() {\n};\nNodeList.prototype = {\n  /**\n                        * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n                        * @standard level1\n                        */\n  length: 0,\n  /**\n              * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n              * @standard level1\n              * @param index  unsigned long\n              *   Index into the collection.\n              * @return Node\n              *    The node at the indexth position in the NodeList, or null if that is not a valid index.\n              */\n  item: function item(index) {\n    return this[index] || null;\n  },\n  toString: function toString() {\n    for (var buf = [], i = 0; i < this.length; i++) {\n      serializeToString(this[i], buf);\n    }\n    return buf.join('');\n  } };\n\nfunction LiveNodeList(node, refresh) {\n  this._node = node;\n  this._refresh = refresh;\n  _updateLiveList(this);\n}\nfunction _updateLiveList(list) {\n  var inc = list._node._inc || list._node.ownerDocument._inc;\n  if (list._inc != inc) {\n    var ls = list._refresh(list._node);\n    //console.log(ls.length)\n    __set__(list, 'length', ls.length);\n    copy(ls, list);\n    list._inc = inc;\n  }\n}\nLiveNodeList.prototype.item = function (i) {\n  _updateLiveList(this);\n  return this[i];\n};\n\n_extends(LiveNodeList, NodeList);\n/**\n                                   *\n                                   * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n                                   * NamedNodeMap objects in the DOM are live.\n                                   * used for attributes or DocumentType entities\n                                   */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list, node) {\n  var i = list.length;\n  while (i--) {\n    if (list[i] === node) {\n      return i;\n    }\n  }\n}\n\nfunction _addNamedNode(el, list, newAttr, oldAttr) {\n  if (oldAttr) {\n    list[_findNodeIndex(list, oldAttr)] = newAttr;\n  } else {\n    list[list.length++] = newAttr;\n  }\n  if (el) {\n    newAttr.ownerElement = el;\n    var doc = el.ownerDocument;\n    if (doc) {\n      oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n      _onAddAttribute(doc, el, newAttr);\n    }\n  }\n}\nfunction _removeNamedNode(el, list, attr) {\n  var i = _findNodeIndex(list, attr);\n  if (i >= 0) {\n    var lastIndex = list.length - 1;\n    while (i < lastIndex) {\n      list[i] = list[++i];\n    }\n    list.length = lastIndex;\n    if (el) {\n      var doc = el.ownerDocument;\n      if (doc) {\n        _onRemoveAttribute(doc, el, attr);\n        attr.ownerElement = null;\n      }\n    }\n  } else {\n    throw DOMException(NOT_FOUND_ERR, new Error());\n  }\n}\nNamedNodeMap.prototype = {\n  length: 0,\n  item: NodeList.prototype.item,\n  getNamedItem: function getNamedItem(key) {\n    //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n    //\t\t\treturn null;\n    //\t\t}\n    var i = this.length;\n    while (i--) {\n      var attr = this[i];\n      if (attr.nodeName == key) {\n        return attr;\n      }\n    }\n  },\n  setNamedItem: function setNamedItem(attr) {\n    var el = attr.ownerElement;\n    if (el && el != this._ownerElement) {\n      throw new DOMException(INUSE_ATTRIBUTE_ERR);\n    }\n    var oldAttr = this.getNamedItem(attr.nodeName);\n    _addNamedNode(this._ownerElement, this, attr, oldAttr);\n    return oldAttr;\n  },\n  /* returns Node */\n  setNamedItemNS: function setNamedItemNS(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n    var el = attr.ownerElement,oldAttr;\n    if (el && el != this._ownerElement) {\n      throw new DOMException(INUSE_ATTRIBUTE_ERR);\n    }\n    oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n    _addNamedNode(this._ownerElement, this, attr, oldAttr);\n    return oldAttr;\n  },\n\n  /* returns Node */\n  removeNamedItem: function removeNamedItem(key) {\n    var attr = this.getNamedItem(key);\n    _removeNamedNode(this._ownerElement, this, attr);\n    return attr;\n\n\n  }, // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\n  //for level2\n  removeNamedItemNS: function removeNamedItemNS(namespaceURI, localName) {\n    var attr = this.getNamedItemNS(namespaceURI, localName);\n    _removeNamedNode(this._ownerElement, this, attr);\n    return attr;\n  },\n  getNamedItemNS: function getNamedItemNS(namespaceURI, localName) {\n    var i = this.length;\n    while (i--) {\n      var node = this[i];\n      if (node.localName == localName && node.namespaceURI == namespaceURI) {\n        return node;\n      }\n    }\n    return null;\n  } };\n\n/**\n        * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n        */\nfunction DOMImplementation( /* Object */features) {\n  this._features = {};\n  if (features) {\n    for (var feature in features) {\n      this._features = features[feature];\n    }\n  }\n};\n\nDOMImplementation.prototype = {\n  hasFeature: function hasFeature( /* string */feature, /* string */version) {\n    var versions = this._features[feature.toLowerCase()];\n    if (versions && (!version || version in versions)) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  // Introduced in DOM Level 2:\n  createDocument: function createDocument(namespaceURI, qualifiedName, doctype) {// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n    var doc = new Document();\n    doc.implementation = this;\n    doc.childNodes = new NodeList();\n    doc.doctype = doctype;\n    if (doctype) {\n      doc.appendChild(doctype);\n    }\n    if (qualifiedName) {\n      var root = doc.createElementNS(namespaceURI, qualifiedName);\n      doc.appendChild(root);\n    }\n    return doc;\n  },\n  // Introduced in DOM Level 2:\n  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n    var node = new DocumentType();\n    node.name = qualifiedName;\n    node.nodeName = qualifiedName;\n    node.publicId = publicId;\n    node.systemId = systemId;\n    // Introduced in DOM Level 2:\n    //readonly attribute DOMString        internalSubset;\n\n    //TODO:..\n    //  readonly attribute NamedNodeMap     entities;\n    //  readonly attribute NamedNodeMap     notations;\n    return node;\n  } };\n\n\n\n/**\n        * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n        */\n\nfunction Node() {\n};\n\nNode.prototype = {\n  firstChild: null,\n  lastChild: null,\n  previousSibling: null,\n  nextSibling: null,\n  attributes: null,\n  parentNode: null,\n  childNodes: null,\n  ownerDocument: null,\n  nodeValue: null,\n  namespaceURI: null,\n  prefix: null,\n  localName: null,\n  // Modified in DOM Level 2:\n  insertBefore: function insertBefore(newChild, refChild) {//raises\n    return _insertBefore(this, newChild, refChild);\n  },\n  replaceChild: function replaceChild(newChild, oldChild) {//raises\n    this.insertBefore(newChild, oldChild);\n    if (oldChild) {\n      this.removeChild(oldChild);\n    }\n  },\n  removeChild: function removeChild(oldChild) {\n    return _removeChild(this, oldChild);\n  },\n  appendChild: function appendChild(newChild) {\n    return this.insertBefore(newChild, null);\n  },\n  hasChildNodes: function hasChildNodes() {\n    return this.firstChild != null;\n  },\n  cloneNode: function cloneNode(deep) {\n    return _cloneNode(this.ownerDocument || this, this, deep);\n  },\n  // Modified in DOM Level 2:\n  normalize: function normalize() {\n    var child = this.firstChild;\n    while (child) {\n      var next = child.nextSibling;\n      if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n        this.removeChild(next);\n        child.appendData(next.data);\n      } else {\n        child.normalize();\n        child = next;\n      }\n    }\n  },\n  // Introduced in DOM Level 2:\n  isSupported: function isSupported(feature, version) {\n    return this.ownerDocument.implementation.hasFeature(feature, version);\n  },\n  // Introduced in DOM Level 2:\n  hasAttributes: function hasAttributes() {\n    return this.attributes.length > 0;\n  },\n  lookupPrefix: function lookupPrefix(namespaceURI) {\n    var el = this;\n    while (el) {\n      var map = el._nsMap;\n      //console.dir(map)\n      if (map) {\n        for (var n in map) {\n          if (map[n] == namespaceURI) {\n            return n;\n          }\n        }\n      }\n      el = el.nodeType == 2 ? el.ownerDocument : el.parentNode;\n    }\n    return null;\n  },\n  // Introduced in DOM Level 3:\n  lookupNamespaceURI: function lookupNamespaceURI(prefix) {\n    var el = this;\n    while (el) {\n      var map = el._nsMap;\n      //console.dir(map)\n      if (map) {\n        if (prefix in map) {\n          return map[prefix];\n        }\n      }\n      el = el.nodeType == 2 ? el.ownerDocument : el.parentNode;\n    }\n    return null;\n  },\n  // Introduced in DOM Level 3:\n  isDefaultNamespace: function isDefaultNamespace(namespaceURI) {\n    var prefix = this.lookupPrefix(namespaceURI);\n    return prefix == null;\n  } };\n\n\n\nfunction _xmlEncoder(c) {\n  return c == '<' && '&lt;' ||\n  c == '>' && '&gt;' ||\n  c == '&' && '&amp;' ||\n  c == '\"' && '&quot;' ||\n  '&#' + c.charCodeAt() + ';';\n}\n\n\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\n\n/**\n                                 * @param callback return true for continue,false for break\n                                 * @return boolean true: break visit;\n                                 */\nfunction _visitNode(node, callback) {\n  if (callback(node)) {\n    return true;\n  }\n  if (node = node.firstChild) {\n    do {\n      if (_visitNode(node, callback)) {\n        return true;\n      }\n    } while (node = node.nextSibling);\n  }\n}\n\n\nfunction Document() {\n}\nfunction _onAddAttribute(doc, el, newAttr) {\n  doc && doc._inc++;\n  var ns = newAttr.namespaceURI;\n  if (ns == 'http://www.w3.org/2000/xmlns/') {\n    //update namespace\n    el._nsMap[newAttr.prefix ? newAttr.localName : ''] = newAttr.value;\n  }\n}\nfunction _onRemoveAttribute(doc, el, newAttr, remove) {\n  doc && doc._inc++;\n  var ns = newAttr.namespaceURI;\n  if (ns == 'http://www.w3.org/2000/xmlns/') {\n    //update namespace\n    delete el._nsMap[newAttr.prefix ? newAttr.localName : ''];\n  }\n}\nfunction _onUpdateChild(doc, el, newChild) {\n  if (doc && doc._inc) {\n    doc._inc++;\n    //update childNodes\n    var cs = el.childNodes;\n    if (newChild) {\n      cs[cs.length++] = newChild;\n    } else {\n      //console.log(1)\n      var child = el.firstChild;\n      var i = 0;\n      while (child) {\n        cs[i++] = child;\n        child = child.nextSibling;\n      }\n      cs.length = i;\n    }\n  }\n}\n\n/**\n   * attributes;\n   * children;\n   *\n   * writeable properties:\n   * nodeValue,Attr:value,CharacterData:data\n   * prefix\n   */\nfunction _removeChild(parentNode, child) {\n  var previous = child.previousSibling;\n  var next = child.nextSibling;\n  if (previous) {\n    previous.nextSibling = next;\n  } else {\n    parentNode.firstChild = next;\n  }\n  if (next) {\n    next.previousSibling = previous;\n  } else {\n    parentNode.lastChild = previous;\n  }\n  _onUpdateChild(parentNode.ownerDocument, parentNode);\n  return child;\n}\n/**\n   * preformance key(refChild == null)\n   */\nfunction _insertBefore(parentNode, newChild, nextChild) {\n  var cp = newChild.parentNode;\n  if (cp) {\n    cp.removeChild(newChild); //remove and update\n  }\n  if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    var newFirst = newChild.firstChild;\n    if (newFirst == null) {\n      return newChild;\n    }\n    var newLast = newChild.lastChild;\n  } else {\n    newFirst = newLast = newChild;\n  }\n  var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n  newFirst.previousSibling = pre;\n  newLast.nextSibling = nextChild;\n\n\n  if (pre) {\n    pre.nextSibling = newFirst;\n  } else {\n    parentNode.firstChild = newFirst;\n  }\n  if (nextChild == null) {\n    parentNode.lastChild = newLast;\n  } else {\n    nextChild.previousSibling = newLast;\n  }\n  do {\n    newFirst.parentNode = parentNode;\n  } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n  _onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);\n  //console.log(parentNode.lastChild.nextSibling == null)\n  if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n    newChild.firstChild = newChild.lastChild = null;\n  }\n  return newChild;\n}\nfunction _appendSingleChild(parentNode, newChild) {\n  var cp = newChild.parentNode;\n  if (cp) {\n    var pre = parentNode.lastChild;\n    cp.removeChild(newChild); //remove and update\n    var pre = parentNode.lastChild;\n  }\n  var pre = parentNode.lastChild;\n  newChild.parentNode = parentNode;\n  newChild.previousSibling = pre;\n  newChild.nextSibling = null;\n  if (pre) {\n    pre.nextSibling = newChild;\n  } else {\n    parentNode.firstChild = newChild;\n  }\n  parentNode.lastChild = newChild;\n  _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n  return newChild;\n  //console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n  //implementation : null,\n  nodeName: '#document',\n  nodeType: DOCUMENT_NODE,\n  doctype: null,\n  documentElement: null,\n  _inc: 1,\n\n  insertBefore: function insertBefore(newChild, refChild) {//raises\n    if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n      var child = newChild.firstChild;\n      while (child) {\n        var next = child.nextSibling;\n        this.insertBefore(child, refChild);\n        child = next;\n      }\n      return newChild;\n    }\n    if (this.documentElement == null && newChild.nodeType == 1) {\n      this.documentElement = newChild;\n    }\n\n    return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;\n  },\n  removeChild: function removeChild(oldChild) {\n    if (this.documentElement == oldChild) {\n      this.documentElement = null;\n    }\n    return _removeChild(this, oldChild);\n  },\n  // Introduced in DOM Level 2:\n  importNode: function importNode(importedNode, deep) {\n    return _importNode(this, importedNode, deep);\n  },\n  // Introduced in DOM Level 2:\n  getElementById: function getElementById(id) {\n    var rtv = null;\n    _visitNode(this.documentElement, function (node) {\n      if (node.nodeType == 1) {\n        if (node.getAttribute('id') == id) {\n          rtv = node;\n          return true;\n        }\n      }\n    });\n    return rtv;\n  },\n\n  //document factory method:\n  createElement: function createElement(tagName) {\n    var node = new Element();\n    node.ownerDocument = this;\n    node.nodeName = tagName;\n    node.tagName = tagName;\n    node.childNodes = new NodeList();\n    var attrs = node.attributes = new NamedNodeMap();\n    attrs._ownerElement = node;\n    return node;\n  },\n  createDocumentFragment: function createDocumentFragment() {\n    var node = new DocumentFragment();\n    node.ownerDocument = this;\n    node.childNodes = new NodeList();\n    return node;\n  },\n  createTextNode: function createTextNode(data) {\n    var node = new Text();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createComment: function createComment(data) {\n    var node = new Comment();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createCDATASection: function createCDATASection(data) {\n    var node = new CDATASection();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createProcessingInstruction: function createProcessingInstruction(target, data) {\n    var node = new ProcessingInstruction();\n    node.ownerDocument = this;\n    node.tagName = node.target = target;\n    node.nodeValue = node.data = data;\n    return node;\n  },\n  createAttribute: function createAttribute(name) {\n    var node = new Attr();\n    node.ownerDocument = this;\n    node.name = name;\n    node.nodeName = name;\n    node.localName = name;\n    node.specified = true;\n    return node;\n  },\n  createEntityReference: function createEntityReference(name) {\n    var node = new EntityReference();\n    node.ownerDocument = this;\n    node.nodeName = name;\n    return node;\n  },\n  // Introduced in DOM Level 2:\n  createElementNS: function createElementNS(namespaceURI, qualifiedName) {\n    var node = new Element();\n    var pl = qualifiedName.split(':');\n    var attrs = node.attributes = new NamedNodeMap();\n    node.childNodes = new NodeList();\n    node.ownerDocument = this;\n    node.nodeName = qualifiedName;\n    node.tagName = qualifiedName;\n    node.namespaceURI = namespaceURI;\n    if (pl.length == 2) {\n      node.prefix = pl[0];\n      node.localName = pl[1];\n    } else {\n      //el.prefix = null;\n      node.localName = qualifiedName;\n    }\n    attrs._ownerElement = node;\n    return node;\n  },\n  // Introduced in DOM Level 2:\n  createAttributeNS: function createAttributeNS(namespaceURI, qualifiedName) {\n    var node = new Attr();\n    var pl = qualifiedName.split(':');\n    node.ownerDocument = this;\n    node.nodeName = qualifiedName;\n    node.name = qualifiedName;\n    node.namespaceURI = namespaceURI;\n    node.specified = true;\n    if (pl.length == 2) {\n      node.prefix = pl[0];\n      node.localName = pl[1];\n    } else {\n      //el.prefix = null;\n      node.localName = qualifiedName;\n    }\n    return node;\n  } };\n\n_extends(Document, Node);\n\n\nfunction Element() {\n  this._nsMap = {};\n};\nElement.prototype = {\n  nodeType: ELEMENT_NODE,\n  hasAttribute: function hasAttribute(name) {\n    return this.getAttributeNode(name) != null;\n  },\n  getAttribute: function getAttribute(name) {\n    var attr = this.getAttributeNode(name);\n    return attr && attr.value || '';\n  },\n  getAttributeNode: function getAttributeNode(name) {\n    return this.attributes.getNamedItem(name);\n  },\n  setAttribute: function setAttribute(name, value) {\n    var attr = this.ownerDocument.createAttribute(name);\n    attr.value = attr.nodeValue = \"\" + value;\n    this.setAttributeNode(attr);\n  },\n  removeAttribute: function removeAttribute(name) {\n    var attr = this.getAttributeNode(name);\n    attr && this.removeAttributeNode(attr);\n  },\n\n  //four real opeartion method\n  appendChild: function appendChild(newChild) {\n    if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return this.insertBefore(newChild, null);\n    } else {\n      return _appendSingleChild(this, newChild);\n    }\n  },\n  setAttributeNode: function setAttributeNode(newAttr) {\n    return this.attributes.setNamedItem(newAttr);\n  },\n  setAttributeNodeNS: function setAttributeNodeNS(newAttr) {\n    return this.attributes.setNamedItemNS(newAttr);\n  },\n  removeAttributeNode: function removeAttributeNode(oldAttr) {\n    return this.attributes.removeNamedItem(oldAttr.nodeName);\n  },\n  //get real attribute name,and remove it by removeAttributeNode\n  removeAttributeNS: function removeAttributeNS(namespaceURI, localName) {\n    var old = this.getAttributeNodeNS(namespaceURI, localName);\n    old && this.removeAttributeNode(old);\n  },\n\n  hasAttributeNS: function hasAttributeNS(namespaceURI, localName) {\n    return this.getAttributeNodeNS(namespaceURI, localName) != null;\n  },\n  getAttributeNS: function getAttributeNS(namespaceURI, localName) {\n    var attr = this.getAttributeNodeNS(namespaceURI, localName);\n    return attr && attr.value || '';\n  },\n  setAttributeNS: function setAttributeNS(namespaceURI, qualifiedName, value) {\n    var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n    attr.value = attr.nodeValue = \"\" + value;\n    this.setAttributeNode(attr);\n  },\n  getAttributeNodeNS: function getAttributeNodeNS(namespaceURI, localName) {\n    return this.attributes.getNamedItemNS(namespaceURI, localName);\n  },\n\n  getElementsByTagName: function getElementsByTagName(tagName) {\n    return new LiveNodeList(this, function (base) {\n      var ls = [];\n      _visitNode(base, function (node) {\n        if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)) {\n          ls.push(node);\n        }\n      });\n      return ls;\n    });\n  },\n  getElementsByTagNameNS: function getElementsByTagNameNS(namespaceURI, localName) {\n    return new LiveNodeList(this, function (base) {\n      var ls = [];\n      _visitNode(base, function (node) {\n        if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)) {\n          ls.push(node);\n        }\n      });\n      return ls;\n    });\n  } };\n\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element, Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n  data: '',\n  substringData: function substringData(offset, count) {\n    return this.data.substring(offset, offset + count);\n  },\n  appendData: function appendData(text) {\n    text = this.data + text;\n    this.nodeValue = this.data = text;\n    this.length = text.length;\n  },\n  insertData: function insertData(offset, text) {\n    this.replaceData(offset, 0, text);\n\n  },\n  appendChild: function appendChild(newChild) {\n    //if(!(newChild instanceof CharacterData)){\n    throw new Error(ExceptionMessage[3]);\n    //}\n    return Node.prototype.appendChild.apply(this, arguments);\n  },\n  deleteData: function deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  },\n  replaceData: function replaceData(offset, count, text) {\n    var start = this.data.substring(0, offset);\n    var end = this.data.substring(offset + count);\n    text = start + text + end;\n    this.nodeValue = this.data = text;\n    this.length = text.length;\n  } };\n\n_extends(CharacterData, Node);\nfunction Text() {\n};\nText.prototype = {\n  nodeName: \"#text\",\n  nodeType: TEXT_NODE,\n  splitText: function splitText(offset) {\n    var text = this.data;\n    var newText = text.substring(offset);\n    text = text.substring(0, offset);\n    this.data = this.nodeValue = text;\n    this.length = text.length;\n    var newNode = this.ownerDocument.createTextNode(newText);\n    if (this.parentNode) {\n      this.parentNode.insertBefore(newNode, this.nextSibling);\n    }\n    return newNode;\n  } };\n\n_extends(Text, CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n  nodeName: \"#comment\",\n  nodeType: COMMENT_NODE };\n\n_extends(Comment, CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n  nodeName: \"#cdata-section\",\n  nodeType: CDATA_SECTION_NODE };\n\n_extends(CDATASection, CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, Node);\nfunction XMLSerializer() {\n}\nXMLSerializer.prototype.serializeToString = function (node, attributeSorter) {\n  return node.toString(attributeSorter);\n};\nNode.prototype.toString = function (attributeSorter) {\n  var buf = [];\n  serializeToString(this, buf, attributeSorter);\n  return buf.join('');\n};\nfunction serializeToString(node, buf, attributeSorter, isHTML) {\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      var attrs = node.attributes;\n      var len = attrs.length;\n      var child = node.firstChild;\n      var nodeName = node.tagName;\n      isHTML = htmlns === node.namespaceURI || isHTML;\n      buf.push('<', nodeName);\n      if (attributeSorter) {\n        buf.sort.apply(attrs, attributeSorter);\n      }\n      for (var i = 0; i < len; i++) {\n        serializeToString(attrs.item(i), buf, attributeSorter, isHTML);\n      }\n      if (child || isHTML && !/^(?:meta|link|img|br|hr|input|button)$/i.test(nodeName)) {\n        buf.push('>');\n        //if is cdata child node\n        if (isHTML && /^script$/i.test(nodeName)) {\n          if (child) {\n            buf.push(child.data);\n          }\n        } else {\n          while (child) {\n            serializeToString(child, buf, attributeSorter, isHTML);\n            child = child.nextSibling;\n          }\n        }\n        buf.push('</', nodeName, '>');\n      } else {\n        buf.push('/>');\n      }\n      return;\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      var child = node.firstChild;\n      while (child) {\n        serializeToString(child, buf, attributeSorter, isHTML);\n        child = child.nextSibling;\n      }\n      return;\n    case ATTRIBUTE_NODE:\n      return buf.push(' ', node.name, '=\"', node.value.replace(/[<&\"]/g, _xmlEncoder), '\"');\n    case TEXT_NODE:\n      return buf.push(node.data.replace(/[<&]/g, _xmlEncoder));\n    case CDATA_SECTION_NODE:\n      return buf.push('<![CDATA[', node.data, ']]>');\n    case COMMENT_NODE:\n      return buf.push(\"<!--\", node.data, \"-->\");\n    case DOCUMENT_TYPE_NODE:\n      var pubid = node.publicId;\n      var sysid = node.systemId;\n      buf.push('<!DOCTYPE ', node.name);\n      if (pubid) {\n        buf.push(' PUBLIC \"', pubid);\n        if (sysid && sysid != '.') {\n          buf.push('\" \"', sysid);\n        }\n        buf.push('\">');\n      } else if (sysid && sysid != '.') {\n        buf.push(' SYSTEM \"', sysid, '\">');\n      } else {\n        var sub = node.internalSubset;\n        if (sub) {\n          buf.push(\" [\", sub, \"]\");\n        }\n        buf.push(\">\");\n      }\n      return;\n    case PROCESSING_INSTRUCTION_NODE:\n      return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n    case ENTITY_REFERENCE_NODE:\n      return buf.push('&', node.nodeName, ';');\n    //case ENTITY_NODE:\n    //case NOTATION_NODE:\n    default:\n      buf.push('??', node.nodeName);}\n\n}\nfunction _importNode(doc, node, deep) {\n  var node2;\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      node2 = node.cloneNode(false);\n      node2.ownerDocument = doc;\n    //var attrs = node2.attributes;\n    //var len = attrs.length;\n    //for(var i=0;i<len;i++){\n    //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n    //}\n    case DOCUMENT_FRAGMENT_NODE:\n      break;\n    case ATTRIBUTE_NODE:\n      deep = true;\n      break;\n    //case ENTITY_REFERENCE_NODE:\n    //case PROCESSING_INSTRUCTION_NODE:\n    ////case TEXT_NODE:\n    //case CDATA_SECTION_NODE:\n    //case COMMENT_NODE:\n    //\tdeep = false;\n    //\tbreak;\n    //case DOCUMENT_NODE:\n    //case DOCUMENT_TYPE_NODE:\n    //cannot be imported.\n    //case ENTITY_NODE:\n    //case NOTATION_NODE：\n    //can not hit in level3\n    //default:throw e;\n  }\n  if (!node2) {\n    node2 = node.cloneNode(false); //false\n  }\n  node2.ownerDocument = doc;\n  node2.parentNode = null;\n  if (deep) {\n    var child = node.firstChild;\n    while (child) {\n      node2.appendChild(_importNode(doc, child, deep));\n      child = child.nextSibling;\n    }\n  }\n  return node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction _cloneNode(doc, node, deep) {\n  var node2 = new node.constructor();\n  for (var n in node) {\n    var v = node[n];\n    if (typeof v != 'object') {\n      if (v != node2[n]) {\n        node2[n] = v;\n      }\n    }\n  }\n  if (node.childNodes) {\n    node2.childNodes = new NodeList();\n  }\n  node2.ownerDocument = doc;\n  switch (node2.nodeType) {\n    case ELEMENT_NODE:\n      var attrs = node.attributes;\n      var attrs2 = node2.attributes = new NamedNodeMap();\n      var len = attrs.length;\n      attrs2._ownerElement = node2;\n      for (var i = 0; i < len; i++) {\n        node2.setAttributeNode(_cloneNode(doc, attrs.item(i), true));\n      }\n      break;\n      ;\n    case ATTRIBUTE_NODE:\n      deep = true;}\n\n  if (deep) {\n    var child = node.firstChild;\n    while (child) {\n      node2.appendChild(_cloneNode(doc, child, deep));\n      child = child.nextSibling;\n    }\n  }\n  return node2;\n}\n\nfunction __set__(object, key, value) {\n  object[key] = value;\n}\n//do dynamic\ntry {\n  if (Object.defineProperty) {var\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    getTextContent = function getTextContent(node) {\n      switch (node.nodeType) {\n        case 1:\n        case 11:\n          var buf = [];\n          node = node.firstChild;\n          while (node) {\n            if (node.nodeType !== 7 && node.nodeType !== 8) {\n              buf.push(getTextContent(node));\n            }\n            node = node.nextSibling;\n          }\n          return buf.join('');\n        default:\n          return node.nodeValue;}\n\n    };Object.defineProperty(LiveNodeList.prototype, 'length', { get: function get() {_updateLiveList(this);return this.$$length;} });Object.defineProperty(Node.prototype, 'textContent', { get: function get() {return getTextContent(this);}, set: function set(data) {switch (this.nodeType) {case 1:case 11:while (this.firstChild) {this.removeChild(this.firstChild);}if (data || String(data)) {this.appendChild(this.ownerDocument.createTextNode(data));}break;default: //TODO:\n            this.data = data;this.value = value;this.nodeValue = data;}} });\n    __set__ = function __set__(object, key, value) {\n      //console.log(value)\n      object['$$' + key] = value;\n    };\n  }\n} catch (e) {//ie8\n}\n\nif (true) {\n  exports.DOMImplementation = DOMImplementation;\n  exports.XMLSerializer = XMLSerializer;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!******************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/utils/broadcast.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var Dispatcher = __webpack_require__(/*! ./Dispatcher */ 21);\nmodule.exports = new Dispatcher();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvYnJvYWRjYXN0LmpzIl0sIm5hbWVzIjpbIkRpc3BhdGNoZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXhCO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxVQUFKLEVBQWpCIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIERpc3BhdGNoZXIgPSByZXF1aXJlKFwiLi9EaXNwYXRjaGVyXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRGlzcGF0Y2hlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!*******************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/utils/Dispatcher.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var dispCbs = [];\nvar dispIns = [];\n\nfunction Dispatcher() {\n  dispIns.push(this);\n  dispCbs.push({});\n}\nDispatcher.prototype = {\n  on: function on(type, cb) {\n    var cbtypes = dispCbs[dispIns.indexOf(this)];\n    var cbs = cbtypes[type] = cbtypes[type] || [];\n    if (!~cbs.indexOf(cb)) {\n      cbs.push(cb);\n    }\n  },\n  off: function off(type, cb) {\n    var cbtypes = dispCbs[dispIns.indexOf(this)];\n    var cbs = cbtypes[type] = cbtypes[type] || [];\n    var curTypeCbIdx = cbs.indexOf(cb);\n    if (~curTypeCbIdx) {\n      cbs.splice(curTypeCbIdx, 1);\n    }\n  },\n  fire: function fire(type) {\n    var cbtypes = dispCbs[dispIns.indexOf(this)];\n    var cbs = cbtypes[type] = cbtypes[type] || [];for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}\n    for (var i = 0; i < cbs.length; i++) {\n      cbs[i].apply(null, args);\n    }\n  } };\n\nmodule.exports = Dispatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvRGlzcGF0Y2hlci5qcyJdLCJuYW1lcyI6WyJkaXNwQ2JzIiwiZGlzcElucyIsIkRpc3BhdGNoZXIiLCJwdXNoIiwicHJvdG90eXBlIiwib24iLCJ0eXBlIiwiY2IiLCJjYnR5cGVzIiwiaW5kZXhPZiIsImNicyIsIm9mZiIsImN1clR5cGVDYklkeCIsInNwbGljZSIsImZpcmUiLCJhcmdzIiwiaSIsImxlbmd0aCIsImFwcGx5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHLEVBQWQ7QUFDQSxJQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFFQSxTQUFTQyxVQUFULEdBQXFCO0FBQ3BCRCxTQUFPLENBQUNFLElBQVIsQ0FBYSxJQUFiO0FBQ0FILFNBQU8sQ0FBQ0csSUFBUixDQUFhLEVBQWI7QUFDQTtBQUNERCxVQUFVLENBQUNFLFNBQVgsR0FBdUI7QUFDdEJDLElBRHNCLGNBQ25CQyxJQURtQixFQUNiQyxFQURhLEVBQ1Y7QUFDWCxRQUFJQyxPQUFPLEdBQUdSLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDUSxPQUFSLENBQWdCLElBQWhCLENBQUQsQ0FBckI7QUFDQSxRQUFJQyxHQUFHLEdBQUdGLE9BQU8sQ0FBQ0YsSUFBRCxDQUFQLEdBQWlCRSxPQUFPLENBQUNGLElBQUQsQ0FBUCxJQUFpQixFQUE1QztBQUNBLFFBQUcsQ0FBQyxDQUFDSSxHQUFHLENBQUNELE9BQUosQ0FBWUYsRUFBWixDQUFMLEVBQXFCO0FBQ3BCRyxTQUFHLENBQUNQLElBQUosQ0FBU0ksRUFBVDtBQUNBO0FBQ0QsR0FQcUI7QUFRdEJJLEtBUnNCLGVBUWxCTCxJQVJrQixFQVFaQyxFQVJZLEVBUVQ7QUFDWixRQUFJQyxPQUFPLEdBQUdSLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDUSxPQUFSLENBQWdCLElBQWhCLENBQUQsQ0FBckI7QUFDQSxRQUFJQyxHQUFHLEdBQUdGLE9BQU8sQ0FBQ0YsSUFBRCxDQUFQLEdBQWlCRSxPQUFPLENBQUNGLElBQUQsQ0FBUCxJQUFpQixFQUE1QztBQUNBLFFBQUlNLFlBQVksR0FBR0YsR0FBRyxDQUFDRCxPQUFKLENBQVlGLEVBQVosQ0FBbkI7QUFDQSxRQUFHLENBQUNLLFlBQUosRUFBaUI7QUFDaEJGLFNBQUcsQ0FBQ0csTUFBSixDQUFXRCxZQUFYLEVBQXlCLENBQXpCO0FBQ0E7QUFDRCxHQWZxQjtBQWdCdEJFLE1BaEJzQixnQkFnQmpCUixJQWhCaUIsRUFnQkg7QUFDbEIsUUFBSUUsT0FBTyxHQUFHUixPQUFPLENBQUNDLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQixJQUFoQixDQUFELENBQXJCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHRixPQUFPLENBQUNGLElBQUQsQ0FBUCxHQUFpQkUsT0FBTyxDQUFDRixJQUFELENBQVAsSUFBaUIsRUFBNUMsQ0FGa0Isa0NBQUxTLElBQUssdUVBQUxBLElBQUs7QUFHbEIsU0FBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUdOLEdBQUcsQ0FBQ08sTUFBdkIsRUFBK0JELENBQUMsRUFBaEMsRUFBbUM7QUFDbENOLFNBQUcsQ0FBQ00sQ0FBRCxDQUFILENBQU9FLEtBQVAsQ0FBYSxJQUFiLEVBQW1CSCxJQUFuQjtBQUNBO0FBQ0QsR0F0QnFCLEVBQXZCOztBQXdCQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEIsVUFBakIiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcENicyA9IFtdO1xudmFyIGRpc3BJbnMgPSBbXTtcblxuZnVuY3Rpb24gRGlzcGF0Y2hlcigpe1xuXHRkaXNwSW5zLnB1c2godGhpcyk7XG5cdGRpc3BDYnMucHVzaCh7fSk7XG59XG5EaXNwYXRjaGVyLnByb3RvdHlwZSA9IHtcblx0b24odHlwZSwgY2Ipe1xuXHRcdGxldCBjYnR5cGVzID0gZGlzcENic1tkaXNwSW5zLmluZGV4T2YodGhpcyldO1xuXHRcdGxldCBjYnMgPSBjYnR5cGVzW3R5cGVdID0gKGNidHlwZXNbdHlwZV0gfHwgW10pO1xuXHRcdGlmKCF+Y2JzLmluZGV4T2YoY2IpKXtcblx0XHRcdGNicy5wdXNoKGNiKTtcblx0XHR9XG5cdH0sXG5cdG9mZih0eXBlLCBjYil7XG5cdFx0bGV0IGNidHlwZXMgPSBkaXNwQ2JzW2Rpc3BJbnMuaW5kZXhPZih0aGlzKV07XG5cdFx0bGV0IGNicyA9IGNidHlwZXNbdHlwZV0gPSAoY2J0eXBlc1t0eXBlXSB8fCBbXSk7XG5cdFx0bGV0IGN1clR5cGVDYklkeCA9IGNicy5pbmRleE9mKGNiKTtcblx0XHRpZih+Y3VyVHlwZUNiSWR4KXtcblx0XHRcdGNicy5zcGxpY2UoY3VyVHlwZUNiSWR4LCAxKTtcblx0XHR9XG5cdH0sXG5cdGZpcmUodHlwZSwgLi4uYXJncyl7XG5cdFx0bGV0IGNidHlwZXMgPSBkaXNwQ2JzW2Rpc3BJbnMuaW5kZXhPZih0aGlzKV07XG5cdFx0bGV0IGNicyA9IGNidHlwZXNbdHlwZV0gPSAoY2J0eXBlc1t0eXBlXSB8fCBbXSk7XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGNicy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRjYnNbaV0uYXBwbHkobnVsbCwgYXJncyk7XG5cdFx0fVxuXHR9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!**************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/chat/msgtype.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("module.exports = {\n  IMAGE: \"img\",\n  TEXT: \"txt\",\n  LOCATION: \"location\",\n  VIDEO: \"video\",\n  AUDIO: \"audio\",\n  EMOJI: \"emoji\",\n  FILE: \"chat\",\n  //\n  chatType: {\n    SINGLE_CHAT: \"singleChat\",\n    CHAT_ROOM: \"chatRoom\" } };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9jaGF0L21zZ3R5cGUuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIklNQUdFIiwiVEVYVCIsIkxPQ0FUSU9OIiwiVklERU8iLCJBVURJTyIsIkVNT0pJIiwiRklMRSIsImNoYXRUeXBlIiwiU0lOR0xFX0NIQVQiLCJDSEFUX1JPT00iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDaEJDLE9BQUssRUFBRSxLQURTO0FBRWhCQyxNQUFJLEVBQUUsS0FGVTtBQUdoQkMsVUFBUSxFQUFFLFVBSE07QUFJaEJDLE9BQUssRUFBRSxPQUpTO0FBS2hCQyxPQUFLLEVBQUUsT0FMUztBQU1oQkMsT0FBSyxFQUFFLE9BTlM7QUFPaEJDLE1BQUksRUFBRSxNQVBVO0FBUWhCO0FBQ0FDLFVBQVEsRUFBRTtBQUNUQyxlQUFXLEVBQUUsWUFESjtBQUVUQyxhQUFTLEVBQUUsVUFGRixFQVRNLEVBQWpCIiwiZmlsZSI6IjIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cdElNQUdFOiBcImltZ1wiLFxuXHRURVhUOiBcInR4dFwiLFxuXHRMT0NBVElPTjogXCJsb2NhdGlvblwiLFxuXHRWSURFTzogXCJ2aWRlb1wiLFxuXHRBVURJTzogXCJhdWRpb1wiLFxuXHRFTU9KSTogXCJlbW9qaVwiLFxuXHRGSUxFOiBcImNoYXRcIixcblx0Ly9cblx0Y2hhdFR5cGU6IHtcblx0XHRTSU5HTEVfQ0hBVDogXCJzaW5nbGVDaGF0XCIsXG5cdFx0Q0hBVF9ST09NOiBcImNoYXRSb29tXCIsXG5cdH0sXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 25:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    options.components = Object.assign(components, options.components || {})\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUsIC8qIHZ1ZS1jbGkgb25seSAqL1xuICBjb21wb25lbnRzLCAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIHJlbmRlcmpzIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IGF1dG8gY29tcG9uZW50c1xuICBpZiAoY29tcG9uZW50cykge1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IE9iamVjdC5hc3NpZ24oY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuICBpZiAocmVuZGVyanMpIHtcbiAgICAocmVuZGVyanMuYmVmb3JlQ3JlYXRlIHx8IChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgPSBbXSkpLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzW3JlbmRlcmpzLl9fbW9kdWxlXSA9IHRoaXNcbiAgICB9KTtcbiAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHJlbmRlcmpzKVxuICB9XG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!*******************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/common/js/helper.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n/**\r\n                                                                                                      * 页面跳转\r\n                                                                                                      * @param {Object} url\r\n                                                                                                      */\nfunction to(url) {\n  uni.navigateTo({\n    url: url });\n\n}\n\nfunction toast(icon, text, duration, mask, position) {\n  duration = duration || 1500;\n  mask = mask || false;\n  position = position || false;\n  uni.showToast({\n    icon: icon,\n    title: text,\n    duration: duration,\n    mask: mask,\n    position: position });\n\n}var _default =\n\n\n{\n  to: to,\n  toast: toast };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2pzL2hlbHBlci5qcyJdLCJuYW1lcyI6WyJ0byIsInVybCIsInVuaSIsIm5hdmlnYXRlVG8iLCJ0b2FzdCIsImljb24iLCJ0ZXh0IiwiZHVyYXRpb24iLCJtYXNrIiwicG9zaXRpb24iLCJzaG93VG9hc3QiLCJ0aXRsZSJdLCJtYXBwaW5ncyI6IjtBQUNBOzs7O0FBSUEsU0FBU0EsRUFBVCxDQUFZQyxHQUFaLEVBQWlCO0FBQ2hCQyxLQUFHLENBQUNDLFVBQUosQ0FBZTtBQUNkRixPQUFHLEVBQUVBLEdBRFMsRUFBZjs7QUFHQTs7QUFFRCxTQUFTRyxLQUFULENBQWVDLElBQWYsRUFBcUJDLElBQXJCLEVBQTJCQyxRQUEzQixFQUFxQ0MsSUFBckMsRUFBMkNDLFFBQTNDLEVBQXFEO0FBQ3BERixVQUFRLEdBQUdBLFFBQVEsSUFBSSxJQUF2QjtBQUNBQyxNQUFJLEdBQUdBLElBQUksSUFBSSxLQUFmO0FBQ0FDLFVBQVEsR0FBR0EsUUFBUSxJQUFJLEtBQXZCO0FBQ0FQLEtBQUcsQ0FBQ1EsU0FBSixDQUFjO0FBQ2JMLFFBQUksRUFBRUEsSUFETztBQUViTSxTQUFLLEVBQUVMLElBRk07QUFHYkMsWUFBUSxFQUFFQSxRQUhHO0FBSWJDLFFBQUksRUFBRUEsSUFKTztBQUtiQyxZQUFRLEVBQUVBLFFBTEcsRUFBZDs7QUFPQSxDOzs7QUFHYztBQUNkVCxJQUFFLEVBQUZBLEVBRGM7QUFFZEksT0FBSyxFQUFMQSxLQUZjLEUiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIOmhtemdoui3s+i9rFxyXG4gKiBAcGFyYW0ge09iamVjdH0gdXJsXHJcbiAqL1xyXG5mdW5jdGlvbiB0byh1cmwpIHtcclxuXHR1bmkubmF2aWdhdGVUbyh7XHJcblx0XHR1cmw6IHVybFxyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB0b2FzdChpY29uLCB0ZXh0LCBkdXJhdGlvbiwgbWFzaywgcG9zaXRpb24pIHtcclxuXHRkdXJhdGlvbiA9IGR1cmF0aW9uIHx8IDE1MDA7XHJcblx0bWFzayA9IG1hc2sgfHwgZmFsc2U7XHJcblx0cG9zaXRpb24gPSBwb3NpdGlvbiB8fCBmYWxzZTtcclxuXHR1bmkuc2hvd1RvYXN0KHtcclxuXHRcdGljb246IGljb24sXHJcblx0XHR0aXRsZTogdGV4dCxcclxuXHRcdGR1cmF0aW9uOiBkdXJhdGlvbixcclxuXHRcdG1hc2s6IG1hc2ssXHJcblx0XHRwb3NpdGlvbjogcG9zaXRpb24sXHJcblx0fSlcclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHR0byxcclxuXHR0b2FzdCxcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!**************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/utils/WebIM.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _strophe = _interopRequireDefault(__webpack_require__(/*! ../sdk/libs/strophe */ 15));\n\nvar _connection = _interopRequireDefault(__webpack_require__(/*! ../sdk/connection */ 28));\nvar _WebIMConfig = _interopRequireDefault(__webpack_require__(/*! ./WebIMConfig */ 33));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //import xmldom from \"../sdk/libs/xmldom/dom-parser\";\n\nconsole.group = console.group || {};\nconsole.groupEnd = console.groupEnd || {};\n\nvar window = {};\nvar WebIM = window.WebIM = _connection.default;\nwindow.WebIM.config = _WebIMConfig.default;\n//var DOMParser = window.DOMParser = xmldom.DOMParser;\n//let document = window.document = new DOMParser().parseFromString(\"<?xml version='1.0'?>\\n\", \"text/xml\");\n\nWebIM.isDebug = function (option) {\n  if (option) {\n    WebIM.config.isDebug = option.isDebug;\n    openDebug(WebIM.config.isDebug);\n  }\n\n  function openDebug(value) {\n    function ts() {\n      var d = new Date();\n      var Hours = d.getHours(); // 获取当前小时数(0-23)\n      var Minutes = d.getMinutes(); // 获取当前分钟数(0-59)\n      var Seconds = d.getSeconds(); // 获取当前秒数(0-59)\n      return (Hours < 10 ? \"0\" + Hours : Hours) + \":\" + (Minutes < 10 ? \"0\" + Minutes : Minutes) + \":\" + (Seconds < 10 ? \"0\" + Seconds : Seconds) + \" \";\n    }\n\n    _strophe.default.Strophe.log = function (level, msg) {\n      // console.log(ts(), level, msg);\n    };\n\n    if (value) {\n      _strophe.default.Strophe.Connection.prototype.rawOutput = function (data) {\n        try {\n          // console.group(\"%csend # \" + ts(), \"color: blue; font-size: large\");//这函数在app端不能用\n          console.log(__f__(\"%c\" + data, \"color: blue\", \" at utils\\\\WebIM.js:38\"));\n          // console.groupEnd();\n        }\n        catch (e) {\n          console.log(__f__(e, \" at utils\\\\WebIM.js:42\"));\n        }\n      };\n    } else {\n      _strophe.default.Strophe.Connection.prototype.rawOutput = function () {};\n    }\n\n  }\n};\n\n/**\r\n    * Set autoSignIn as true (autoSignInName and autoSignInPwd are configured below),\r\n    * You can auto signed in each time when you refresh the page in dev model.\r\n    */\nWebIM.config.autoSignIn = false;\nif (WebIM.config.autoSignIn) {\n  WebIM.config.autoSignInName = \"lwz2\";\n  WebIM.config.autoSignInPwd = \"1\";\n}\n\n\n// var stropheConn = new window.Strophe.Connection(\"ws://im-api.easemob.com/ws/\", {\n//                 inactivity: 30,\n//                 maxRetries: 5,\n//                 pollingTime: 4500\n//             });\n//\n// stropheConn.connect(\n//   '$t$' + 'YWMtmbQEBKKIEeaGmMtXyg5n1wAAAVlkQvGO2WOJGlMCEJKM4VV9GCMnb_XLCXU',\n//   function() {\n//     console.log(arguments, 'ggogogo');\n//   }, stropheConn.wait, stropheConn.hold);\nWebIM.parseEmoji = function (msg) {\n  if (typeof WebIM.Emoji === \"undefined\" || typeof WebIM.Emoji.map === \"undefined\") {\n    return msg;\n  }\n  var emoji = WebIM.Emoji,\n  reg = null;\n  var msgList = [];\n  var objList = [];\n  for (var face in emoji.map) {\n    if (emoji.map.hasOwnProperty(face)) {\n      while (msg.indexOf(face) > -1) {\n        msg = msg.replace(face, \"^\" + emoji.map[face] + \"^\");\n      }\n    }\n  }\n  var ary = msg.split(\"^\");\n  var reg = /^e.*g$/;\n  for (var i = 0; i < ary.length; i++) {\n    if (ary[i] != \"\") {\n      msgList.push(ary[i]);\n    }\n  }\n  for (var i = 0; i < msgList.length; i++) {\n    if (reg.test(msgList[i])) {\n      var obj = {};\n      obj.data = msgList[i];\n      obj.type = \"emoji\";\n      objList.push(obj);\n    } else\n    {\n      var obj = {};\n      obj.data = msgList[i];\n      obj.type = \"txt\";\n      objList.push(obj);\n    }\n  }\n  return objList;\n};\n\nWebIM.time = function () {\n  var date = new Date();\n  var Hours = date.getHours();\n  var Minutes = date.getMinutes();\n  var Seconds = date.getSeconds();\n  var time = date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate() + \" \" + (\n  Hours < 10 ? \"0\" + Hours : Hours) + \":\" + (Minutes < 10 ? \"0\" + Minutes : Minutes) + \":\" + (Seconds < 10 ? \"0\" + Seconds : Seconds);\n  return time;\n};\n\nWebIM.Emoji = {\n  path: \"../../../../../images/faces/\",\n  map: {\n    \"[):]\": \"ee_1.png\",\n    \"[:D]\": \"ee_2.png\",\n    \"[;)]\": \"ee_3.png\",\n    \"[:-o]\": \"ee_4.png\",\n    \"[:p]\": \"ee_5.png\",\n    \"[(H)]\": \"ee_6.png\",\n    \"[:@]\": \"ee_7.png\",\n    \"[:s]\": \"ee_8.png\",\n    \"[:$]\": \"ee_9.png\",\n    \"[:(]\": \"ee_10.png\",\n    \"[:'(]\": \"ee_11.png\",\n    \"[<o)]\": \"ee_12.png\",\n    \"[(a)]\": \"ee_13.png\",\n    \"[8o|]\": \"ee_14.png\",\n    \"[8-|]\": \"ee_15.png\",\n    \"[+o(]\": \"ee_16.png\",\n    \"[|-)]\": \"ee_17.png\",\n    \"[:|]\": \"ee_18.png\",\n    \"[*-)]\": \"ee_19.png\",\n    \"[:-#]\": \"ee_20.png\",\n    \"[^o)]\": \"ee_21.png\",\n    \"[:-*]\": \"ee_22.png\",\n    \"[8-)]\": \"ee_23.png\",\n    \"[del]\": \"btn_del.png\",\n    \"[(|)]\": \"ee_24.png\",\n    \"[(u)]\": \"ee_25.png\",\n    \"[(S)]\": \"ee_26.png\",\n    \"[(*)]\": \"ee_27.png\",\n    \"[(#)]\": \"ee_28.png\",\n    \"[(R)]\": \"ee_29.png\",\n    \"[({)]\": \"ee_30.png\",\n    \"[(})]\": \"ee_31.png\",\n    \"[(k)]\": \"ee_32.png\",\n    \"[(F)]\": \"ee_33.png\",\n    \"[(W)]\": \"ee_34.png\",\n    \"[(D)]\": \"ee_35.png\" } };\n\n\n\nWebIM.EmojiObj = {\n  // 相对 emoji.js 路径\n  path: \"/static/images/faces/\",\n  map1: {\n    \"[):]\": \"ee_1.png\",\n    \"[:D]\": \"ee_2.png\",\n    \"[;)]\": \"ee_3.png\",\n    \"[:-o]\": \"ee_4.png\",\n    \"[:p]\": \"ee_5.png\",\n    \"[(H)]\": \"ee_6.png\",\n    \"[:@]\": \"ee_7.png\" },\n\n  map2: {\n    \"[:s]\": \"ee_8.png\",\n    \"[:$]\": \"ee_9.png\",\n    \"[:(]\": \"ee_10.png\",\n    \"[:'(]\": \"ee_11.png\",\n    \"[<o)]\": \"ee_12.png\",\n    \"[(a)]\": \"ee_13.png\",\n    \"[8o|]\": \"ee_14.png\" },\n\n  map3: {\n    \"[8-|]\": \"ee_15.png\",\n    \"[+o(]\": \"ee_16.png\",\n    \"[|-)]\": \"ee_17.png\",\n    \"[:|]\": \"ee_18.png\",\n    \"[*-)]\": \"ee_19.png\",\n    \"[:-#]\": \"ee_20.png\",\n    \"[del]\": \"del.png\" },\n\n  map4: {\n    \"[^o)]\": \"ee_21.png\",\n    \"[:-*]\": \"ee_22.png\",\n    \"[8-)]\": \"ee_23.png\",\n    \"[(|)]\": \"ee_24.png\",\n    \"[(u)]\": \"ee_25.png\",\n    \"[(S)]\": \"ee_26.png\",\n    \"[(*)]\": \"ee_27.png\" },\n\n  map5: {\n    \"[(#)]\": \"ee_28.png\",\n    \"[(R)]\": \"ee_29.png\",\n    \"[({)]\": \"ee_30.png\",\n    \"[(})]\": \"ee_31.png\",\n    \"[(k)]\": \"ee_32.png\",\n    \"[(F)]\": \"ee_33.png\",\n    \"[(W)]\": \"ee_34.png\",\n    \"[(D)]\": \"ee_35.png\" },\n\n  map6: {\n    \"[del]\": \"del.png\" } };\n\n\n\n// wx.connectSocket({url: WebIM.config.xmppURL, method: \"GET\"})\n\nWebIM.conn = new WebIM.connection({\n  isMultiLoginSessions: WebIM.config.isMultiLoginSessions,\n  https: typeof WebIM.config.https === \"boolean\" ? WebIM.config.https : location.protocol === \"https:\",\n  url: WebIM.config.xmppURL,\n  apiUrl: WebIM.config.apiURL,\n  isAutoLogin: false,\n  heartBeatWait: WebIM.config.heartBeatWait,\n  autoReconnectNumMax: WebIM.config.autoReconnectNumMax,\n  autoReconnectInterval: WebIM.config.autoReconnectInterval });\n\n\n// async response\n// WebIM.conn.listen({\n//   onOpened: () => dispatch({type: Types.ON_OPEND})\n// })\n\n// export default WebIM;\nmodule.exports = {\n  \"default\": WebIM };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!*****************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/connection.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _strophe = _interopRequireDefault(__webpack_require__(/*! ./libs/strophe */ 15));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nvar WebIM = {};\nvar Strophe = _strophe.default.Strophe;\n\nStrophe.log = function (level, msg) {\n  // console.log(ts(), level, msg);\n};\nvar xmldom = __webpack_require__(/*! ./libs/xmldom/dom-parser */ 17);\n// //console.log('xml',xmldom, typeof xmldom.DOMParser);\nvar DOMParser = xmldom.DOMParser;\nvar window = {};\nvar _version = \"1.1.3\";\nvar _code = __webpack_require__(/*! ./status */ 29).code;\nvar _utils = __webpack_require__(/*! ./utils */ 30).utils;\nvar _msg = __webpack_require__(/*! ./message */ 31);\nvar _message = _msg._msg;\nvar _msgHash = {};\nvar Queue = __webpack_require__(/*! ./queue */ 32).Queue;\nvar location = window.location || {\n  protocol: \"https:\" };\n\nwindow.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\nif (window.XDomainRequest) {\n  XDomainRequest.prototype.oldsend = XDomainRequest.prototype.send;\n  XDomainRequest.prototype.send = function () {\n    XDomainRequest.prototype.oldsend.apply(this, arguments);\n    this.readyState = 2;\n  };\n}\n\nStrophe.Request.prototype._newXHR = function () {\n  var xhr = _utils.xmlrequest(true);\n  if (xhr.overrideMimeType) {\n    xhr.overrideMimeType(\"text/xml\");\n  }\n  // use Function.bind() to prepend ourselves as an argument\n  xhr.onreadystatechange = this.func.bind(null, this);\n  return xhr;\n};\n\nStrophe.Websocket.prototype._onSocketClose = function (e) {\n  // if(e.code && e.code == 1000){\n  //\n  // }\n  // else{\n  // \treOpenEntry();\n  // }\n};\n\n/**\r\n    *\r\n    * Strophe.Websocket has a bug while logout:\r\n    * 1.send: <presence xmlns='jabber:client' type='unavailable'/> is ok;\r\n    * 2.send: <close xmlns='urn:ietf:params:xml:ns:xmpp-framing'/> will cause a problem,log as follows:\r\n    * WebSocket connection to 'ws://im-api.easemob.com/ws/' failed: Data frame received after close_connect @ strophe.js:5292connect @ strophe.js:2491_login @ websdk-1.1.2.js:278suc @ websdk-1.1.2.js:636xhr.onreadystatechange @ websdk-1.1.2.js:2582\r\n    * 3 \"Websocket error [object Event]\"\r\n    * _changeConnectStatus\r\n    * onError Object {type: 7, msg: \"The WebSocket connection could not be established or was disconnected.\", reconnect: true}\r\n    *\r\n    * this will trigger socket.onError, therefore _doDisconnect again.\r\n    * Fix it by overide  _onMessage\r\n    */\nStrophe.Websocket.prototype._onMessage = function (message) {\n  var elem, data;\n  // WebIM && WebIM.config.isDebug && //console.log(WebIM.utils.ts() + 'recv:', message.data);\n  try {\n    if (WebIM && WebIM.config.isDebug) {\n      console.group(\"%crecv # \", \"color: green; font-size: large\");\n      console.log(__f__(\"%c\" + message.data, \"color: green\", \" at sdk\\\\connection.js:70\"));\n      console.groupEnd();\n    }\n  } catch (e) {\n\n  } // console.log('%crecv' + message.data, 'color: green');\n  // check for closing stream\n  // var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n  // if (message.data === close) {\n  //     this._conn.rawInput(close);\n  //     this._conn.xmlInput(message);\n  //     if (!this._conn.disconnecting) {\n  //         this._conn._doDisconnect();\n  //     }\n  //     return;\n  //\n  // send and receive close xml: <close xmlns='urn:ietf:params:xml:ns:xmpp-framing'/>\n  // so we can't judge whether message.data equals close by === simply.\n  // console.log('DOMParser connection')\n  if (message.data.indexOf(\"<close \") === 0) {\n    elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n    var see_uri = elem.getAttribute(\"see-other-uri\");\n    if (see_uri) {\n      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n      this._conn.reset();\n      this._conn.service = see_uri;\n      this._connect();\n    } else {\n      // if (!this._conn.disconnecting) {\n      this._conn._doDisconnect(\"receive <close> from server\");\n      // }\n    }\n    return;\n  } else if (message.data.search(\"<open \") === 0) {\n    // This handles stream restarts\n    elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n    if (!this._handleStreamStart(elem)) {\n      return;\n    }\n  } else {\n    data = this._streamWrap(message.data);\n    elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n  }\n\n  // console.log('DOMParser connection ed')\n  if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n    return;\n  }\n\n  // handle unavailable presence stanza before disconnecting\n  if (this._conn.disconnecting &&\n  elem.firstChild.nodeName === \"presence\" &&\n  elem.firstChild.getAttribute(\"type\") === \"unavailable\")\n  {\n    this._conn.xmlInput(elem);\n    this._conn.rawInput(Strophe.serialize(elem));\n    // if we are already disconnecting we will ignore the unavailable stanza and\n    // wait for the </stream:stream> tag before we close the connection\n    return;\n  }\n  this._conn._dataRecv(elem, message.data);\n};\n\n\nfunction _listenNetwork(onlineCallback, offlineCallback) {\n  if (window.addEventListener) {\n    window.addEventListener(\"online\", onlineCallback);\n    window.addEventListener(\"offline\", offlineCallback);\n\n  } else if (window.attachEvent) {\n    if (document.body) {\n      document.body.attachEvent(\"ononline\", onlineCallback);\n      document.body.attachEvent(\"onoffline\", offlineCallback);\n    } else {\n      window.attachEvent(\"load\", function () {\n        document.body.attachEvent(\"ononline\", onlineCallback);\n        document.body.attachEvent(\"onoffline\", offlineCallback);\n      });\n    }\n  } else {\n    /* var onlineTmp = window.ononline;\r\n           var offlineTmp = window.onoffline;\r\n           window.attachEvent('ononline', function () {\r\n           try {\r\n           typeof onlineTmp === 'function' && onlineTmp();\r\n           } catch ( e ) {}\r\n           onlineCallback();\r\n           });\r\n           window.attachEvent('onoffline', function () {\r\n           try {\r\n           typeof offlineTmp === 'function' && offlineTmp();\r\n           } catch ( e ) {}\r\n           offlineCallback();\r\n           });*/\n  }\n}\n\nfunction _parseRoom(result) {\n  var rooms = [];\n  var items = result.getElementsByTagName(\"item\");\n  if (items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var roomJid = item.getAttribute(\"jid\");\n      var tmp = roomJid.split(\"@\")[0];\n      var room = {\n        jid: roomJid,\n        name: item.getAttribute(\"name\"),\n        roomId: tmp.split(\"_\")[1] };\n\n      rooms.push(room);\n    }\n  }\n  return rooms;\n}\n\nfunction _parseRoomOccupants(result) {\n  var occupants = [];\n  var items = result.getElementsByTagName(\"item\");\n  if (items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var room = {\n        jid: item.getAttribute(\"jid\"),\n        name: item.getAttribute(\"name\") };\n\n      occupants.push(room);\n    }\n  }\n  return occupants;\n}\n\nfunction _parseResponseMessage(msginfo) {\n  var parseMsgData = {\n    errorMsg: true,\n    data: [] };\n\n  // //console.log('msginfo', msginfo)\n  var msgBodies = msginfo.getElementsByTagName(\"body\");\n  // //console.log('msginfo', msgBodies)\n  if (msgBodies) {\n    for (var i = 0; i < msgBodies.length; i++) {\n      var msgBody = msgBodies[i];\n      var childNodes = msgBody.childNodes;\n      if (childNodes && childNodes.length > 0) {\n        var childNode = msgBody.childNodes[0];\n        if (childNode.nodeType == Strophe.ElementType.TEXT) {\n          var jsondata = childNode.wholeText || childNode.nodeValue;\n          jsondata = jsondata.replace(\"\\n\", \"<br>\");\n          try {\n            var data = JSON.parse(jsondata);\n            parseMsgData.errorMsg = false;\n            parseMsgData.data = [data];\n          } catch (e) {}\n        }\n      }\n    }\n    var delayTags = msginfo.getElementsByTagName(\"delay\");\n    if (delayTags && delayTags.length > 0) {\n      var delayTag = delayTags[0];\n      var delayMsgTime = delayTag.getAttribute(\"stamp\");\n      if (delayMsgTime) {\n        parseMsgData.delayTimeStamp = delayMsgTime;\n      }\n    }\n  } else {\n    var childrens = msginfo.childNodes;\n    if (childrens && childrens.length > 0) {\n      var child = msginfo.childNodes[0];\n      if (child.nodeType == Strophe.ElementType.TEXT) {\n        try {\n          var _data = eval(\"(\" + child.nodeValue + \")\");\n          parseMsgData.errorMsg = false;\n          parseMsgData.data = [_data];\n        } catch (e) {}\n      }\n    }\n  }\n  return parseMsgData;\n}\n\nfunction _parseNameFromJidFn(jid, domain) {\n  var tempstr = jid;\n  var findex = tempstr.indexOf(\"_\");\n  domain = domain || \"\";\n  if (findex !== -1) {\n    tempstr = tempstr.substring(findex + 1);\n  }\n  var atindex = tempstr.indexOf(\"@\" + domain);\n  if (atindex !== -1) {\n    tempstr = tempstr.substring(0, atindex);\n  }\n  return tempstr;\n}\n\nfunction _parseFriend(queryTag, conn, from) {\n  var rouster = [];\n  var items = queryTag.getElementsByTagName(\"item\");\n  if (items) {var _loop = function _loop(\n    i) {\n      var groups = [];\n      var item = items[i];\n      var jid = item.getAttribute(\"jid\");\n      if (!jid) {\n        return \"continue\";\n      }\n      var subscription = item.getAttribute(\"subscription\");\n      var friend = {\n        subscription: subscription,\n        jid: jid };\n\n      var ask = item.getAttribute(\"ask\");\n      if (ask) {\n        friend.ask = ask;\n      }\n      var name = item.getAttribute(\"name\");\n      if (name) {\n        friend.name = name;\n      } else {\n        friend.name = _parseNameFromJidFn(jid);\n      }\n      Strophe.forEachChild(item, \"group\", function (group) {\n        groups.push(Strophe.getText(group));\n      });\n      friend.groups = groups;\n      rouster.push(friend);\n      // B 同意之后 -> B 订阅 A\n      if (conn && subscription == \"from\") {\n        conn.subscribe({\n          toJid: jid });\n\n      }\n      if (conn && subscription == \"to\") {\n        conn.subscribed({\n          toJid: jid });\n\n      }};for (var i = 0; i < items.length; i++) {var _ret = _loop(i);if (_ret === \"continue\") continue;\n    }\n  }\n  return rouster;\n}\n\nfunction _parseMessageType(msginfo) {\n  var msgtype = \"normal\";\n  var receiveinfo = msginfo.getElementsByTagName(\"received\");\n  if (receiveinfo && receiveinfo.length > 0 && receiveinfo[0].namespaceURI === \"urn:xmpp:receipts\") {\n    msgtype = \"received\";\n  } else {\n    var inviteinfo = msginfo.getElementsByTagName(\"invite\");\n    if (inviteinfo && inviteinfo.length > 0) {\n      msgtype = \"invite\";\n    }\n  }\n  return msgtype;\n}\n\nfunction _handleMessageQueue(conn) {\n  for (var i in _msgHash) {\n    if (Object.hasOwnProperty.call(_msgHash, i)) {\n      _msgHash[i].send(conn);\n    }\n  }\n}\n\nfunction _loginCallback(status, msg, conn) {\n  var error;\n  var conflict = msg === \"conflict\";\n  if (status == Strophe.Status.CONNFAIL) {\n    // client offline, ping/pong timeout, server quit, server offline\n    error = {\n      type: _code.WEBIM_CONNCTION_SERVER_CLOSE_ERROR, // 客户端网络离线\n      msg: msg };\n\n    conflict && (error.conflict = true);\n    conn.onError(error);\n  } else if (status == Strophe.Status.ATTACHED || status == Strophe.Status.CONNECTED) {\n    conn.autoReconnectNumTotal = 0;\n    // client should limit the speed of sending ack messages  up to 5/s\n    conn.intervalId = setInterval(function () {\n      conn.handelSendQueue();\n    }, 200);\n    var handleMessage = function handleMessage(msginfo) {\n      var type = _parseMessageType(msginfo);\n      if (type === \"received\") {\n        conn.handleReceivedMessage(msginfo);\n        return true;\n      } else if (type === \"invite\") {\n        conn.handleInviteMessage(msginfo);\n        return true;\n      }\n      conn.handleMessage(msginfo);\n      return true;\n    };\n    var handlePresence = function handlePresence(msginfo) {\n      conn.handlePresence(msginfo);\n      return true;\n    };\n    // let handlePing = function(msginfo){\n    // \tconn.handlePing(msginfo);\n    // \treturn true;\n    // };\n    var handleIqRoster = function handleIqRoster(msginfo) {\n      conn.handleIqRoster(msginfo);\n      return true;\n    };\n    var handleIqPrivacy = function handleIqPrivacy(msginfo) {\n      conn.handleIqPrivacy(msginfo);\n      return true;\n    };\n    var handleIq = function handleIq(msginfo) {\n      conn.handleIq(msginfo);\n      return true;\n    };\n    conn.addHandler(handleMessage, null, \"message\", null, null, null);\n    conn.addHandler(handlePresence, null, \"presence\", null, null, null);\n    // conn.addHandler(handlePing, \"urn:xmpp:ping\", \"iq\", \"get\", null, null);\n    conn.addHandler(handleIqRoster, \"jabber:iq:roster\", \"iq\", \"set\", null, null);\n    conn.addHandler(handleIqPrivacy, \"jabber:iq:privacy\", \"iq\", \"set\", null, null);\n    conn.addHandler(handleIq, null, \"iq\", null, null, null);\n\n    conn.context.status = _code.STATUS_OPENED;\n\n    var supportRecMessage = [\n    _code.WEBIM_MESSAGE_REC_TEXT,\n    _code.WEBIM_MESSAGE_REC_EMOJI];\n\n    var supportSedMessage = [\n    _code.WEBIM_MESSAGE_SED_TEXT];\n\n    if (_utils.isCanDownLoadFile) {\n      supportRecMessage.push(_code.WEBIM_MESSAGE_REC_PHOTO);\n      supportRecMessage.push(_code.WEBIM_MESSAGE_REC_AUDIO_FILE);\n    }\n    if (_utils.isCanUploadFile) {\n      supportSedMessage.push(_code.WEBIM_MESSAGE_REC_PHOTO);\n      supportSedMessage.push(_code.WEBIM_MESSAGE_REC_AUDIO_FILE);\n    }\n    conn.notifyVersion();\n    conn.retry && _handleMessageQueue(conn);\n    conn.heartBeat();\n    conn.isAutoLogin && conn.setPresence();\n    conn.onOpened({\n      canReceive: supportRecMessage,\n      canSend: supportSedMessage,\n      accessToken: conn.context.accessToken });\n\n    conn.onSocketConnected();\n  } else if (status == Strophe.Status.DISCONNECTING) {\n    if (conn.isOpened()) {\n      if (conn.autoReconnectNumTotal < conn.autoReconnectNumMax) {\n        if (conn.autoReconnectNumTotal == 0) {conn.onReconnect();}\n        conn.reconnect();\n        return;\n      } else if (conn.autoReconnectNumTotal == conn.autoReconnectNumMax) {\n        console.log(__f__(\"Err 3\", \" at sdk\\\\connection.js:424\"));\n        error = {\n          type: _code.WEBIM_CONNCTION_DISCONNECTED };\n\n        conn.onError(error);\n        conn.context.status = _code.STATUS_CLOSED;\n        conn.clear();\n        conn.onClosed();\n      }\n      conn.stopHeartBeat();\n      // error = {\n      // \ttype: _code.WEBIM_CONNCTION_SERVER_CLOSE_ERROR,\n      // \tmsg: msg\n      // };\n      // conflict && (error.conflict = true);\n      // conn.onError(error);\n    }\n    conn.context.status = _code.STATUS_CLOSING;\n  } else if (status == Strophe.Status.DISCONNECTED) {\n    if (conn.isOpened()) {\n      if (conn.autoReconnectNumTotal < conn.autoReconnectNumMax) {\n        if (conn.autoReconnectNumTotal == 0) {conn.onReconnect();}\n        conn.reconnect();\n        return;\n      } else if (conn.autoReconnectNumTotal == conn.autoReconnectNumMax) {\n        conn.context.status = _code.STATUS_CLOSED;\n        conn.clear();\n        conn.onClosed();\n        conn.stopHeartBeat();\n      }\n      console.log(__f__(\"Err 4\", \" at sdk\\\\connection.js:454\"));\n      error = {\n        type: _code.WEBIM_CONNCTION_DISCONNECTED };\n\n      conn.onError(error);\n    }\n    conn.context.status = _code.STATUS_CLOSED;\n  } else if (status == Strophe.Status.AUTHFAIL) {\n    error = {\n      type: _code.WEBIM_CONNCTION_AUTH_ERROR };\n\n    conflict && (error.conflict = true);\n    conn.onError(error);\n    conn.clear();\n    conn.stopHeartBeat();\n    wx.closeSocket();\n  } else if (status == Strophe.Status.ERROR) {\n    conn.context.status = _code.STATUS_ERROR;\n    error = {\n      type: _code.WEBIM_CONNCTION_SERVER_ERROR };\n\n    conflict && (error.conflict = true);\n    conn.onError(error);\n    conn.stopHeartBeat();\n  }\n}\n\nfunction _login(options, conn) {\n  var stropheConn = null;\n  var accessToken = options.access_token || \"\";\n  if (accessToken == \"\") {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_OPEN_USERGRID_ERROR,\n      data: options });\n\n    return;\n  }\n  conn.context.accessToken = options.access_token;\n  conn.context.accessTokenExpires = options.expires_in;\n  stropheConn = new Strophe.Connection(conn.url, {\n    inactivity: conn.inactivity,\n    maxRetries: conn.maxRetries,\n    pollingTime: conn.pollingTime });\n\n  conn.context.stropheConn = stropheConn;\n  if (conn.route) {\n    stropheConn.connect(conn.context.jid, \"$t$\" + accessToken, callback, conn.wait, conn.hold, conn.route);\n  } else {\n    stropheConn.connect(conn.context.jid, \"$t$\" + accessToken, callback, conn.wait, conn.hold);\n  }\n\n  function callback(status, msg) {\n    console.log(__f__(\"connection stat change\", status, msg, \" at sdk\\\\connection.js:506\"));\n    _loginCallback(status, msg, conn);\n  }\n}\n\nfunction _getJid(options, conn) {\n  var jid = options.toJid || \"\";\n  if (jid === \"\") {\n    var appKey = conn.context.appKey || \"\";\n    var toJid = appKey + \"_\" + options.to + \"@\" + conn.domain;\n    if (options.resource) {\n      toJid = toJid + \"/\" + options.resource;\n    }\n    jid = toJid;\n  }\n  return jid;\n}\n\nfunction _getJidByName(name, conn) {\n  return _getJid({\n    to: name },\n  conn);\n}\n\nfunction _validCheck(options, conn) {\n  options = options || {};\n  if (options.user == \"\") {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_USER_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n  var user = options.user + \"\" || \"\";\n  var appKey = options.appKey || \"\";\n  var devInfos = appKey.split(\"#\");\n\n  if (devInfos.length !== 2) {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n  var orgName = devInfos[0];\n  var appName = devInfos[1];\n\n  if (!orgName) {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n  if (!appName) {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n\n  var jid = appKey + \"_\" + user.toLowerCase() + \"@\" + conn.domain;\n  var resource = options.resource || \"webim\";\n  if (conn.isMultiLoginSessions) {\n    resource += user + new Date().getTime() + Math.floor(Math.random().toFixed(6) * 1000000);\n  }\n  conn.context.jid = jid + \"/\" + resource;\n  /* jid: {appkey}_{username}@domain/resource*/\n  conn.context.userId = user;\n  conn.context.appKey = appKey;\n  conn.context.appName = appName;\n  conn.context.orgName = orgName;\n\n  return true;\n}\n\nfunction _getXmppUrl(baseUrl, https) {\n  if (/^(ws|http)s?:\\/\\/?/.test(baseUrl)) {\n    return baseUrl;\n  }\n  var url = {\n    prefix: \"http\",\n    base: \"://\" + baseUrl,\n    suffix: \"/http-bind/\" };\n\n  if (https && _utils.isSupportWss) {\n    url.prefix = \"wss\";\n    url.suffix = \"/ws/\";\n  } else if (https) {\n    url.prefix = \"https\";\n  } else if (window.WebSocket) {\n    url.prefix = \"ws\";\n    url.suffix = \"/ws/\";\n  }\n  return url.prefix + url.base + url.suffix;\n}\n\n\n\n\n\n// CLASS\nfunction connection(options) {\n  if (!(this instanceof connection)) {\n    return new connection(options);\n  }\n  options = options || {};\n  this.isMultiLoginSessions = options.isMultiLoginSessions || false;\n  this.wait = options.wait || 30;\n  this.retry = options.retry || false;\n  this.https = options.https || location.protocol === \"https:\";\n  this.url = _getXmppUrl(options.url, this.https);\n  this.hold = options.hold || 1;\n  this.route = options.route || null;\n  this.domain = options.domain || \"easemob.com\";\n  this.inactivity = options.inactivity || 30;\n  this.heartBeatWait = options.heartBeatWait || 4500;\n  this.maxRetries = options.maxRetries || 5;\n  this.isAutoLogin = options.isAutoLogin !== false;\n  this.pollingTime = options.pollingTime || 800;\n  this.stropheConn = false;\n  this.autoReconnectNumMax = options.autoReconnectNumMax || 0;\n  this.autoReconnectNumTotal = 0;\n  this.autoReconnectInterval = options.autoReconnectInterval || 0;\n  this.context = {\n    status: _code.STATUS_INIT };\n\n  this.apiUrl = options.apiUrl || \"\";\n  // todo 接收的事件，放到数组里的时候，加上g.isInBackground字段。每帧执行一个事件的时候，如果g.isInBackground=true,就pass\n  this.sendQueue = new Queue(); // 接收到的事件队列\n  this.intervalId = null;\n  this.orgName = \"\";\n  this.appName = \"\";\n  this.token = \"\";\n}\n\nconnection.prototype.handelSendQueue = function () {\n  var options = this.sendQueue.pop();\n  if (options !== null) {\n    this.sendReceiptsMessage(options);\n  }\n};\nconnection.prototype.listen = function (options) {\n  options.url && (this.url = _getXmppUrl(options.url, this.https));\n  this.onOpened = options.onOpened || _utils.emptyfn;\n  this.onClosed = options.onClosed || _utils.emptyfn;\n  this.onReconnect = options.onReconnect || _utils.emptyfn;\n  this.onSocketConnected = options.onSocketConnected || _utils.emptyfn;\n  this.onTextMessage = options.onTextMessage || _utils.emptyfn;\n  this.onEmojiMessage = options.onEmojiMessage || _utils.emptyfn;\n  this.onPictureMessage = options.onPictureMessage || _utils.emptyfn;\n  this.onAudioMessage = options.onAudioMessage || _utils.emptyfn;\n  this.onVideoMessage = options.onVideoMessage || _utils.emptyfn;\n  this.onFileMessage = options.onFileMessage || _utils.emptyfn;\n  this.onLocationMessage = options.onLocationMessage || _utils.emptyfn;\n  this.onCmdMessage = options.onCmdMessage || _utils.emptyfn;\n  this.onPresence = options.onPresence || _utils.emptyfn;\n  this.onRoster = options.onRoster || _utils.emptyfn;\n  this.onError = options.onError || _utils.emptyfn;\n  this.onReceivedMessage = options.onReceivedMessage || _utils.emptyfn;\n  this.onInviteMessage = options.onInviteMessage || _utils.emptyfn;\n  this.onOffline = options.onOffline || _utils.emptyfn;\n  this.onOnline = options.onOnline || _utils.emptyfn;\n  this.onConfirmPop = options.onConfirmPop || _utils.emptyfn;\n  this.onCreateGroup = options.onCreateGroup || _utils.emptyfn;\n  // for WindowSDK\n  this.onUpdateMyGroupList = options.onUpdateMyGroupList || _utils.emptyfn;\n  this.onUpdateMyRoster = options.onUpdateMyRoster || _utils.emptyfn;\n  //\n  this.onBlacklistUpdate = options.onBlacklistUpdate || _utils.emptyfn;\n\n  _listenNetwork(this.onOnline, this.onOffline);\n};\nconnection.prototype.heartBeatID = 0;\nconnection.prototype.heartBeat = function () {\n  var me = this;\n  // // IE8: strophe auto switch from ws to BOSH, need heartbeat\n  // var isNeed = !/^ws|wss/.test(me.url);\n  // // || /mobile/.test(navigator.userAgent)\n  // if(this.heartBeatID || !isNeed){\n  // \treturn;\n  // }\n  this.stopHeartBeat();\n  this.heartBeatID = setInterval(function () {\n    me.ping({\n      toJid: me.domain,\n      type: \"normal\" });\n\n  }, this.heartBeatWait);\n};\nconnection.prototype.stopHeartBeat = function () {\n  clearInterval(this.heartBeatID);\n};\nconnection.prototype.sendReceiptsMessage = function (options) {\n  var dom = _strophe.default.$msg({\n    from: this.context.jid || \"\",\n    to: this.domain,\n    id: options.id || \"\" }).\n  c(\"received\", {\n    xmlns: \"urn:xmpp:receipts\",\n    id: options.id || \"\" });\n\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.cacheReceiptsMessage = function (options) {\n  this.sendQueue.push(options);\n};\nconnection.prototype.open = function (options) {\n  var me = this;\n  console.log(__f__(\"open\", this.isOpening(), \" at sdk\\\\connection.js:712\"));\n  // 防止重复初始化\n  if (this.isOpening() || this.isOpened()) {\n    console.log(__f__(\"can't open [1]\", \" at sdk\\\\connection.js:715\"));\n    return;\n  }\n  if (!_validCheck(options, this)) {\n    console.log(__f__(\"can't open [2]\", \" at sdk\\\\connection.js:719\"));\n    return;\n  }\n  if (options.accessToken) {\n    options.access_token = options.accessToken;\n    this.token = options.access_token;\n    _login(options, me);\n  } else {\n\n    var apiUrl = options.apiUrl;\n    var userId = options.user;\n    var pwd = options.pwd || \"\";\n    var appkey = options.appKey;\n    var str = appkey.split(\"#\");\n    var orgName = str[0];\n    var appName = str[1];\n    this.orgName = orgName;\n    this.appName = appName;\n    this.context.status = _code.STATUS_DOLOGIN_USERGRID;\n    var loginJson = {\n      grant_type: \"password\",\n      username: userId,\n      password: pwd,\n      timestamp: +new Date() };\n\n    var loginfo = _utils.stringify(loginJson);\n    _utils.ajax({\n      url: apiUrl + \"/\" + orgName + \"/\" + appName + \"/token\",\n      data: loginfo,\n      success: suc || _utils.emptyfn,\n      error: error || _utils.emptyfn });\n\n  }\n\n  function suc(data, xhr, myName) {\n    me.context.status = _code.STATUS_DOLOGIN_IM;\n    me.context.restTokenData = data;\n    if (data.statusCode != \"404\" && data.statusCode != \"400\") {\n      // data:\n      // \taccess_token,\n      // \texpires_in,\n      // \tuser:\n      // \t\tactivated,\n      // \t\tcreated,\n      // \t\tmodified,\n      // \t\tnickname,\n      // \t\ttype,\n      // \t\tusername,\n      // \t\tuuid,\n      _login(data.data, me);\n    } else {\n      error({});\n    }\n  }\n\n  function error(res, xhr, msg) {\n    me.clear();\n    if (res.error && res.error_description) {\n      me.onError({\n        type: _code.WEBIM_CONNCTION_OPEN_USERGRID_ERROR,\n        data: res,\n        xhr: xhr });\n\n    } else {\n      me.onError({\n        type: _code.WEBIM_CONNCTION_OPEN_ERROR,\n        data: res,\n        xhr: xhr });\n\n    }\n  }\n  // reOpenEntry = function(){\n  // \tme.open(options);\n  // };\n};\n// attach to xmpp server for BOSH\nconnection.prototype.attach = function (options) {\n  var me = this;\n  var pass = _validCheck(options, this);\n  if (!pass) {\n    return;\n  }\n  options = options || {};\n  var accessToken = options.accessToken || \"\";\n  if (accessToken == \"\") {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_TOKEN_NOT_ASSIGN_ERROR });\n\n    return;\n  }\n  var sid = options.sid || \"\";\n  if (sid === \"\") {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_SESSIONID_NOT_ASSIGN_ERROR });\n\n    return;\n  }\n  var rid = options.rid || \"\";\n  if (rid === \"\") {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_RID_NOT_ASSIGN_ERROR });\n\n    return;\n  }\n  var stropheConn = new Strophe.Connection(this.url, {\n    inactivity: this.inactivity,\n    maxRetries: this.maxRetries,\n    pollingTime: this.pollingTime,\n    heartBeatWait: this.heartBeatWait });\n\n  this.context.accessToken = accessToken;\n  this.context.stropheConn = stropheConn;\n  this.context.status = _code.STATUS_DOLOGIN_IM;\n  var callback = function callback(status, msg) {\n    _loginCallback(status, msg, me);\n  };\n  var jid = this.context.jid;\n  var wait = this.wait;\n  var hold = this.hold;\n  var wind = this.wind || 5;\n  stropheConn.attach(jid, sid, rid, callback, wait, hold, wind);\n};\nconnection.prototype.close = function (reason) {\n  this.stopHeartBeat();\n  var status = this.context.status;\n  if (status == _code.STATUS_INIT) {\n    return;\n  }\n  if (this.isClosed() || this.isClosing()) {\n    return;\n  }\n  this.context.status = _code.STATUS_CLOSING;\n  this.context.stropheConn.disconnect(reason);\n};\nconnection.prototype.addHandler = function (handler, ns, name, type, id, from, options) {\n  this.context.stropheConn.addHandler(handler, ns, name, type, id, from, options);\n};\nconnection.prototype.notifyVersion = function (suc, fail) {\n  var dom = _strophe.default.$iq({\n    from: this.context.jid || \"\",\n    to: this.domain,\n    type: \"result\" }).\n\n  c(\"query\", {\n    xmlns: \"jabber:iq:version\" }).\n\n  c(\"name\").\n  t(\"easemob\").\n  up().\n  c(\"version\").\n  t(_version).\n  up().\n  c(\"os\").\n  t(\"webim\");\n\n  suc = suc || _utils.emptyfn;\n  var error = fail || this.onError;\n  var failFn = function failFn(ele) {\n    error({\n      type: _code.WEBIM_CONNCTION_NOTIFYVERSION_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(dom.tree(), suc, failFn);\n};\n// handle all types of presence message\nconnection.prototype.handlePresence = function (msginfo) {\n  if (this.isClosed()) {\n    return;\n  }\n  var from = msginfo.getAttribute(\"from\") || \"\";\n  var to = msginfo.getAttribute(\"to\") || \"\";\n  var type = msginfo.getAttribute(\"type\") || \"\";\n  var presence_type = msginfo.getAttribute(\"presence_type\") || \"\";\n  var fromUser = _parseNameFromJidFn(from);\n  var toUser = _parseNameFromJidFn(to);\n  var isCreate = false;\n  var isMemberJoin = false;\n  var isDecline = false;\n  var isApply = false;\n  var info = {\n    from: fromUser,\n    to: toUser,\n    fromJid: from,\n    toJid: to,\n    type: type,\n    chatroom: !!msginfo.getElementsByTagName(\"roomtype\").length };\n\n\n  var showTags = msginfo.getElementsByTagName(\"show\");\n  if (showTags && showTags.length > 0) {\n    var showTag = showTags[0];\n    info.show = Strophe.getText(showTag);\n  }\n  var statusTags = msginfo.getElementsByTagName(\"status\");\n  if (statusTags && statusTags.length > 0) {\n    var statusTag = statusTags[0];\n    info.status = Strophe.getText(statusTag);\n    info.code = statusTag.getAttribute(\"code\");\n  }\n  var priorityTags = msginfo.getElementsByTagName(\"priority\");\n  if (priorityTags && priorityTags.length > 0) {\n    var priorityTag = priorityTags[0];\n    info.priority = Strophe.getText(priorityTag);\n  }\n  var error = msginfo.getElementsByTagName(\"error\");\n  if (error && error.length > 0) {\n    error = error[0];\n    info.error = {\n      code: error.getAttribute(\"code\") };\n\n  }\n  var destroy = msginfo.getElementsByTagName(\"destroy\");\n  if (destroy && destroy.length > 0) {\n    destroy = destroy[0];\n    info.destroy = true;\n    var reason = destroy.getElementsByTagName(\"reason\");\n    if (reason && reason.length > 0) {\n      info.reason = Strophe.getText(reason[0]);\n    }\n  }\n  var members = msginfo.getElementsByTagName(\"item\");\n  if (members && members.length > 0) {\n    var member = members[0];\n    var role = member.getAttribute(\"role\");\n    var jid = member.getAttribute(\"jid\");\n    var affiliation = member.getAttribute(\"affiliation\");\n    // dismissed by group\n    if (role == \"none\" && jid) {\n      var kickedMember = _parseNameFromJidFn(jid);\n      var actor = member.getElementsByTagName(\"actor\")[0];\n      var actorNick = actor.getAttribute(\"nick\");\n      info.actor = actorNick;\n      info.kicked = kickedMember;\n    }\n    // Service Acknowledges Room Creation `createGroupACK`\n    if (role == \"moderator\" && info.code == \"201\") {\n      if (affiliation === \"owner\") {\n        info.type = \"createGroupACK\";\n        isCreate = true;\n      }\n      // else\n      //     info.type = 'joinPublicGroupSuccess';\n    }\n  }\n  var x = msginfo.getElementsByTagName(\"x\");\n  if (x && x.length > 0) {\n    // 加群申请\n    var apply = x[0].getElementsByTagName(\"apply\");\n    // 加群成功\n    var accept = x[0].getElementsByTagName(\"accept\");\n    // 同意加群后用户进群通知\n    var item = x[0].getElementsByTagName(\"item\");\n    // 加群被拒绝\n    var decline = x[0].getElementsByTagName(\"decline\");\n    // 被设为管理员\n    var addAdmin = x[0].getElementsByTagName(\"add_admin\");\n    // 被取消管理员\n    var removeAdmin = x[0].getElementsByTagName(\"remove_admin\");\n    // 被禁言\n    var addMute = x[0].getElementsByTagName(\"add_mute\");\n    // 取消禁言\n    var removeMute = x[0].getElementsByTagName(\"remove_mute\");\n    if (apply && apply.length > 0) {\n      isApply = true;\n      info.toNick = apply[0].getAttribute(\"toNick\");\n      info.type = \"joinGroupNotifications\";\n      var groupJid = apply[0].getAttribute(\"to\");\n      var gid = groupJid.split(\"@\")[0].split(\"_\");\n      gid = gid[gid.length - 1];\n      info.gid = gid;\n    } else if (accept && accept.length > 0) {\n      info.type = \"joinPublicGroupSuccess\";\n    } else if (item && item.length > 0) {\n      var _affiliation = item[0].getAttribute(\"affiliation\");\n      var _role = item[0].getAttribute(\"role\");\n      if (_affiliation == \"member\" || _role == \"participant\") {\n        isMemberJoin = true;\n        info.mid = info.fromJid.split(\"/\");\n        info.mid = info.mid[info.mid.length - 1];\n        info.type = \"memberJoinPublicGroupSuccess\";\n        var roomtype = msginfo.getElementsByTagName(\"roomtype\");\n        if (roomtype && roomtype.length > 0) {\n          var _type = roomtype[0].getAttribute(\"type\");\n          if (_type == \"chatroom\") {\n            info.type = \"memberJoinChatRoomSuccess\";\n          }\n        }\n      } else if (_affiliation == \"none\" || _role == \"none\") {\n        var _roomtype = msginfo.getElementsByTagName(\"roomtype\");\n        if (_roomtype && _roomtype.length > 0) {\n          var _type2 = _roomtype[0].getAttribute(\"type\");\n          if (_type2 == \"chatroom\") {\n            info.type = \"memberLeaveChatRoomSuccess\";\n          }\n        }\n      }\n    } else if (decline && decline.length) {\n      isDecline = true;\n      var _gid = decline[0].getAttribute(\"fromNick\");\n      var owner = _parseNameFromJidFn(decline[0].getAttribute(\"from\"));\n      info.type = \"joinPublicGroupDeclined\";\n      info.owner = owner;\n      info.gid = _gid;\n    } else if (addAdmin && addAdmin.length > 0) {\n      var _gid2 = _parseNameFromJidFn(addAdmin[0].getAttribute(\"mucjid\"));\n      var _owner = _parseNameFromJidFn(addAdmin[0].getAttribute(\"from\"));\n      info.owner = _owner;\n      info.gid = _gid2;\n      info.type = \"addAdmin\";\n    } else if (removeAdmin && removeAdmin.length > 0) {\n      var _gid3 = _parseNameFromJidFn(removeAdmin[0].getAttribute(\"mucjid\"));\n      var _owner2 = _parseNameFromJidFn(removeAdmin[0].getAttribute(\"from\"));\n      info.owner = _owner2;\n      info.gid = _gid3;\n      info.type = \"removeAdmin\";\n    } else if (addMute && addMute.length > 0) {\n      var _gid4 = _parseNameFromJidFn(addMute[0].getAttribute(\"mucjid\"));\n      var _owner3 = _parseNameFromJidFn(addMute[0].getAttribute(\"from\"));\n      info.owner = _owner3;\n      info.gid = _gid4;\n      info.type = \"addMute\";\n    } else if (removeMute && removeMute.length > 0) {\n      var _gid5 = _parseNameFromJidFn(removeMute[0].getAttribute(\"mucjid\"));\n      var _owner4 = _parseNameFromJidFn(removeMute[0].getAttribute(\"from\"));\n      info.owner = _owner4;\n      info.gid = _gid5;\n      info.type = \"removeMute\";\n    }\n  }\n  if (info.chatroom) {\n    info.presence_type = presence_type;\n    info.original_type = info.type;\n    var reflectUser = from.slice(from.lastIndexOf(\"/\") + 1);\n    if (reflectUser === this.context.userId) {\n      if (info.type === \"\" && !info.code) {\n        info.type = \"joinChatRoomSuccess\";\n      } else if (presence_type === \"unavailable\" || info.type === \"unavailable\") {\n        // logout successfully.\n        if (!info.status) {\n          info.type = \"leaveChatRoom\";\n        }\n        // logout or dismissied by admin\n        else if (info.code == 110) {\n            info.type = \"leaveChatRoom\";\n          }\n          // The chat room is full\n          else if (info.error && info.error.code == 406) {\n              info.type = \"reachChatRoomCapacity\";\n            }\n      }\n    }\n  } else {\n    info.presence_type = presence_type;\n    info.original_type = type;\n    if (/subscribe/.test(info.type)) {\n      // subscribe | subscribed | unsubscribe | unsubscribed\n    } else if (type == \"\" &&\n    !info.status &&\n    !info.error &&\n    !isCreate &&\n    !isApply &&\n    !isMemberJoin &&\n    !isDecline)\n    {\n\n    } // info.type = 'joinPublicGroupSuccess';\n    // There is no roomtype when a chat room is deleted.\n    else if (presence_type === \"unavailable\" || type === \"unavailable\") {\n        // Group or Chat room Deleted.\n        if (info.destroy) {\n          info.type = \"deleteGroupChat\";\n        }\n        // Dismissed by group.\n        else if (info.code == 307 || info.code == 321) {\n            var nick = msginfo.getAttribute(\"nick\");\n            if (!nick) {\n              info.type = \"leaveGroup\";\n            } else {\n              info.type = \"removedFromGroup\";\n            }\n          }\n      }\n  }\n  //自己加自己\n  if (info.type == 'subscribe' && info.from == info.to) {\n    return;\n  }\n  this.onPresence(info, msginfo);\n};\n\n// connection.prototype.handlePing = function(e){\n// \tif(this.isClosed()){\n// \t\treturn;\n// \t}\n// \tlet id = e.getAttribute(\"id\");\n// \tlet from = e.getAttribute(\"from\");\n// \tlet to = e.getAttribute(\"to\");\n// \tlet dom = $iq({\n// \t\tfrom: to, to: from, id: id, type: \"result\"\n// \t});\n// \tthis.sendCommand(dom.tree());\n// };\n\nconnection.prototype.handleIq = function (iq) {\n  return true;\n};\nconnection.prototype.handleIqPrivacy = function (msginfo) {\n  var list = msginfo.getElementsByTagName(\"list\");\n  if (list.length == 0) {\n    return;\n  }\n  this.getBlacklist();\n};\nconnection.prototype.handleIqRoster = function (e) {\n  var id = e.getAttribute(\"id\");\n  var from = e.getAttribute(\"from\") || \"\";\n  // var name = _parseNameFromJidFn(from);\n  var curJid = this.context.jid;\n  // var curUser = this.context.userId;\n  var iqresult = _strophe.default.$iq({\n    type: \"result\",\n    id: id,\n    from: curJid });\n\n  this.sendCommand(iqresult.tree());\n  var msgBodies = e.getElementsByTagName(\"query\");\n  if (msgBodies && msgBodies.length > 0) {\n    var queryTag = msgBodies[0];\n    var rouster = _parseFriend(queryTag, this, from);\n    this.onRoster(rouster);\n  }\n  return true;\n};\nconnection.prototype.handleMessage = function (msginfo) {\n  if (this.isClosed()) {\n    return;\n  }\n  var id = msginfo.getAttribute(\"id\") || \"\";\n  // cache ack into sendQueue first, handelSendQueue will do the send thing with the speed of 5/s\n  this.cacheReceiptsMessage({\n    id: id });\n\n  // console.log('handlePresence', msginfo)\n  var parseMsgData = _parseResponseMessage(msginfo);\n  // console.log('parseMsgData', parseMsgData)\n  if (parseMsgData.errorMsg) {\n    this.handlePresence(msginfo);\n    return;\n  }\n  // send error\n  var error = msginfo.getElementsByTagName(\"error\");\n  var errorCode = \"\";\n  var errorText = \"\";\n  var errorBool = false;\n  if (error.length > 0) {\n    errorBool = true;\n    errorCode = error[0].getAttribute(\"code\");\n    var textDOM = error[0].getElementsByTagName(\"text\");\n    errorText = textDOM[0].textContent || textDOM[0].text;\n    // log(\"handle error\", errorCode, errorText);\n  }\n  var msgDatas = parseMsgData.data;\n  for (var i in msgDatas) {\n    if (!Object.hasOwnProperty.call(msgDatas, i)) {\n      continue;\n    }\n    var msg = msgDatas[i];\n    if (!msg.from || !msg.to) {\n      continue;\n    }\n    var from = (msg.from + \"\").toLowerCase();\n    var too = (msg.to + \"\").toLowerCase();\n    var extmsg = msg.ext || {};\n    var chattype = \"\";\n    var typeEl = msginfo.getElementsByTagName(\"roomtype\");\n    if (typeEl.length) {\n      chattype = typeEl[0].getAttribute(\"type\") || \"chat\";\n    } else {\n      chattype = msginfo.getAttribute(\"type\") || \"chat\";\n    }\n    var msgBodies = msg.bodies;\n    if (!msgBodies || msgBodies.length == 0) {\n      continue;\n    }\n    var msgBody = msg.bodies[0];\n    var type = msgBody.type;\n    try {\n      switch (type) {\n        case \"txt\":\n          var receiveMsg = msgBody.msg;\n          var emojibody = _utils.parseTextMessage(receiveMsg, WebIM.Emoji);\n          if (emojibody.isemoji) {\n            var _msg3 = {\n              id: id,\n              type: chattype,\n              from: from,\n              to: too,\n              delay: parseMsgData.delayTimeStamp,\n              data: emojibody.body,\n              ext: extmsg };\n\n            !_msg3.delay && delete _msg3.delay;\n            _msg3.error = errorBool;\n            _msg3.errorText = errorText;\n            _msg3.errorCode = errorCode;\n            this.onEmojiMessage(_msg3);\n          } else {\n            var _msg4 = {\n              id: id,\n              type: chattype,\n              from: from,\n              to: too,\n              delay: parseMsgData.delayTimeStamp,\n              data: receiveMsg,\n              ext: extmsg };\n\n            !_msg4.delay && delete _msg4.delay;\n            _msg4.error = errorBool;\n            _msg4.errorText = errorText;\n            _msg4.errorCode = errorCode;\n            this.onTextMessage(_msg4);\n          }\n          break;\n        case \"img\":\n          var rwidth = 0;\n          var rheight = 0;\n          if (msgBody.size) {\n            rwidth = msgBody.size.width;\n            rheight = msgBody.size.height;\n          }\n          var _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            thumb: msgBody.thumb,\n            thumb_secret: msgBody.thumb_secret,\n            file_length: msgBody.file_length || \"\",\n            width: rwidth,\n            height: rheight,\n            filetype: msgBody.filetype || \"\",\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onPictureMessage(_msg2);\n          break;\n        case \"audio\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            length: msgBody.length || \"\",\n            file_length: msgBody.file_length || \"\",\n            filetype: msgBody.filetype || \"\",\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onAudioMessage(_msg2);\n          break;\n        case \"file\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            file_length: msgBody.file_length,\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onFileMessage(_msg2);\n          break;\n        case \"loc\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            addr: msgBody.addr,\n            lat: msgBody.lat,\n            lng: msgBody.lng,\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onLocationMessage(_msg2);\n          break;\n        case \"video\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            file_length: msgBody.file_length,\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onVideoMessage(_msg2);\n          break;\n        case \"cmd\":\n          _msg2 = {\n            id: id,\n            from: from,\n            to: too,\n            action: msgBody.action,\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onCmdMessage(_msg2);\n          break;\n        default:\n          break;}\n\n    } catch (e) {\n      this.onError({\n        type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n        data: e });\n\n    }\n  }\n};\nconnection.prototype.handleReceivedMessage = function (message) {\n  try {\n    this.onReceivedMessage(message);\n  } catch (e) {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n      data: e });\n\n  }\n  var rcv = message.getElementsByTagName(\"received\");\n  var id;\n  var mid;\n  if (rcv.length > 0) {\n    if (rcv[0].childNodes && rcv[0].childNodes.length > 0) {\n      id = rcv[0].childNodes[0].nodeValue;\n    } else {\n      id = rcv[0].innerHTML || rcv[0].innerText;\n    }\n    mid = rcv[0].getAttribute(\"mid\");\n  }\n  if (_msgHash[id]) {\n    try {\n      _msgHash[id].msg.success instanceof Function && _msgHash[id].msg.success(id, mid);\n    } catch (e) {\n      this.onError({\n        type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n        data: e });\n\n    }\n    delete _msgHash[id];\n  }\n};\nconnection.prototype.handleInviteMessage = function (message) {\n  var form = null;\n  var invitemsg = message.getElementsByTagName(\"invite\");\n  var reasonDom = message.getElementsByTagName(\"reason\")[0];\n  var reasonMsg = reasonDom.textContent;\n  var id = message.getAttribute(\"id\") || \"\";\n  this.sendReceiptsMessage({\n    id: id });\n\n  if (invitemsg && invitemsg.length > 0) {\n    var fromJid = invitemsg[0].getAttribute(\"from\");\n    form = _parseNameFromJidFn(fromJid);\n  }\n  var xmsg = message.getElementsByTagName(\"x\");\n  var roomid = null;\n  if (xmsg && xmsg.length > 0) {\n    for (var i = 0; i < xmsg.length; i++) {\n      if (xmsg[i].namespaceURI === \"jabber:x:conference\") {\n        var roomjid = xmsg[i].getAttribute(\"jid\");\n        roomid = _parseNameFromJidFn(roomjid);\n      }\n    }\n  }\n  this.onInviteMessage({\n    type: \"invite\",\n    from: form,\n    roomid: roomid,\n    reason: reasonMsg });\n\n};\nconnection.prototype.sendCommand = function (dom, id) {\n  var me = this;\n  if (this.isOpened()) {\n    var fail = function fail(reason) {\n      var data = {};\n      data.mid = id;\n      data.reason = reason;\n      me.onError({\n        type: 'socket_error',\n        data: data });\n\n    };\n    this.context.stropheConn.send(dom, fail);\n  } else {\n    console.log(__f__(\"Err 5\", \" at sdk\\\\connection.js:1456\"));\n    this.onError({\n      type: _code.WEBIM_CONNCTION_DISCONNECTED });\n\n  }\n};\nconnection.prototype.getUniqueId = function (prefix) {\n  var cdate = new Date();\n  var offdate = new Date(2010, 1, 1);\n  var offset = cdate.getTime() - offdate.getTime();\n  var hexd = parseInt(offset).toString(16);\n  if (typeof prefix === \"string\" || typeof prefix === \"number\") {\n    return prefix + \"_\" + hexd;\n  }\n  return \"WEBIM_\" + hexd;\n};\nconnection.prototype.send = function (message) {\n  if (WebIM.config.isWindowSDK) {\n    WebIM.doQuery(\n    JSON.stringify({\n      type: \"sendMessage\",\n      to: message.to,\n      message_type: message.type,\n      msg: encodeURI(message.msg),\n      chatType: message.chatType }),\n\n    function (response) {\n\n    },\n    function (code, msg) {\n\n    });\n\n  } else if (Object.prototype.toString.call(message) === \"[object Object]\") {\n    var appKey = this.context.appKey || \"\";\n    var toJid = appKey + \"_\" + message.to + \"@\" + this.domain;\n    if (message.group) {\n      toJid = appKey + \"_\" + message.to + \"@conference.\" + this.domain;\n    }\n    if (message.resource) {\n      toJid = toJid + \"/\" + message.resource;\n    }\n    message.toJid = toJid;\n    message.id = message.id || this.getUniqueId();\n    _msgHash[message.id] = new _message(message);\n    try {\n      _msgHash[message.id].send(this);\n    } catch (e) {\n      console.log(__f__('发送失败', \" at sdk\\\\connection.js:1504\"));\n    }\n\n  } else if (typeof message === \"string\") {\n    _msgHash[message] && _msgHash[message].send(this);\n  }\n};\nconnection.prototype.addRoster = function (options) {\n  var jid = _getJid(options, this);\n  var name = options.name || \"\";\n  var groups = options.groups || \"\";\n\n  var iq = _strophe.default.$iq({\n    type: \"set\" });\n\n  iq.c(\"query\", {\n    xmlns: \"jabber:iq:roster\" });\n\n  iq.c(\"item\", {\n    jid: jid,\n    name: name });\n\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      iq.c(\"group\").t(groups[i]).up();\n    }\n  }\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || _utils.emptyfn;\n  this.context.stropheConn.sendIQ(iq.tree(), suc, error);\n};\nconnection.prototype.removeRoster = function (options) {\n  var jid = _getJid(options, this);\n  var iq = _strophe.default.\n  $iq({\n    type: \"set\" }).\n\n  c(\"query\", {\n    xmlns: \"jabber:iq:roster\" }).\n\n  c(\"item\", {\n    jid: jid,\n    subscription: \"remove\" });\n\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || _utils.emptyfn;\n  this.context.stropheConn.sendIQ(iq, suc, error);\n};\nconnection.prototype.getRoster = function (options) {\n  var dom = _strophe.default.$iq({\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: \"jabber:iq:roster\" });\n\n  options = options || {};\n  var suc = options.success || this.onRoster;\n  var error = options.error || this.onError;\n  if (this.isOpened()) {\n    this.context.stropheConn.sendIQ(dom.tree(), function (ele) {\n      var rouster = [];\n      var msgBodies = ele.getElementsByTagName(\"query\");\n      if (msgBodies && msgBodies.length > 0) {\n        var queryTag = msgBodies[0];\n        rouster = _parseFriend(queryTag);\n      }\n      suc(rouster, ele);\n    }, function (ele) {\n      error({\n        type: _code.WEBIM_CONNCTION_GETROSTER_ERROR,\n        data: ele });\n\n    });\n  } else {\n    error({\n      type: _code.WEBIM_CONNCTION_DISCONNECTED });\n\n  }\n};\nconnection.prototype.subscribe = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"subscribe\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message).up();\n  }\n  if (options.nick) {\n    pres.\n    c(\"nick\", {\n      xmlns: \"http://jabber.org/protocol/nick\" }).\n\n    t(options.nick);\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.subscribed = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"subscribed\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message).up();\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.unsubscribe = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"unsubscribe\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message);\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.unsubscribed = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"unsubscribed\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message).up();\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.createRoom = function (options) {\n  var suc = options.success || _utils.emptyfn;\n  var err = options.error || _utils.emptyfn;\n  var roomiq;\n  roomiq = _strophe.default.$iq({\n    to: options.roomName,\n    type: \"set\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.MUC_OWNER }).\n\n  c(\"x\", {\n    xmlns: \"jabber:x:data\",\n    type: \"submit\" });\n\n  return this.context.stropheConn.sendIQ(roomiq.tree(), suc, err);\n};\n\n// connection.prototype.joinPublicGroup = function(options){\n// \tvar roomJid = this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain;\n// \tvar room_nick = roomJid + \"/\" + this.context.userId;\n// \tvar suc = options.success || _utils.emptyfn;\n// \tvar err = options.error || _utils.emptyfn;\n// \tvar errorFn = function(ele){\n// \t\terr({\n// \t\t\ttype: _code.WEBIM_CONNCTION_JOINROOM_ERROR,\n// \t\t\tdata: ele\n// \t\t});\n// \t};\n// \tvar iq = $pres({\n// \t\tfrom: this.context.jid,\n// \t\tto: room_nick\n// \t})\n// \t.c(\"x\", { xmlns: Strophe.NS.MUC });\n// \tthis.context.stropheConn.sendIQ(iq.tree(), suc, errorFn);\n// };\n\nconnection.prototype.listRooms = function (options) {\n  var iq = _strophe.default.$iq({\n    to: options.server || \"conference.\" + this.domain,\n    from: this.context.jid,\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.DISCO_ITEMS });\n\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || this.onError;\n  var completeFn = function completeFn(result) {\n    var rooms = [];\n    rooms = _parseRoom(result);\n    try {\n      suc(rooms);\n    } catch (e) {\n      error({\n        type: _code.WEBIM_CONNCTION_GETROOM_ERROR,\n        data: e });\n\n    }\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOM_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(iq.tree(), completeFn, errorFn);\n};\nconnection.prototype.queryRoomMember = function (options) {\n  var members = [];\n  var iq = _strophe.default.$iq({\n    to: this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain,\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.MUC + \"#admin\" }).\n\n  c(\"item\", {\n    affiliation: \"member\" });\n\n  var suc = options.success || _utils.emptyfn;\n  var completeFn = function completeFn(result) {\n    var items = result.getElementsByTagName(\"item\");\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var mem = {\n          jid: item.getAttribute(\"jid\"),\n          affiliation: \"member\" };\n\n        members.push(mem);\n      }\n    }\n    suc(members);\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOMMEMBER_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(iq.tree(), completeFn, errorFn);\n};\nconnection.prototype.queryRoomInfo = function (options) {\n  var domain = this.domain;\n  var iq = _strophe.default.$iq({\n    to: this.context.appKey + \"_\" + options.roomId + \"@conference.\" + domain,\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.DISCO_INFO });\n\n  var suc = options.success || _utils.emptyfn;\n  var members = [];\n  var completeFn = function completeFn(result) {\n    var settings = \"\";\n    var features = result.getElementsByTagName(\"feature\");\n    if (features) {\n      settings = features[1].getAttribute(\"var\") + \"|\" + features[3].getAttribute(\"var\") + \"|\" + features[4].getAttribute(\"var\");\n    }\n    switch (settings) {\n      case \"muc_public|muc_membersonly|muc_notallowinvites\":\n        settings = \"PUBLIC_JOIN_APPROVAL\";\n        break;\n      case \"muc_public|muc_open|muc_notallowinvites\":\n        settings = \"PUBLIC_JOIN_OPEN\";\n        break;\n      case \"muc_hidden|muc_membersonly|muc_allowinvites\":\n        settings = \"PRIVATE_MEMBER_INVITE\";\n        break;\n      case \"muc_hidden|muc_membersonly|muc_notallowinvites\":\n        settings = \"PRIVATE_OWNER_INVITE\";\n        break;\n      default:\n        break;}\n\n    var fields = result.getElementsByTagName(\"field\");\n    var fieldValues = {};\n    if (fields) {\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var fieldVar = field.getAttribute(\"var\");\n        var fieldSimplify = fieldVar.split(\"_\")[1];\n        switch (fieldVar) {\n          case \"muc#roominfo_occupants\":\n          case \"muc#roominfo_maxusers\":\n          case \"muc#roominfo_affiliations\":\n          case \"muc#roominfo_description\":\n            fieldValues[fieldSimplify] = field.textContent || field.text || \"\";\n            break;\n          case \"muc#roominfo_owner\":\n            var mem = {\n              jid: (field.textContent || field.text) + \"@\" + domain,\n              affiliation: \"owner\" };\n\n            members.push(mem);\n            fieldValues[fieldSimplify] = field.textContent || field.text;\n            break;\n          default:\n            break;}\n\n        // if (field.getAttribute('label') === 'owner') {\n        //     var mem = {\n        //         jid: (field.textContent || field.text) + '@' + domain\n        //         , affiliation: 'owner'\n        //     };\n        //     members.push(mem);\n        //     break;\n        // }\n      }\n      fieldValues.name = result.getElementsByTagName(\"identity\")[0].getAttribute(\"name\");\n    }\n    // log(settings, members, fieldValues);\n    suc(settings, members, fieldValues);\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOMINFO_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(iq.tree(), completeFn, errorFn);\n};\nconnection.prototype.queryRoomOccupants = function (options) {\n  var suc = options.success || _utils.emptyfn;\n  var completeFn = function completeFn(result) {\n    var occupants = [];\n    occupants = _parseRoomOccupants(result);\n    suc(occupants);\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOMOCCUPANTS_ERROR,\n      data: ele });\n\n  };\n  var attrs = {\n    xmlns: Strophe.NS.DISCO_ITEMS };\n\n  var info = _strophe.default.$iq({\n    from: this.context.jid,\n    to: this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain,\n    type: \"get\" }).\n  c(\"query\", attrs);\n  this.context.stropheConn.sendIQ(info.tree(), completeFn, errorFn);\n};\nconnection.prototype.setUserSig = function (desc) {\n  var dom = _strophe.default.$pres({\n    xmlns: \"jabber:client\" });\n\n  desc = desc || \"\";\n  dom.c(\"status\").t(desc);\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.setPresence = function (type, status) {\n  var dom = _strophe.default.$pres({\n    xmlns: \"jabber:client\" });\n\n  if (type) {\n    if (status) {\n      dom.c(\"show\").t(type);\n      dom.up().c(\"status\").t(status);\n    } else {\n      dom.c(\"show\").t(type);\n    }\n  }\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.getPresence = function () {\n  var dom = _strophe.default.$pres({\n    xmlns: \"jabber:client\" });\n\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.ping = function (options) {\n  options = options || {};\n  var jid = _getJid(options, this);\n  var dom = _strophe.default.$iq({\n    from: this.context.jid || \"\",\n    to: jid,\n    type: \"get\" }).\n\n  c(\"ping\", {\n    xmlns: \"urn:xmpp:ping\" });\n\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || this.onError;\n  var failFn = function failFn(ele) {\n    error({\n      type: _code.WEBIM_CONNCTION_PING_ERROR,\n      data: ele });\n\n  };\n  if (this.isOpened()) {\n    this.context.stropheConn.sendIQ(dom.tree(), suc, failFn);\n  } else {\n    error({\n      type: _code.WEBIM_CONNCTION_DISCONNECTED });\n\n  }\n};\nconnection.prototype.isOpened = function () {\n  return this.context.status == _code.STATUS_OPENED;\n};\nconnection.prototype.isOpening = function () {\n  var ctxstatus = this.context.status;\n  return ctxstatus == _code.STATUS_DOLOGIN_USERGRID || ctxstatus == _code.STATUS_DOLOGIN_IM;\n};\nconnection.prototype.isClosing = function () {\n  return this.context.status == _code.STATUS_CLOSING;\n};\nconnection.prototype.isClosed = function () {\n  return this.context.status == _code.STATUS_CLOSED;\n};\nconnection.prototype.clear = function () {\n  var key = this.context.appKey;\n  if (this.errorType != WebIM.statusCode.WEBIM_CONNCTION_DISCONNECTED) {\n    this.context = {\n      status: _code.STATUS_INIT,\n      appKey: key };\n\n  }\n  if (this.intervalId) {\n    clearInterval(this.intervalId);\n  }\n  if (this.errorType == WebIM.statusCode.WEBIM_CONNCTION_CLIENT_LOGOUT || this.errorType == -1) {\n\n  }\n};\nconnection.prototype.getChatRooms = function (options) {\n  var me = this;\n  var token = options.accessToken || this.context.accessToken;\n  if (token) {\n    var apiUrl = this.apiUrl;\n    var appName = this.context.appName;\n    var orgName = this.context.orgName;\n    if (!appName || !orgName) {\n      me.onError({\n        type: _code.WEBIM_CONNCTION_AUTH_ERROR });\n\n      return;\n    }\n    var suc = function suc(data, xhr) {\n      typeof options.success === \"function\" && options.success(data);\n    };\n    var error = function error(res, xhr, msg) {\n      if (res.error && res.error_description) {\n        me.onError({\n          type: _code.WEBIM_CONNCTION_LOAD_CHATROOM_ERROR,\n          msg: res.error_description,\n          data: res,\n          xhr: xhr });\n\n      }\n    };\n    var pageInfo = {\n      pagenum: parseInt(options.pagenum) || 1,\n      pagesize: parseInt(options.pagesize) || 20 };\n\n    var opts = {\n      url: apiUrl + \"/\" + orgName + \"/\" + appName + \"/chatrooms\",\n      dataType: \"json\",\n      type: \"GET\",\n      header: {\n        Authorization: \"Bearer \" + token },\n\n      data: pageInfo,\n      success: suc || _utils.emptyfn,\n      fail: error || _utils.emptyfn };\n\n    wx.request(opts);\n  } else {\n    me.onError({\n      type: _code.WEBIM_CONNCTION_TOKEN_NOT_ASSIGN_ERROR });\n\n  }\n};\nconnection.prototype.joinChatRoom = function (options) {\n  var roomJid = this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain;\n  var room_nick = roomJid + \"/\" + this.context.userId;\n  var suc = options.success || _utils.emptyfn;\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_JOINCHATROOM_ERROR,\n      data: ele });\n\n  };\n  var pres = _strophe.default.$pres({\n    from: this.context.jid,\n    to: room_nick });\n\n  pres.c(\"x\", {\n    xmlns: Strophe.NS.MUC + \"#user\" }).\n\n  c(\"item\", {\n    affiliation: \"member\",\n    role: \"participant\" }).\n\n  up().\n  up().\n  c(\"roomtype\", {\n    xmlns: \"easemob:x:roomtype\",\n    type: \"chatroom\" });\n\n  this.context.stropheConn.sendIQ(pres.tree(), suc, errorFn);\n};\nconnection.prototype.quitChatRoom = function (options) {\n  var roomJid = this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain;\n  var room_nick = roomJid + \"/\" + this.context.userId;\n  var suc = options.success || _utils.emptyfn;\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_QUITCHATROOM_ERROR,\n      data: ele });\n\n  };\n  var pres = _strophe.default.$pres({\n    from: this.context.jid,\n    to: room_nick,\n    type: \"unavailable\" });\n\n  pres.\n  c(\"x\", {\n    xmlns: Strophe.NS.MUC + \"#user\" }).\n\n  c(\"item\", {\n    affiliation: \"none\",\n    role: \"none\" }).\n\n  up().\n  up().\n  c(\"roomtype\", {\n    xmlns: \"easemob:x:roomtype\",\n    type: \"chatroom\" });\n\n  this.context.stropheConn.sendIQ(pres.tree(), suc, errorFn);\n};\n// connection.prototype._onReceiveInviteFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation\",\n// \t\tmsg: info.user + \" invites you to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t\tWebIM.doQuery(\n// \t\t\t\t\"{\\\"type\\\":\\\"acceptInvitationFromGroup\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\",\n// \t\t\t\tfunction(response){\n// \t\t\t\t},\n// \t\t\t\tfunction(code, msg){\n// \t\t\t\t\tIM.api.NotifyError(\"acceptInvitationFromGroup error:\" + msg);\n// \t\t\t\t}\n// \t\t\t);\n// \t\t},\n// \t\treject: function reject(){\n// \t\t\tWebIM.doQuery(\n// \t\t\t\t\"{\\\"type\\\":\\\"declineInvitationFromGroup\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\",\n// \t\t\t\tfunction(response){\n// \t\t\t\t},\n// \t\t\t\tfunction(code, msg){\n// \t\t\t\t\tIM.api.NotifyError(\"declineInvitationFromGroup error:\" + msg);\n// \t\t\t\t}\n// \t\t\t);\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\n// connection.prototype._onReceiveInviteAcceptionFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation response\",\n// \t\tmsg: info.user + \" agreed to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onReceiveInviteDeclineFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation response\",\n// \t\tmsg: info.user + \" rejected to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onAutoAcceptInvitationFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation\",\n// \t\tmsg: \"You had joined into the group:\" + info.group_name + \" automatically.Inviter:\" + info.user,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onLeaveGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group notification\",\n// \t\tmsg: \"You have been out of the group:\" + info.group_id + \".Reason:\" + info.msg,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\n// connection.prototype._onReceiveJoinGroupApplication = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group join application\",\n// \t\tmsg: info.user + \" applys to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t\tWebIM.doQuery(\"{\\\"type\\\":\\\"acceptJoinGroupApplication\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\", function(response){\n// \t\t\t}, function(code, msg){\n// \t\t\t\tIM.api.NotifyError(\"acceptJoinGroupApplication error:\" + msg);\n// \t\t\t});\n// \t\t},\n// \t\treject: function reject(){\n// \t\t\tWebIM.doQuery(\"{\\\"type\\\":\\\"declineJoinGroupApplication\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\", function(response){\n// \t\t\t}, function(code, msg){\n// \t\t\t\tIM.api.NotifyError(\"declineJoinGroupApplication error:\" + msg);\n// \t\t\t});\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\n// connection.prototype._onReceiveAcceptionFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group notification\",\n// \t\tmsg: \"You had joined into the group:\" + info.group_name + \".\",\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onReceiveRejectionFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group notification\",\n// \t\tmsg: \"You have been rejected to join into the group:\" + info.group_name + \".\",\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\nconnection.prototype._onUpdateMyGroupList = function (options) {\n  this.onUpdateMyGroupList(options);\n};\nconnection.prototype._onUpdateMyRoster = function (options) {\n  this.onUpdateMyRoster(options);\n};\n\nconnection.prototype.reconnect = function () {\n  var me = this;\n  setTimeout(\n  function () {\n    _login(me.context.restTokenData && me.context.restTokenData.data, me);\n  }, (\n  this.autoReconnectNumTotal == 0 ?\n  0 :\n  this.autoReconnectInterval) *\n  1000);\n\n  this.autoReconnectNumTotal++;\n};\nconnection.prototype.closed = function () {\n  IM.api.init();\n};\n\n// 通过Rest列出群组的所有成员\nconnection.prototype.listGroupMember = function (opt) {\n  if (isNaN(opt.pageNum) || opt.pageNum <= 0) {\n    throw new Error(\"The parameter \\\"pageNum\\\" should be a positive number\");\n  } else if (isNaN(opt.pageSize) || opt.pageSize <= 0) {\n    throw new Error(\"The parameter \\\"pageSize\\\" should be a positive number\");\n  } else if (opt.groupId === null && typeof opt.groupId === \"undefined\") {\n    throw new Error(\"The parameter \\\"groupId\\\" should be added\");\n  }\n  var requestData = [];\n  var groupId = opt.groupId;\n  requestData.pagenum = opt.pageNum;\n  requestData.pagesize = opt.pageSize;\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups/\" + groupId + \"/users\",\n    dataType: \"json\",\n    type: \"GET\",\n    data: requestData,\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = opt.success || _utils.emptyfn;\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// 通过 Rest 接口创建群组\nconnection.prototype.createGroupNew = function (opt) {\n  // opt.data.owner = this.user;\n  opt.data.invite_need_confirm = false;\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups\",\n    dataType: \"json\",\n    type: \"POST\",\n    data: JSON.stringify(opt.data),\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = function (respData) {\n    opt.success(respData);\n    this.onCreateGroup(respData);\n  }.bind(this);\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// 通过Rest根据groupid获取群组详情\nconnection.prototype.getGroupInfo = function (opt) {\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups/\" + opt.groupId,\n    type: \"GET\",\n    dataType: \"json\",\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = opt.success || _utils.emptyfn;\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// 通过Rest解散群组\nconnection.prototype.dissolveGroup = function (opt) {\n  var groupId = opt.groupId;\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups/\" + groupId + \"?version=v3\",\n    type: \"DELETE\",\n    dataType: \"json\",\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = opt.success || _utils.emptyfn;\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// used for blacklist\nfunction _parsePrivacy(iq) {\n  var list = [];\n  var items = iq.getElementsByTagName(\"item\");\n\n  if (items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var jid = item.getAttribute(\"value\");\n      var order = item.getAttribute(\"order\");\n      var type = item.getAttribute(\"type\");\n      if (!jid) {\n        continue;\n      }\n      var n = _parseNameFromJidFn(jid);\n      list[n] = {\n        type: type,\n        order: order,\n        jid: jid,\n        name: n };\n\n    }\n  }\n  return list;\n}\n\n// used for blacklist\nconnection.prototype.getBlacklist = function (options) {\n  options = options || {};\n  var iq = _strophe.default.$iq({\n    type: \"get\" });\n\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var me = this;\n\n  iq.\n  c(\"query\", {\n    xmlns: \"jabber:iq:privacy\" }).\n\n  c(\"list\", {\n    name: \"special\" });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (iq) {\n    me.onBlacklistUpdate(_parsePrivacy(iq));\n    sucFn();\n  }, function () {\n    me.onBlacklistUpdate([]);\n    errFn();\n  });\n};\n\n// used for blacklist\nconnection.prototype.addToBlackList = function (options) {\n  var iq = _strophe.default.$iq({\n    type: \"set\" });\n\n  var blacklist = options.list || {};\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var piece = iq.\n  c(\"query\", {\n    xmlns: \"jabber:iq:privacy\" }).\n\n  c(\"list\", {\n    name: \"special\" });\n\n\n  var keys = Object.keys(blacklist);\n  var len = keys.length;\n  var order = 2;\n\n  for (var i = 0; i < len; i++) {\n    var item = blacklist[keys[i]];\n    var type = item.type || \"jid\";\n    var jid = item.jid;\n    piece = piece.\n    c(\"item\", {\n      action: \"deny\",\n      order: order++,\n      type: type,\n      value: jid }).\n\n    c(\"message\");\n    if (i !== len - 1) {\n      piece = piece.up().up();\n    }\n  }\n  this.context.stropheConn.sendIQ(piece.tree(), sucFn, errFn);\n};\n\n// used for blacklist\nconnection.prototype.removeFromBlackList = function (options) {\n  var iq = _strophe.default.$iq({\n    type: \"set\" });\n\n  var blacklist = options.list || {};\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var piece = iq.\n  c(\"query\", {\n    xmlns: \"jabber:iq:privacy\" }).\n\n  c(\"list\", {\n    name: \"special\" });\n\n\n  var keys = Object.keys(blacklist);\n  var len = keys.length;\n\n  for (var i = 0; i < len; i++) {\n    var item = blacklist[keys[i]];\n    var type = item.type || \"jid\";\n    var jid = item.jid;\n    var order = item.order;\n\n    piece = piece.\n    c(\"item\", {\n      action: \"deny\",\n      order: order,\n      type: type,\n      value: jid }).\n\n    c(\"message\");\n    if (i !== len - 1) {\n      piece = piece.up().up();\n    }\n  }\n  this.context.stropheConn.sendIQ(piece.tree(), sucFn, errFn);\n};\nconnection.prototype._getGroupJid = function (to) {\n  var appKey = this.context.appKey || \"\";\n  return appKey + \"_\" + to + \"@conference.\" + this.domain;\n};\n\n// used for blacklist\nconnection.prototype.addToGroupBlackList = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var jid = _getJid(options, this);\n  var affiliation = \"admin\"; // options.affiliation || 'admin';\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"outcast\",\n    jid: jid });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), sucFn, errFn);\n};\n\n// used for blacklist\nconnection.prototype.getGroupBlacklist = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // var jid = _getJid(options, this);\n  var affiliation = \"admin\"; // options.affiliation || 'admin';\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"get\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"outcast\" });\n\n\n  function _parseGroupBlacklist(iq) {\n    var list = {};\n    var items = iq.getElementsByTagName(\"item\");\n\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var jid = item.getAttribute(\"jid\");\n        var _affiliation2 = item.getAttribute(\"affiliation\");\n        var nick = item.getAttribute(\"nick\");\n        if (!jid) {\n          continue;\n        }\n        var n = _parseNameFromJidFn(jid);\n        list[n] = {\n          jid: jid,\n          affiliation: _affiliation2,\n          nick: nick,\n          name: n };\n\n      }\n    }\n    return list;\n  }\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn(_parseGroupBlacklist(msginfo));\n  }, function () {\n    errFn();\n  });\n};\n\n// used for blacklist\nconnection.prototype.removeGroupMemberFromBlacklist = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  var jid = _getJid(options, this);\n  var affiliation = \"admin\"; // options.affiliation || 'admin';\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"member\",\n    jid: jid });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn();\n  }, function () {\n    errFn();\n  });\n};\n\n/**\r\n    * changeGroupSubject 修改群名称\r\n    *\r\n    * @param options\r\n    */\n\nconnection.prototype.changeGroupSubject = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // must be `owner`\n  var affiliation = \"owner\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"x\", {\n    type: \"submit\",\n    xmlns: \"jabber:x:data\" }).\n\n  c(\"field\", {\n    \"var\": \"FORM_TYPE\" }).\n\n  c(\"value\").\n  t(\"http://jabber.org/protocol/muc#roomconfig\").\n  up().\n  up().\n  c(\"field\", {\n    \"var\": \"muc#roomconfig_roomname\" }).\n\n  c(\"value\").\n  t(options.subject).\n  up().\n  up().\n  c(\"field\", {\n    \"var\": \"muc#roomconfig_roomdesc\" }).\n\n  c(\"value\").\n  t(options.description);\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn();\n  }, function () {\n    errFn();\n  });\n};\n\n/**\r\n    * destroyGroup 删除群组\r\n    *\r\n    * @param options\r\n    */\nconnection.prototype.destroyGroup = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // must be `owner`\n  var affiliation = \"owner\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"destroy\");\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn();\n  }, function () {\n    errFn();\n  });\n};\n\n/**\r\n    * leaveGroupBySelf 主动离开群组\r\n    *\r\n    * @param options\r\n    */\n\nconnection.prototype.leaveGroupBySelf = function (options) {\n  var me = this;\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // must be `owner`\n  var jid = _getJid(options, this);\n  var affiliation = \"admin\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"none\",\n    jid: jid });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msgInfo) {\n    sucFn(msgInfo);\n    var pres = _strophe.default.$pres({\n      type: \"unavailable\",\n      to: to + \"/\" + me.context.userId });\n\n    me.sendCommand(pres.tree());\n  }, function (errInfo) {\n    errFn(errInfo);\n  });\n};\n\n/**\r\n    * leaveGroup 被踢出群组\r\n    *\r\n    * @param options\r\n    */\n// connection.prototype.leaveGroup = function(options){\n// \tvar sucFn = options.success || _utils.emptyfn;\n// \tvar errFn = options.error || _utils.emptyfn;\n// \tvar list = options.list || [];\n// \tvar affiliation = \"admin\";\n// \tvar to = this._getGroupJid(options.roomId);\n// \tvar iq = $iq({ type: \"set\", to: to });\n// \tvar piece = iq.c(\"query\", { xmlns: \"http://jabber.org/protocol/muc#\" + affiliation });\n// \tvar keys = Object.keys(list);\n// \tvar len = keys.length;\n//\n// \tfor(let i = 0; i < len; i++){\n// \t\tlet name = list[keys[i]];\n// \t\tlet jid = _getJidByName(name, this);\n//\n// \t\tpiece = piece.c(\"item\", {\n// \t\t\taffiliation: \"none\",\n// \t\t\tjid: jid\n// \t\t})\n// \t\t.up()\n// \t\t.c(\"item\", {\n// \t\t\trole: \"none\",\n// \t\t\tjid: jid,\n// \t\t})\n// \t\t.up();\n// \t}\n//\n// \tthis.context.stropheConn.sendIQ(iq.tree(), function(msgInfo){\n// \t\tsucFn(msgInfo);\n// \t}, function(errInfo){\n// \t\terrFn(errInfo);\n// \t});\n// };\n\n/**\r\n * addGroupMembers 添加群组成员\r\n *\r\n * @param options\r\n */\n\nconnection.prototype.addGroupMembers = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var list = options.list || [];\n  var affiliation = \"admin\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n  var piece = iq.c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation });\n\n  var len = list.length;\n\n  for (var i = 0; i < len; i++) {\n    var name = list[i];\n    var jid = _getJidByName(name, this);\n\n    piece = piece.c(\"item\", {\n      affiliation: \"member\",\n      jid: jid }).\n    up();\n\n    var dom = _strophe.default.$msg({\n      to: to }).\n\n    c(\"x\", {\n      xmlns: \"http://jabber.org/protocol/muc#user\" }).\n\n    c(\"invite\", {\n      to: jid }).\n\n    c(\"reason\").\n    t(options.reason || \"\");\n\n    this.sendCommand(dom.tree());\n  }\n  this.context.stropheConn.sendIQ(iq.tree(), function (msgInfo) {\n    sucFn(msgInfo);\n  }, function (errInfo) {\n    errFn(errInfo);\n  });\n};\n\n\n/**\r\n    * acceptInviteFromGroup 接受加入申请\r\n    *\r\n    * @param options\r\n    */\nconnection.prototype.acceptInviteFromGroup = function (options) {\n  options.success = function () {\n    // then send sendAcceptInviteMessage\n    // connection.prototype.sendAcceptInviteMessage(optoins);\n  };\n  this.addGroupMembers(options);\n};\n\n/**\r\n    * rejectInviteFromGroup 拒绝加入申请\r\n    *\r\n    * throw request for now 暂时不处理，直接丢弃\r\n    *\r\n    * @param options\r\n    */\nconnection.prototype.rejectInviteFromGroup = function (options) {\n\n};\n//\n// /**\n//  * createGroup 创建群组\n//  *\n//  * 1. 创建申请 -> 得到房主身份\n//  * 2. 获取房主信息 -> 得到房间form\n//  * 3. 完善房间form -> 创建成功\n//  * 4. 添加房间成员\n//  * 5. 消息通知成员\n//  * @param options\n//  */\n// connection.prototype.createGroup = function(options){\n// \tvar roomId = +new Date();\n// \tvar toRoom = this._getGroupJid(roomId);\n// \tvar to = toRoom + \"/\" + this.context.userId;\n//\n// \tvar pres = StropheAll.$pres({ to: to })\n// \t.c(\"x\", { xmlns: \"http://jabber.org/protocol/muc\" }).up()\n// \t.c(\"create\", { xmlns: \"http://jabber.org/protocol/muc\" }).up();\n// \t// .c('c', {\n// \t//     hash: 'sha-1',\n// \t//     node: 'https://github.com/robbiehanson/XMPPFramework',\n// \t//     ver: 'k6gP4Ua5m4uu9YorAG0LRXM+kZY=',\n// \t//     xmlns: 'http://jabber.org/protocol/caps'\n// \t// }).up();\n//\n// \t// createGroupACK\n// \tthis.sendCommand(pres.tree());\n//\n// \tlet me = this;\n// \t// timeout hack for create group async\n// \tsetTimeout(function(){\n// \t\tvar x;\n// \t\t// Creating a Reserved Room\n// \t\tvar iq = $iq({ type: \"get\", to: toRoom })\n// \t\t.c(\"query\", { xmlns: \"http://jabber.org/protocol/muc#owner\" });\n// \t\t// Strophe.info('step 1 ----------');\n// \t\t// Strophe.info(options);\n// \t\tme.context.stropheConn.sendIQ(iq.tree(), function(msgInfo){\n// \t\t\t// for ie hack\n// \t\t\tif(\"setAttribute\" in msgInfo){\n// \t\t\t\t// Strophe.info('step 3 ----------');\n// \t\t\t\tx = msgInfo.getElementsByTagName(\"x\")[0];\n// \t\t\t\tx.setAttribute(\"type\", \"submit\");\n// \t\t\t}\n// \t\t\telse{\n// \t\t\t\t// Strophe.info('step 4 ----------');\n// \t\t\t\tStrophe.forEachChild(msgInfo, \"x\", function(field){\n// \t\t\t\t\tfield.setAttribute(\"type\", \"submit\");\n// \t\t\t\t});\n// \t\t\t}\n// \t\t\t// var rcv = msgInfo.getElementsByTagName('x');\n// \t\t\t// var v;\n// \t\t\t// if (rcv.length > 0) {\n// \t\t\t//     if (rcv[0].childNodes && rcv[0].childNodes.length > 0) {\n// \t\t\t//         v = rcv[0].childNodes[0].nodeValue;\n// \t\t\t//     } else {\n// \t\t\t//         v = rcv[0].innerHTML || rcv[0].innerText\n// \t\t\t//     }\n// \t\t\t//     mid = rcv[0].getAttribute('mid');\n// \t\t\t// }\n// \t\t\tStrophe.info(\"step 5 ----------\");\n// \t\t\tStrophe.forEachChild(x, \"field\", function(field){\n// \t\t\t\tvar fieldVar = field.getAttribute(\"var\");\n// \t\t\t\tvar valueDom = field.getElementsByTagName(\"value\")[0];\n// \t\t\t\tStrophe.info(fieldVar);\n// \t\t\t\tswitch(fieldVar){\n// \t\t\t\tcase \"muc#roomconfig_roomname\":\n// \t\t\t\t\t_setText(valueDom, options.subject || \"\");\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_roomdesc\":\n// \t\t\t\t\t_setText(valueDom, options.description || \"\");\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_publicroom\": // public 1\n// \t\t\t\t\t_setText(valueDom, +options.optionsPublic);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_membersonly\":\n// \t\t\t\t\t_setText(valueDom, +options.optionsMembersOnly);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_moderatedroom\":\n// \t\t\t\t\t_setText(valueDom, +options.optionsModerate);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_persistentroom\":\n// \t\t\t\t\t_setText(valueDom, 1);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_allowinvites\":\n// \t\t\t\t\t_setText(valueDom, +options.optionsAllowInvites);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_allowvisitornickchange\":\n// \t\t\t\t\t_setText(valueDom, 0);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_allowvisitorstatus\":\n// \t\t\t\t\t_setText(valueDom, 0);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"allow_private_messages\":\n// \t\t\t\t\t_setText(valueDom, 0);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"allow_private_messages_from_visitors\":\n// \t\t\t\t\t_setText(valueDom, \"nobody\");\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault:\n// \t\t\t\t\tbreak;\n// \t\t\t\t}\n// \t\t\t});\n//\n// \t\t\tlet iq = $iq({ to: toRoom, type: \"set\" })\n// \t\t\t.c(\"query\", { xmlns: \"http://jabber.org/protocol/muc#owner\" })\n// \t\t\t.cnode(x);\n// \t\t\tme.context.stropheConn.sendIQ(iq.tree(), function(msgInfo){\n// \t\t\t\t// sucFn(msgInfo);\n// \t\t\t\tme.addGroupMembers({\n// \t\t\t\t\tlist: options.members,\n// \t\t\t\t\troomId: roomId\n// \t\t\t\t});\n// \t\t\t}, function(errInfo){\n// \t\t\t\t// errFn(errInfo);\n// \t\t\t});\n// \t\t\t// sucFn(msgInfo);\n// \t\t}, function(errInfo){\n// \t\t\t// errFn(errInfo);\n// \t\t});\n// \t}, 1000);\n// };\n\n// function _setText(valueDom, v){\n// \tif(\"textContent\" in valueDom){\n// \t\tvalueDom.textContent = v;\n// \t}\n// \telse if(\"text\" in valueDom){\n// \t\tvalueDom.text = v;\n// \t}\n// \telse{\n// \t\t// Strophe.info('_setText 4 ----------');\n// \t\t// valueDom.innerHTML = v;\n// \t}\n// }\n// connection.prototype.onError = function () {\n//     return false;\n// };\n// window.WebIM = typeof WebIM !== 'undefined' ? WebIM : {};\nWebIM.connection = connection;\nWebIM.utils = _utils;\nWebIM.statusCode = _code;\nWebIM.message = _msg.message;\nWebIM.doQuery = function (str, suc, fail) {\n  if (typeof window.cefQuery === \"undefined\") {\n    return;\n  }\n  window.cefQuery({\n    request: str,\n    persistent: false,\n    onSuccess: suc,\n    onFailure: fail });\n\n};\n\nmodule.exports = WebIM;\n\nif (false) {}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 29:
/*!*************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/status.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n(function () {\n  var connIndex = 0;\n\n  exports.code = {\n    WEBIM_CONNCTION_USER_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_OPEN_ERROR: connIndex++,\n    WEBIM_CONNCTION_AUTH_ERROR: connIndex++,\n    WEBIM_CONNCTION_OPEN_USERGRID_ERROR: connIndex++,\n    WEBIM_CONNCTION_ATTACH_ERROR: connIndex++,\n    WEBIM_CONNCTION_ATTACH_USERGRID_ERROR: connIndex++,\n    WEBIM_CONNCTION_REOPEN_ERROR: connIndex++,\n    WEBIM_CONNCTION_SERVER_CLOSE_ERROR: connIndex++, // 7: client-side network offline (net::ERR_INTERNET_DISCONNECTED)\n    WEBIM_CONNCTION_SERVER_ERROR: connIndex++, // 8: offline by multi login\n    WEBIM_CONNCTION_IQ_ERROR: connIndex++,\n    WEBIM_CONNCTION_PING_ERROR: connIndex++,\n    WEBIM_CONNCTION_NOTIFYVERSION_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROSTER_ERROR: connIndex++,\n    WEBIM_CONNCTION_CROSSDOMAIN_ERROR: connIndex++,\n    WEBIM_CONNCTION_LISTENING_OUTOF_MAXRETRIES: connIndex++,\n    WEBIM_CONNCTION_RECEIVEMSG_CONTENTERROR: connIndex++,\n    WEBIM_CONNCTION_DISCONNECTED: connIndex++, // 16: server-side close the websocket connection\n    WEBIM_CONNCTION_AJAX_ERROR: connIndex++,\n    WEBIM_CONNCTION_JOINROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOMINFO_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOMMEMBER_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOMOCCUPANTS_ERROR: connIndex++,\n    WEBIM_CONNCTION_LOAD_CHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_NOT_SUPPORT_CHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_JOINCHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_QUITCHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_TOKEN_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_SESSIONID_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_RID_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_CALLBACK_INNER_ERROR: connIndex++,\n    WEBIM_CONNCTION_CLIENT_OFFLINE: connIndex++, // 32: client offline\n    WEBIM_CONNCTION_CLIENT_LOGOUT: connIndex++, // 33: client logout\n\n\n    WEBIM_UPLOADFILE_BROWSER_ERROR: 100,\n    WEBIM_UPLOADFILE_ERROR: 101,\n    WEBIM_UPLOADFILE_NO_LOGIN: 102,\n    WEBIM_UPLOADFILE_NO_FILE: 103,\n\n\n    WEBIM_DOWNLOADFILE_ERROR: 200,\n    WEBIM_DOWNLOADFILE_NO_LOGIN: 201,\n    WEBIM_DOWNLOADFILE_BROWSER_ERROR: 202,\n\n\n    WEBIM_MESSAGE_REC_TEXT: 300,\n    WEBIM_MESSAGE_REC_TEXT_ERROR: 301,\n    WEBIM_MESSAGE_REC_EMOTION: 302,\n    WEBIM_MESSAGE_REC_PHOTO: 303,\n    WEBIM_MESSAGE_REC_AUDIO: 304,\n    WEBIM_MESSAGE_REC_AUDIO_FILE: 305,\n    WEBIM_MESSAGE_REC_VEDIO: 306,\n    WEBIM_MESSAGE_REC_VEDIO_FILE: 307,\n    WEBIM_MESSAGE_REC_FILE: 308,\n    WEBIM_MESSAGE_SED_TEXT: 309,\n    WEBIM_MESSAGE_SED_EMOTION: 310,\n    WEBIM_MESSAGE_SED_PHOTO: 311,\n    WEBIM_MESSAGE_SED_AUDIO: 312,\n    WEBIM_MESSAGE_SED_AUDIO_FILE: 313,\n    WEBIM_MESSAGE_SED_VEDIO: 314,\n    WEBIM_MESSAGE_SED_VEDIO_FILE: 315,\n    WEBIM_MESSAGE_SED_FILE: 316,\n\n    STATUS_INIT: 400,\n    STATUS_DOLOGIN_USERGRID: 401,\n    STATUS_DOLOGIN_IM: 402,\n    STATUS_OPENED: 403,\n    STATUS_CLOSING: 404,\n    STATUS_CLOSED: 405,\n    STATUS_ERROR: 406 };\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  // fixed by xxxxxx (nvue vuex)\n  /* eslint-disable no-undef */\n  if(typeof SharedObject !== 'undefined'){\n    this.id = SharedObject.uid++;\n  } else {\n    this.id = uid++;\n  }\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\r\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\r\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\r\n  if (isUndef(propOptions)) {\r\n    return res\r\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\r\n  var attrs = data.attrs;\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\r\n    }\r\n  }\r\n  return res\r\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\n    /* eslint-disable no-undef */\r\n    var app = getApp();\r\n    if (app && app.onError) {\r\n      app.onError(err);\r\n    } else {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope && this.$scope[method]) {\r\n        return this.$scope[method](args)\r\n      }\r\n      // mp-alipay\r\n      if (typeof my === 'undefined') {\r\n        return\r\n      }\r\n      if (method === 'createSelectorQuery') {\r\n        /* eslint-disable no-undef */\r\n        return my.createSelectorQuery(args)\r\n      } else if (method === 'createIntersectionObserver') {\r\n        /* eslint-disable no-undef */\r\n        return my.createIntersectionObserver(args)\r\n      }\r\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook, args);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/utils.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {(function () {\n\n  var EMPTYFN = function EMPTYFN() {};\n  var _code = __webpack_require__(/*! ./status */ 29).code;\n  var WEBIM_FILESIZE_LIMIT = 10485760;\n  var _tmpUtilXHR = false;\n  var _hasFormData = typeof FormData !== \"undefined\";\n  var _hasBlob = typeof Blob !== \"undefined\";\n  var _isCanSetRequestHeader = _tmpUtilXHR.setRequestHeader || false;\n  var _hasOverrideMimeType = _tmpUtilXHR.overrideMimeType || false;\n  var _isCanUploadFileAsync = _isCanSetRequestHeader && _hasFormData;\n  var _isCanUploadFile = _isCanUploadFileAsync || false;\n  var _isCanDownLoadFile = _isCanSetRequestHeader && (_hasBlob || _hasOverrideMimeType);\n\n  if (!Object.keys) {\n    Object.keys = function () {\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var hasDontEnumBug = !{ toString: null }.propertyIsEnumerable(\"toString\");\n      var dontEnums = [\n      \"toString\",\n      \"toLocaleString\",\n      \"valueOf\",\n      \"hasOwnProperty\",\n      \"isPrototypeOf\",\n      \"propertyIsEnumerable\",\n      \"constructor\"];\n\n      var dontEnumsLength = dontEnums.length;\n\n      return function (obj) {\n        if (typeof obj !== \"object\" && (typeof obj !== \"function\" || obj === null)) {\n          throw new TypeError(\"Object.keys called on non-object\");\n        }\n        var result = [];\n        var prop;\n        var i;\n        for (prop in obj) {\n          if (hasOwnProperty.call(obj, prop)) {\n            result.push(prop);\n          }\n        }\n        if (hasDontEnumBug) {\n          for (i = 0; i < dontEnumsLength; i++) {\n            if (hasOwnProperty.call(obj, dontEnums[i])) {\n              result.push(dontEnums[i]);\n            }\n          }\n        }\n        return result;\n      };\n    }();\n  }\n\n  var utils = {\n    hasFormData: _hasFormData,\n    hasBlob: _hasBlob,\n    emptyfn: EMPTYFN,\n    isCanSetRequestHeader: _isCanSetRequestHeader,\n    hasOverrideMimeType: _hasOverrideMimeType,\n    isCanUploadFileAsync: _isCanUploadFileAsync,\n    isCanUploadFile: _isCanUploadFile,\n    isCanDownLoadFile: _isCanDownLoadFile,\n    isSupportWss: true,\n    hasFlash: false,\n    xmlrequest: false,\n\n    stringify: function stringify(json) {\n      if (typeof JSON !== \"undefined\" && JSON.stringify) {\n        return JSON.stringify(json);\n      }\n      var s = \"\";\n      var arr = [];\n      return iterate(json);\n\n      function iterate(json) {\n        var isArr = false;\n        if (Object.prototype.toString.call(json) === \"[object Array]\") {\n          arr.push(\"]\", \"[\");\n          isArr = true;\n        } else\n        if (Object.prototype.toString.call(json) === \"[object Object]\") {\n          arr.push(\"}\", \"{\");\n        }\n        for (var o in json) {\n          if (Object.prototype.toString.call(json[o]) === \"[object Null]\") {\n            json[o] = \"null\";\n          } else\n          if (Object.prototype.toString.call(json[o]) === \"[object Undefined]\") {\n            json[o] = \"undefined\";\n          }\n          if (json[o] && typeof json[o] === \"object\") {\n            s += \",\" + (isArr ? \"\" : \"\\\"\" + o + \"\\\":\" + (isArr ? \"\\\"\" : \"\")) + iterate(json[o]) + \"\";\n          } else\n          {\n            s += \",\\\"\" + (isArr ? \"\" : o + \"\\\":\\\"\") + json[o] + \"\\\"\";\n          }\n        }\n        if (s != \"\") {\n          s = s.slice(1);\n        }\n        return arr.pop() + s + arr.pop();\n      }\n    },\n\n    registerUser: function registerUser(options) {\n      var orgName = options.orgName || \"\";\n      var appName = options.appName || \"\";\n      var appKey = options.appKey || \"\";\n      var suc = options.success || EMPTYFN;\n      var err = options.error || EMPTYFN;\n\n      if (!orgName && !appName && appKey) {\n        var devInfos = appKey.split(\"#\");\n        if (devInfos.length === 2) {\n          orgName = devInfos[0];\n          appName = devInfos[1];\n        }\n      }\n      if (!orgName && !appName) {\n        err({\n          type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n        return false;\n      }\n      var apiUrl = options.apiUrl;\n      var restUrl = apiUrl + \"/\" + orgName + \"/\" + appName + \"/users\";\n      var userjson = {\n        username: options.username,\n        password: options.password,\n        nickname: options.nickname || \"\" };\n\n      var userinfo = utils.stringify(userjson);\n      options = {\n        url: restUrl,\n        data: userinfo,\n        success: suc,\n        error: err };\n\n      return utils.ajax(options);\n    },\n\n    login: function login(options) {\n      options = options || {};\n      var suc = options.success || EMPTYFN;\n      var err = options.error || EMPTYFN;\n      var appKey = options.appKey || \"\";\n      var devInfos = appKey.split(\"#\");\n      if (devInfos.length !== 2) {\n        err({\n          type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n        return false;\n      }\n      var orgName = devInfos[0];\n      var appName = devInfos[1];\n      var user = options.user || \"\";\n      var pwd = options.pwd || \"\";\n      var apiUrl = options.apiUrl;\n      var loginJson = {\n        grant_type: \"password\",\n        username: user,\n        password: pwd,\n        timestamp: +new Date() };\n\n      var loginfo = utils.stringify(loginJson);\n      options = {\n        url: apiUrl + \"/\" + orgName + \"/\" + appName + \"/token\",\n        data: loginfo,\n        success: suc,\n        error: err };\n\n      return utils.ajax(options);\n    },\n\n    getFileUrl: function getFileUrl(fileInputId) {\n      var uri = {\n        url: \"\",\n        filename: \"\",\n        filetype: \"\",\n        data: \"\" };\n\n      var fileObj = typeof fileInputId === \"string\" ?\n      document.getElementById(fileInputId) :\n      fileInputId;\n      if (!utils.isCanUploadFileAsync || !fileObj) {\n        return uri;\n      }\n      try {\n        if (window.URL.createObjectURL) {\n          var fileItems = fileObj.files; // 一个对象,文件列表\n          if (fileItems.length > 0) {\n            var u = fileItems.item(0); // 有关选取文件的信息\n            uri.data = u;\n            uri.url = window.URL.createObjectURL(u); // 指向该文件的URL\n            uri.filename = u.name || \"\";\n          }\n        }\n        var index = uri.filename.lastIndexOf(\".\");\n        if (index != -1) {\n          uri.filetype = uri.filename.substring(index + 1).toLowerCase();\n        }\n        return uri;\n      }\n      catch (e) {\n        throw e;\n      }\n    },\n\n    getFileSize: function getFileSize(fileInputId) {\n      var file = document.getElementById(fileInputId);\n      var fileSize = 0;\n      if (file) {\n        if (file.files) {\n          if (file.files.length > 0) {\n            fileSize = file.files[0].size;\n          }\n        }\n      }\n      return fileSize;\n    },\n\n    trim: function trim(str) {\n      str = typeof str === \"string\" ? str : \"\";\n      return str.trim ?\n      str.trim() :\n      str.replace(/^\\s|\\s$/g, \"\");\n    },\n\n    parseEmoji: function parseEmoji(msg) {\n      if (typeof WebIM.Emoji === \"undefined\" || typeof WebIM.Emoji.map === \"undefined\") {\n        return msg;\n      }\n      var emoji = WebIM.Emoji;\n      for (var face in emoji.map) {\n        if (emoji.map.hasOwnProperty(face)) {\n          while (msg.indexOf(face) > -1) {\n            msg = msg.replace(face, \"<image class=\\\"emoji\\\" src=\\\"\" + emoji.path + emoji.map[face] + \"\\\" /></image>\");\n          }\n        }\n      }\n      return msg;\n    },\n\n    parseLink: function parseLink(msg) {\n      var reg = /(https?:\\/\\/|www\\.)([a-zA-Z0-9-]+(\\.[a-zA-Z0-9]+)+)(:[0-9]{2,4})?\\/?((\\.[:_0-9a-zA-Z-]+)|[:_0-9a-zA-Z-]*\\/?)*\\??[:_#@*&%0-9a-zA-Z-/=]*/gm;\n      msg = msg.replace(reg, function (v) {\n        var prefix = /^https?/gm.test(v);\n        return \"<a href='\" + (prefix ? v : \"//\" + v) + \"' target='_blank'>\" + v + \"</a>\";\n      });\n      return msg;\n    },\n\n    parseJSON: function parseJSON(data) {\n      if (window.JSON && window.JSON.parse) {\n        return window.JSON.parse(data + \"\");\n      }\n      var requireNonComma;\n      var depth = null;\n      var str = utils.trim(data + \"\");\n      return str && !utils.trim(\n      str.replace(\n      /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g,\n      function (token, comma, open, close) {\n        if (requireNonComma && comma) {\n          depth = 0;\n        }\n        if (depth === 0) {\n          return token;\n        }\n        requireNonComma = open || comma;\n        depth += !close - !open;\n        return \"\";\n      })) ?\n\n      Function(\"return \" + str)() :\n      Function(\"Invalid JSON: \" + data)();\n    },\n\n    parseUploadResponse: function parseUploadResponse(response) {\n      return response.indexOf(\"callback\") > -1\n      // lte ie9\n      ? response.slice(9, -1) :\n      response;\n    },\n\n    parseDownloadResponse: function parseDownloadResponse(response) {\n      return (\n        response && response.type && response.type === \"application/json\" ||\n        Object.prototype.toString.call(response).indexOf(\"Blob\") < 0 ?\n\n        this.url + \"?token=\" :\n        window.URL.createObjectURL(response));\n    },\n\n    uploadFile: function uploadFile(options) {\n      options = options || {};\n      options.onFileUploadProgress = options.onFileUploadProgress || EMPTYFN;\n      options.onFileUploadComplete = options.onFileUploadComplete || EMPTYFN;\n      options.onFileUploadError = options.onFileUploadError || EMPTYFN;\n      options.onFileUploadCanceled = options.onFileUploadCanceled || EMPTYFN;\n      var acc = options.accessToken || this.context.accessToken;\n      if (!acc) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_NO_LOGIN,\n          id: options.id });\n\n        return;\n      }\n      var orgName, appName, devInfos;\n      var appKey = options.appKey || this.context.appKey || \"\";\n      if (appKey) {\n        devInfos = appKey.split(\"#\");\n        orgName = devInfos[0];\n        appName = devInfos[1];\n      }\n      if (!orgName && !appName) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id });\n\n        return;\n      }\n      var apiUrl = options.apiUrl;\n      var uploadUrl = apiUrl + \"/\" + orgName + \"/\" + appName + \"/chatfiles\";\n      if (!utils.isCanUploadFileAsync) {\n        if (utils.hasFlash && typeof options.flashUpload === \"function\") {\n          options.flashUpload && options.flashUpload(uploadUrl, options);\n        } else\n        {\n          options.onFileUploadError({\n            type: _code.WEBIM_UPLOADFILE_BROWSER_ERROR,\n            id: options.id });\n\n        }\n        return;\n      }\n      var fileSize = options.file.data ? options.file.data.size : undefined;\n      if (fileSize > WEBIM_FILESIZE_LIMIT) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id });\n\n        return;\n      } else\n      if (fileSize <= 0) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id });\n\n        return;\n      }\n      var xhr = utils.xmlrequest();\n      var onError = function onError(e) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id,\n          xhr: xhr });\n\n      };\n      if (xhr.upload) {\n        xhr.upload.addEventListener(\"progress\", options.onFileUploadProgress, false);\n      }\n      if (xhr.addEventListener) {\n        xhr.addEventListener(\"abort\", options.onFileUploadCanceled, false);\n        xhr.addEventListener(\"load\", function (e) {\n          try {\n            var json = utils.parseJSON(xhr.responseText);\n            try {\n              options.onFileUploadComplete(json);\n            }\n            catch (e) {\n              options.onFileUploadError({\n                type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n                data: e });\n\n            }\n          }\n          catch (e) {\n            options.onFileUploadError({\n              type: _code.WEBIM_UPLOADFILE_ERROR,\n              data: xhr.responseText,\n              id: options.id,\n              xhr: xhr });\n\n          }\n        }, false);\n        xhr.addEventListener(\"error\", onError, false);\n      } else\n      if (xhr.onreadystatechange) {\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            if (ajax.status === 200) {\n              try {\n                var json = utils.parseJSON(xhr.responseText);\n                options.onFileUploadComplete(json);\n              }\n              catch (e) {\n                options.onFileUploadError({\n                  type: _code.WEBIM_UPLOADFILE_ERROR,\n                  data: xhr.responseText,\n                  id: options.id,\n                  xhr: xhr });\n\n              }\n            } else\n            {\n              options.onFileUploadError({\n                type: _code.WEBIM_UPLOADFILE_ERROR,\n                data: xhr.responseText,\n                id: options.id,\n                xhr: xhr });\n\n            }\n          } else\n          {\n            xhr.abort();\n            options.onFileUploadCanceled();\n          }\n        };\n      }\n      xhr.open(\"POST\", uploadUrl);\n      xhr.setRequestHeader(\"restrict-access\", \"true\");\n      xhr.setRequestHeader(\"Accept\", \"*/*\"); // Android QQ browser has some problem with this attribute.\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + acc);\n      var formData = new FormData();\n      formData.append(\"file\", options.file.data);\n      xhr.send(formData);\n    },\n\n    download: function download(options) {\n      options.onFileDownloadComplete = options.onFileDownloadComplete || EMPTYFN;\n      options.onFileDownloadError = options.onFileDownloadError || EMPTYFN;\n      var accessToken = options.accessToken || this.context.accessToken;\n      var xhr = utils.xmlrequest();\n      if (!accessToken) {\n        options.onFileDownloadError({\n          type: _code.WEBIM_DOWNLOADFILE_NO_LOGIN,\n          id: options.id });\n\n        return;\n      }\n      var onError = function onError(e) {\n        options.onFileDownloadError({\n          type: _code.WEBIM_DOWNLOADFILE_ERROR,\n          id: options.id,\n          xhr: xhr });\n\n      };\n      if (!utils.isCanDownLoadFile) {\n        options.onFileDownloadComplete();\n        return;\n      }\n      if (\"addEventListener\" in xhr) {\n        xhr.addEventListener(\"load\", function (e) {\n          options.onFileDownloadComplete(xhr.response, xhr);\n        }, false);\n        xhr.addEventListener(\"error\", onError, false);\n      } else\n      if (\"onreadystatechange\" in xhr) {\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            if (ajax.status === 200) {\n              options.onFileDownloadComplete(xhr.response, xhr);\n            } else\n            {\n              options.onFileDownloadError({\n                type: _code.WEBIM_DOWNLOADFILE_ERROR,\n                id: options.id,\n                xhr: xhr });\n\n            }\n          } else\n          {\n            xhr.abort();\n            options.onFileDownloadError({\n              type: _code.WEBIM_DOWNLOADFILE_ERROR,\n              id: options.id,\n              xhr: xhr });\n\n          }\n        };\n      }\n      var method = options.method || \"GET\";\n      var resType = options.responseType || \"blob\";\n      var mimeType = options.mimeType || \"text/plain; charset=x-user-defined\";\n      xhr.open(method, options.url);\n      if (typeof Blob !== \"undefined\") {\n        xhr.responseType = resType;\n      } else\n      {\n        xhr.overrideMimeType(mimeType);\n      }\n      var innerHeaer = {\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        Accept: \"application/octet-stream\",\n        \"share-secret\": options.secret,\n        Authorization: \"Bearer \" + accessToken };\n\n      var headers = options.headers || {};\n      for (var key in headers) {\n        innerHeaer[key] = headers[key];\n      }\n      for (var _key in innerHeaer) {\n        if (innerHeaer[_key]) {\n          xhr.setRequestHeader(_key, innerHeaer[_key]);\n        }\n      }\n      xhr.send(null);\n    },\n\n    parseTextMessage: function parseTextMessage(message, faces) {\n      if (typeof message !== \"string\") {\n        return false;\n      }\n      if (Object.prototype.toString.call(faces) !== \"[object Object]\") {\n        return {\n          isemoji: false,\n          body: [\n          {\n            type: \"txt\",\n            data: message }] };\n\n\n\n      }\n      var receiveMsg = message;\n      var emessage = [];\n      var expr = /\\[[^[\\]]{2,3}\\]/mg;\n      var emoji = receiveMsg.match(expr);\n      if (!emoji || emoji.length < 1) {\n        return {\n          isemoji: false,\n          body: [\n          {\n            type: \"txt\",\n            data: message }] };\n\n\n\n      }\n\n      var isemoji = false;\n      for (var i = 0; i < emoji.length; i++) {\n        var tmsg = receiveMsg.substring(0, receiveMsg.indexOf(emoji[i]));\n        var existEmoji = faces.map[emoji[i]];\n        if (tmsg) {\n          emessage.push({\n            type: \"txt\",\n            data: tmsg });\n\n        }\n        if (!existEmoji) {\n          emessage.push({\n            type: \"txt\",\n            data: emoji[i] });\n\n          continue;\n        }\n        var emojiStr = faces.map ? existEmoji : null;\n        if (emojiStr) {\n          isemoji = true;\n          emessage.push({\n            type: \"emoji\",\n            data: emojiStr });\n\n        } else\n        {\n          emessage.push({\n            type: \"txt\",\n            data: emoji[i] });\n\n        }\n        var restMsgIndex = receiveMsg.indexOf(emoji[i]) + emoji[i].length;\n        receiveMsg = receiveMsg.substring(restMsgIndex);\n      }\n      if (receiveMsg) {\n        emessage.push({\n          type: \"txt\",\n          data: receiveMsg });\n\n      }\n      if (isemoji) {\n        return {\n          isemoji: isemoji,\n          body: emessage };\n\n      }\n      return {\n        isemoji: false,\n        body: [\n        {\n          type: \"txt\",\n          data: message }] };\n\n\n\n    },\n\n    ajax: function ajax(options) {var _arguments = arguments;\n      var suc = options.success || EMPTYFN;\n      var error = options.error || EMPTYFN;\n      var type = options.type || \"POST\",\n      data = options.data || null,\n      tempData = \"\";\n\n      if (type.toLowerCase() === \"get\" && data) {\n        for (var o in data) {\n          if (data.hasOwnProperty(o)) {\n            tempData += o + \"=\" + data[o] + \"&\";\n          }\n        }\n        tempData = tempData ? tempData.slice(0, -1) : tempData;\n        options.url += (options.url.indexOf(\"?\") > 0 ? \"&\" : \"?\") + (tempData ? tempData + \"&\" : tempData) + \"_v=\" + new Date().getTime();\n        data = null;\n        tempData = null;\n      }\n      console.log(__f__(\"wx.request\", options.url, \" at sdk\\\\utils.js:617\"));\n      wx.request({\n        url: options.url,\n        data: options.data,\n        header: options.headers,\n        method: type,\n        success: function success(res) {\n          console.log(__f__(\"wx.request.success\", arguments, \" at sdk\\\\utils.js:624\"));\n          if (res.statusCode == \"200\") {\n            suc(res);\n          } else\n          {\n            error(res);\n          }\n        },\n        complete: function complete(e) {\n          console.log(__f__(\"wx.request.complete\", _arguments, \" at sdk\\\\utils.js:633\"));\n        },\n        fail: function fail(e) {\n          console.log(__f__(\"wx.request.fail\", _arguments, \" at sdk\\\\utils.js:636\"));\n          uni.showModal({\n            title: '连接im失败,暂时无法使用聊天相关功能,请重新启动应用' });\n\n        } });\n\n    },\n\n    ts: function ts() {\n      var d = new Date();\n      var Hours = d.getHours(); // 获取当前小时数(0-23)\n      var Minutes = d.getMinutes(); // 获取当前分钟数(0-59)\n      var Seconds = d.getSeconds(); // 获取当前秒数(0-59)\n      var Milliseconds = d.getMilliseconds(); // 获取当前毫秒\n      return (Hours < 10 ? \"0\" + Hours : Hours) + \":\" + (\n      Minutes < 10 ? \"0\" + Minutes : Minutes) + \":\" + (\n      Seconds < 10 ? \"0\" + Seconds : Seconds) + \":\" +\n      Milliseconds + \" \";\n    },\n\n    getObjectKey: function getObjectKey(obj, val) {\n      for (var key in obj) {\n        if (obj[key] == val) {\n          return key;\n        }\n      }\n      return \"\";\n    } };\n\n\n\n  exports.utils = utils;\n\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 31:
/*!**************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/message.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var StropheAll = __webpack_require__(/*! ./libs/strophe */ 15);\n\n(function () {\n  var _utils = __webpack_require__(/*! ./utils */ 30).utils;\n  var Message = function Message(type, id) {\n    if (!(this instanceof Message)) {\n      return new Message(type);\n    }\n    this._msg = {};\n    if (typeof Message[type] === \"function\") {\n      Message[type].prototype.setGroup = this.setGroup;\n      this._msg = new Message[type](id);\n    }\n    return this._msg;\n  };\n  Message.prototype.setGroup = function (group) {\n    this.body.group = group;\n  };\n\n  /*\r\n      * Read Message\r\n      */\n  Message.read = function (id) {\n    this.id = id;\n    this.type = \"read\";\n  };\n\n  Message.read.prototype.set = function (opt) {\n    this.body = {\n      ackId: opt.id,\n      to: opt.to };\n\n  };\n\n  /*\r\n      * text message\r\n      */\n  Message.txt = function (id) {\n    this.id = id;\n    this.type = \"txt\";\n    this.body = {};\n  };\n  Message.txt.prototype.set = function (opt) {\n    this.value = opt.msg;\n    this.body = {\n      id: this.id,\n      from: opt.from,\n      to: opt.to,\n      msg: this.value,\n      type: this.type,\n      roomType: opt.roomType,\n      chatType: opt.chatType,\n      ext: opt.ext || {},\n      success: opt.success,\n      fail: opt.fail };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * cmd message\r\n      */\n  Message.cmd = function (id) {\n    this.id = id;\n    this.type = \"cmd\";\n    this.body = {};\n  };\n  Message.cmd.prototype.set = function (opt) {\n    this.value = \"\";\n\n    this.body = {\n      to: opt.to,\n      from: opt.from,\n      action: opt.action,\n      msg: this.value,\n      type: this.type,\n      roomType: opt.roomType,\n      ext: opt.ext || {} };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * loc message\r\n      */\n  Message.location = function (id) {\n    this.id = id;\n    this.type = \"loc\";\n    this.body = {};\n  };\n  Message.location.prototype.set = function (opt) {\n    this.body = {\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      roomType: opt.roomType,\n      addr: opt.addr,\n      lat: opt.lat,\n      lng: opt.lng,\n      chatType: opt.chatType,\n      ext: opt.ext || {} };\n\n  };\n\n  /*\r\n      * img message\r\n      */\n  Message.img = function (id) {\n    this.id = id;\n    this.type = \"img\";\n    this.body = {};\n  };\n  Message.img.prototype.set = function (opt) {\n    // opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n    // //console.log(opt)\n    this.value = opt.file;\n    this.body = {\n      id: this.id,\n      file: this.value,\n      apiUrl: opt.apiUrl,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      roomType: opt.roomType,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      width: opt.width,\n      height: opt.height,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * audio message\r\n      */\n  Message.audio = function (id) {\n    this.id = id;\n    this.type = \"audio\";\n    this.body = {};\n  };\n  Message.audio.prototype.set = function (opt) {\n    opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n\n    this.value = opt.file;\n    this.filename = opt.filename || this.value.filename;\n\n    this.body = {\n      id: this.id,\n      file: this.value,\n      filename: this.filename,\n      apiUrl: opt.apiUrl,\n      accessToken: opt.accessToken,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      length: opt.length || 0,\n      roomType: opt.roomType,\n      file_length: opt.file_length,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * file message\r\n      */\n  Message.file = function (id) {\n    this.id = id;\n    this.type = \"file\";\n    this.body = {};\n  };\n  Message.file.prototype.set = function (opt) {\n    opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n\n    this.value = opt.file;\n    this.filename = opt.filename || this.value.filename;\n\n    this.body = {\n      id: this.id,\n      file: this.value,\n      filename: this.filename,\n      apiUrl: opt.apiUrl,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      roomType: opt.roomType,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * video message\r\n      */\n  Message.video = function (id) {\n    this.id = id;\n    this.type = \"file\";\n    this.body = {};\n  };\n  Message.video.prototype.set = function (opt) {\n    opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n\n    this.value = opt.file;\n    this.filename = opt.filename || this.value.filename;\n\n    this.body = {\n      id: this.id,\n      file: this.value,\n      filename: this.filename,\n      apiUrl: opt.apiUrl,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      roomType: opt.roomType,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n\n\n\n  function _Message(message) {\n    if (!(this instanceof _Message)) {\n      return new _Message(message);\n    }\n    this.msg = message;\n  }\n  _Message.prototype.send = function (conn) {\n    var me = this;\n    var _send = function _send(message) {\n      message.ext = message.ext || {};\n      message.ext.weichat = message.ext.weichat || {};\n      message.ext.weichat.originType = message.ext.weichat.originType || \"webim\";\n      var json = {\n        from: conn.context.userId || \"\",\n        to: message.to,\n        bodies: [message.body],\n        ext: message.ext || {} };\n\n      var jsonstr = _utils.stringify(json);\n      var dom = StropheAll.\n      $msg({\n        type: message.group || \"chat\",\n        to: message.toJid,\n        id: message.id,\n        xmlns: \"jabber:client\" }).\n\n      c(\"body\").\n      t(jsonstr);\n\n      if (message.roomType) {\n        dom.\n        up().\n        c(\"roomtype\", {\n          xmlns: \"easemob:x:roomtype\",\n          type: \"chatroom\" });\n\n      }\n      if (message.bodyId) {\n        dom = StropheAll.\n        $msg({\n          from: conn.context.jid || \"\",\n          to: message.toJid,\n          id: message.id,\n          xmlns: \"jabber:client\" }).\n\n        c(\"body\").\n        t(message.bodyId);\n\n        var delivery = {\n          xmlns: \"urn:xmpp:receipts\",\n          id: message.bodyId };\n\n        dom.up().c(\"delivery\", delivery);\n      }\n\n      if (message.ackId) {\n\n        if (conn.context.jid.indexOf(message.toJid) >= 0) {\n          return;\n        }\n        dom = StropheAll.$msg({\n          from: conn.context.jid || \"\",\n          to: message.toJid,\n          id: message.id,\n          xmlns: \"jabber:client\" }).\n        c(\"body\").t(message.ackId);\n        var read = {\n          xmlns: \"urn:xmpp:receipts\",\n          id: message.ackId };\n\n        dom.up().c(\"acked\", read);\n      }\n\n      // setTimeout(function(){\n      // \tif(typeof _msgHash !== \"undefined\" && _msgHash[message.id]){\n      // \t\t_msgHash[message.id].msg.fail instanceof Function\n      // \t\t\t&& _msgHash[message.id].msg.fail(message.id);\n      // \t}\n      // }, 60000);\n      conn.sendCommand(dom.tree(), message.id);\n    };\n\n\n    if (me.msg.file) {\n      if (me.msg.body && me.msg.body.url) {// Only send msg\n        _send(me.msg);\n        return;\n      }\n      var _tmpComplete = me.msg.onFileUploadComplete;\n      var _complete = function _complete(data) {\n        if (data.entities[0][\"file-metadata\"]) {\n          var file_len = data.entities[0][\"file-metadata\"][\"content-length\"];\n          me.msg.file_length = file_len;\n          me.msg.filetype = data.entities[0][\"file-metadata\"][\"content-type\"];\n          if (file_len > 204800) {\n            me.msg.thumbnail = true;\n          }\n        }\n        me.msg.body = {\n          type: me.msg.type || \"file\",\n          url: data.uri + \"/\" + data.entities[0].uuid,\n          secret: data.entities[0][\"share-secret\"],\n          filename: me.msg.file.filename || me.msg.filename,\n          size: {\n            width: me.msg.width || 0,\n            height: me.msg.height || 0 },\n\n          length: me.msg.length || 0,\n          file_length: me.msg.file_length || 0,\n          filetype: me.msg.filetype };\n\n        _send(me.msg);\n        _tmpComplete instanceof Function && _tmpComplete(data, me.msg.id);\n      };\n      me.msg.onFileUploadComplete = _complete;\n      _utils.uploadFile.call(conn, me.msg);\n    } else\n    if (me.msg.type === \"img\") {//  添加img判断规则   wjy\n      _send(me.msg);\n    } else\n    {\n      me.msg.body = {\n        type: me.msg.type === \"chat\" ? \"txt\" : me.msg.type,\n        msg: me.msg.msg };\n\n      if (me.msg.type === \"cmd\") {\n        me.msg.body.action = me.msg.action;\n      } else\n      if (me.msg.type === \"loc\") {\n        me.msg.body.addr = me.msg.addr;\n        me.msg.body.lat = me.msg.lat;\n        me.msg.body.lng = me.msg.lng;\n      }\n      _send(me.msg);\n    }\n  };\n\n  exports._msg = _Message;\n  exports.message = Message;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 313:
/*!****************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/js/QSInputsPickerMixin.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default2 = function _default2() {\n  return {\n    props: {\n      placherhold: {\n        type: String,\n        default: '请选择' },\n\n      height: { //picker高度\n        type: Number,\n        default: 0 },\n\n      fontScale: { //picker内文字大小\n        type: Number,\n        default: .034 },\n\n      buttonSet: { //按钮设置\n        type: Object,\n        default: function _default() {\n          return {};\n        } },\n\n      dataSet: { //各类型携带的数据\n        type: Object,\n        default: function _default() {\n          return {};\n        } },\n\n      showReset: { //每次显示是否重置value\n        type: Boolean,\n        default: false },\n\n      pickerTitle: { //title标题\n        type: String,\n        default: '' },\n\n      mode: {\n        type: String,\n        default: 'bottom' },\n\n      zIndex: {\n        type: [Number, String],\n        default: 9999 },\n\n      bgColor_title: {\n        type: String,\n        default: '#F8F8F8' },\n\n      autoHide: {\n        type: Boolean,\n        default: true },\n\n      pickerTitleColor: {\n        type: String,\n        default: '#999' } },\n\n\n    data: function data() {\n      return {\n        nValue: this.value || {} };\n\n    },\n    methods: {\n      confirm: function confirm(obj) {\n        this.nValue = obj;\n        this.setValue(obj);\n      },\n      show: function show() {\n        this.$refs.inputsRef.show();\n      },\n      hide: function hide() {\n        this.$refs.inputsRef.hide();\n      },\n      pickerChange: function pickerChange(obj) {\n        this.$emit('pickerChange', obj);\n      } } };\n\n\n};exports.default = _default2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvanMvUVNJbnB1dHNQaWNrZXJNaXhpbi5qcyJdLCJuYW1lcyI6WyJwcm9wcyIsInBsYWNoZXJob2xkIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJoZWlnaHQiLCJOdW1iZXIiLCJmb250U2NhbGUiLCJidXR0b25TZXQiLCJPYmplY3QiLCJkYXRhU2V0Iiwic2hvd1Jlc2V0IiwiQm9vbGVhbiIsInBpY2tlclRpdGxlIiwibW9kZSIsInpJbmRleCIsImJnQ29sb3JfdGl0bGUiLCJhdXRvSGlkZSIsInBpY2tlclRpdGxlQ29sb3IiLCJkYXRhIiwiblZhbHVlIiwidmFsdWUiLCJtZXRob2RzIiwiY29uZmlybSIsIm9iaiIsInNldFZhbHVlIiwic2hvdyIsIiRyZWZzIiwiaW5wdXRzUmVmIiwiaGlkZSIsInBpY2tlckNoYW5nZSIsIiRlbWl0Il0sIm1hcHBpbmdzIjoidUdBQWUscUJBQU07QUFDcEIsU0FBTztBQUNOQSxTQUFLLEVBQUU7QUFDTkMsaUJBQVcsRUFBRTtBQUNaQyxZQUFJLEVBQUVDLE1BRE07QUFFWkMsZUFBTyxFQUFFLEtBRkcsRUFEUDs7QUFLTkMsWUFBTSxFQUFFLEVBQUU7QUFDVEgsWUFBSSxFQUFFSSxNQURDO0FBRVBGLGVBQU8sRUFBRSxDQUZGLEVBTEY7O0FBU05HLGVBQVMsRUFBRSxFQUFFO0FBQ1pMLFlBQUksRUFBRUksTUFESTtBQUVWRixlQUFPLEVBQUUsSUFGQyxFQVRMOztBQWFOSSxlQUFTLEVBQUUsRUFBRTtBQUNaTixZQUFJLEVBQUVPLE1BREk7QUFFVkwsZUFGVSxzQkFFQztBQUNWLGlCQUFPLEVBQVA7QUFDQSxTQUpTLEVBYkw7O0FBbUJOTSxhQUFPLEVBQUUsRUFBRTtBQUNWUixZQUFJLEVBQUVPLE1BREU7QUFFUkwsZUFGUSxzQkFFRztBQUNWLGlCQUFPLEVBQVA7QUFDQSxTQUpPLEVBbkJIOztBQXlCTk8sZUFBUyxFQUFFLEVBQUU7QUFDWlQsWUFBSSxFQUFFVSxPQURJO0FBRVZSLGVBQU8sRUFBRSxLQUZDLEVBekJMOztBQTZCTlMsaUJBQVcsRUFBRSxFQUFFO0FBQ2RYLFlBQUksRUFBRUMsTUFETTtBQUVaQyxlQUFPLEVBQUUsRUFGRyxFQTdCUDs7QUFpQ05VLFVBQUksRUFBRTtBQUNMWixZQUFJLEVBQUVDLE1BREQ7QUFFTEMsZUFBTyxFQUFFLFFBRkosRUFqQ0E7O0FBcUNOVyxZQUFNLEVBQUU7QUFDUGIsWUFBSSxFQUFFLENBQUNJLE1BQUQsRUFBU0gsTUFBVCxDQURDO0FBRVBDLGVBQU8sRUFBRSxJQUZGLEVBckNGOztBQXlDTlksbUJBQWEsRUFBRTtBQUNkZCxZQUFJLEVBQUVDLE1BRFE7QUFFZEMsZUFBTyxFQUFFLFNBRkssRUF6Q1Q7O0FBNkNOYSxjQUFRLEVBQUU7QUFDVGYsWUFBSSxFQUFFVSxPQURHO0FBRVRSLGVBQU8sRUFBRSxJQUZBLEVBN0NKOztBQWlETmMsc0JBQWdCLEVBQUU7QUFDakJoQixZQUFJLEVBQUVDLE1BRFc7QUFFakJDLGVBQU8sRUFBRSxNQUZRLEVBakRaLEVBREQ7OztBQXVETmUsUUF2RE0sa0JBdURDO0FBQ04sYUFBTztBQUNOQyxjQUFNLEVBQUUsS0FBS0MsS0FBTCxJQUFjLEVBRGhCLEVBQVA7O0FBR0EsS0EzREs7QUE0RE5DLFdBQU8sRUFBRTtBQUNSQyxhQURRLG1CQUNBQyxHQURBLEVBQ0s7QUFDWixhQUFLSixNQUFMLEdBQWNJLEdBQWQ7QUFDQSxhQUFLQyxRQUFMLENBQWNELEdBQWQ7QUFDQSxPQUpPO0FBS1JFLFVBTFEsa0JBS0Q7QUFDTixhQUFLQyxLQUFMLENBQVdDLFNBQVgsQ0FBcUJGLElBQXJCO0FBQ0EsT0FQTztBQVFSRyxVQVJRLGtCQVFEO0FBQ04sYUFBS0YsS0FBTCxDQUFXQyxTQUFYLENBQXFCQyxJQUFyQjtBQUNBLE9BVk87QUFXUkMsa0JBWFEsd0JBV0tOLEdBWEwsRUFXVTtBQUNqQixhQUFLTyxLQUFMLENBQVcsY0FBWCxFQUEyQlAsR0FBM0I7QUFDQSxPQWJPLEVBNURILEVBQVA7OztBQTRFQSxDIiwiZmlsZSI6IjMxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICgpID0+IHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0cHJvcHM6IHtcclxuXHRcdFx0cGxhY2hlcmhvbGQ6IHtcclxuXHRcdFx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHRcdFx0ZGVmYXVsdDogJ+ivt+mAieaLqSdcclxuXHRcdFx0fSxcclxuXHRcdFx0aGVpZ2h0OiB7IC8vcGlja2Vy6auY5bqmXHJcblx0XHRcdFx0dHlwZTogTnVtYmVyLFxyXG5cdFx0XHRcdGRlZmF1bHQ6IDBcclxuXHRcdFx0fSxcclxuXHRcdFx0Zm9udFNjYWxlOiB7IC8vcGlja2Vy5YaF5paH5a2X5aSn5bCPXHJcblx0XHRcdFx0dHlwZTogTnVtYmVyLFxyXG5cdFx0XHRcdGRlZmF1bHQ6IC4wMzRcclxuXHRcdFx0fSxcclxuXHRcdFx0YnV0dG9uU2V0OiB7IC8v5oyJ6ZKu6K6+572uXHJcblx0XHRcdFx0dHlwZTogT2JqZWN0LFxyXG5cdFx0XHRcdGRlZmF1bHQgKCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHt9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ZGF0YVNldDogeyAvL+WQhOexu+Wei+aQuuW4pueahOaVsOaNrlxyXG5cdFx0XHRcdHR5cGU6IE9iamVjdCxcclxuXHRcdFx0XHRkZWZhdWx0ICgpIHtcclxuXHRcdFx0XHRcdHJldHVybiB7fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdHNob3dSZXNldDogeyAvL+avj+asoeaYvuekuuaYr+WQpumHjee9rnZhbHVlXHJcblx0XHRcdFx0dHlwZTogQm9vbGVhbixcclxuXHRcdFx0XHRkZWZhdWx0OiBmYWxzZVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwaWNrZXJUaXRsZTogeyAvL3RpdGxl5qCH6aKYXHJcblx0XHRcdFx0dHlwZTogU3RyaW5nLFxyXG5cdFx0XHRcdGRlZmF1bHQ6ICcnXHJcblx0XHRcdH0sXHJcblx0XHRcdG1vZGU6IHtcclxuXHRcdFx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHRcdFx0ZGVmYXVsdDogJ2JvdHRvbSdcclxuXHRcdFx0fSxcclxuXHRcdFx0ekluZGV4OiB7XHJcblx0XHRcdFx0dHlwZTogW051bWJlciwgU3RyaW5nXSxcclxuXHRcdFx0XHRkZWZhdWx0OiA5OTk5XHJcblx0XHRcdH0sXHJcblx0XHRcdGJnQ29sb3JfdGl0bGU6IHtcclxuXHRcdFx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHRcdFx0ZGVmYXVsdDogJyNGOEY4RjgnXHJcblx0XHRcdH0sXHJcblx0XHRcdGF1dG9IaWRlOiB7XHJcblx0XHRcdFx0dHlwZTogQm9vbGVhbixcclxuXHRcdFx0XHRkZWZhdWx0OiB0cnVlXHJcblx0XHRcdH0sXHJcblx0XHRcdHBpY2tlclRpdGxlQ29sb3I6IHtcclxuXHRcdFx0XHR0eXBlOiBTdHJpbmcsXHJcblx0XHRcdFx0ZGVmYXVsdDogJyM5OTknXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRkYXRhKCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdG5WYWx1ZTogdGhpcy52YWx1ZSB8fCB7fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0bWV0aG9kczoge1xyXG5cdFx0XHRjb25maXJtKG9iaikge1xyXG5cdFx0XHRcdHRoaXMublZhbHVlID0gb2JqO1xyXG5cdFx0XHRcdHRoaXMuc2V0VmFsdWUob2JqKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0c2hvdygpIHtcclxuXHRcdFx0XHR0aGlzLiRyZWZzLmlucHV0c1JlZi5zaG93KCk7XHJcblx0XHRcdH0sXHJcblx0XHRcdGhpZGUoKSB7XHJcblx0XHRcdFx0dGhpcy4kcmVmcy5pbnB1dHNSZWYuaGlkZSgpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRwaWNrZXJDaGFuZ2Uob2JqKSB7XHJcblx0XHRcdFx0dGhpcy4kZW1pdCgncGlja2VyQ2hhbmdlJywgb2JqKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///313\n");

/***/ }),

/***/ 32:
/*!************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/sdk/queue.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("(function () {\n  function Array_h(length) {\n    this.array = length === undefined ? [] : new Array(length);\n  }\n\n  Array_h.prototype = {\n    /**\r\n                         * 返回数组长度\r\n                         *\r\n                         * @return {Number} length [数组长度]\r\n                         */\n    length: function length() {\n      return this.array.length;\n    },\n\n    at: function at(index) {\n      return this.array[index];\n    },\n\n    set: function set(index, obj) {\n      this.array[index] = obj;\n    },\n\n    /**\r\n        * 向数组的末尾添加一个或多个元素，并返回新的长度。\r\n        *\r\n        * @param  {*} obj [description]\r\n        * @return {Number} length [新数组的长度]\r\n        */\n    push: function push(obj) {\n      return this.array.push(obj);\n    },\n\n    /**\r\n        * 返回数组中选定的元素\r\n        *\r\n        * @param  {Number} start [开始索引值]\r\n        * @param  {Number} end [结束索引值]\r\n        * @return {Array} newArray  [新的数组]\r\n        */\n    slice: function slice(start, end) {\n      this.array = this.array.slice(start, end);\n      return this.array;\n    },\n\n    concat: function concat(array) {\n      this.array = this.array.concat(array);\n    },\n\n    remove: function remove(index, count) {\n      count = count === undefined ? 1 : count;\n      this.array.splice(index, count);\n    },\n\n    join: function join(separator) {\n      return this.array.join(separator);\n    },\n\n    clear: function clear() {\n      this.array.length = 0;\n    } };\n\n\n  /**\r\n          * 先进先出队列 (First Input First Output)\r\n          *\r\n          * 一种先进先出的数据缓存器\r\n          */\n  var Queue = function Queue() {\n    this._array_h = new Array_h();\n  };\n\n  Queue.prototype = {\n    _index: 0,\n\n    /**\r\n                * 排队\r\n                *\r\n                * @param  {Object} obj [description]\r\n                * @return {[type]}     [description]\r\n                */\n    push: function push(obj) {\n      this._array_h.push(obj);\n    },\n\n    /**\r\n        * 出队\r\n        *\r\n        * @return {Object} [description]\r\n        */\n    pop: function pop() {\n      var ret = null;\n      if (this._array_h.length()) {\n        ret = this._array_h.at(this._index);\n        if (++this._index * 2 >= this._array_h.length()) {\n          this._array_h.slice(this._index);\n          this._index = 0;\n        }\n      }\n      return ret;\n    },\n\n    /**\r\n        * 返回队列中头部(即最新添加的)的动态对象\r\n        *\r\n        * @return {Object} [description]\r\n        */\n    head: function head() {\n      var ret = null,len = this._array_h.length();\n      if (len) {\n        ret = this._array_h.at(len - 1);\n      }\n      return ret;\n    },\n\n    /**\r\n        * 返回队列中尾部(即最早添加的)的动态对象\r\n        *\r\n        * @return {Object} [description]\r\n        */\n    tail: function tail() {\n      var ret = null,len = this._array_h.length();\n      if (len) {\n        ret = this._array_h.at(this._index);\n      }\n      return ret;\n    },\n\n    /**\r\n        * 返回数据队列长度\r\n        *\r\n        * @return {Number} [description]\r\n        */\n    length: function length() {\n      return this._array_h.length() - this._index;\n    },\n\n    /**\r\n        * 队列是否为空\r\n        *\r\n        * @return {Boolean} [description]\r\n        */\n    empty: function empty() {\n      return this._array_h.length() === 0;\n    },\n\n    clear: function clear() {\n      this._array_h.clear();\n    } };\n\n\n  exports.Queue = Queue;\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 33:
/*!********************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/utils/WebIMConfig.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /**\r\n                                                                                                      * git do not control webim.config.js\r\n                                                                                                      * everyone should copy webim.config.js to webim.config.js\r\n                                                                                                      * and have their own configs.\r\n                                                                                                      * In this way , others won't be influenced by this config while git pull.\r\n                                                                                                      *\r\n                                                                                                      */\n\n// for react native\nvar location = {\n  protocol: \"https\" };\n\n\nvar config = {\n  /*\r\n                * XMPP server\r\n                */\n  xmppURL: \"wss://im-api.easemob.com/ws/\",\n  // xmppURL: '172.17.3.122:5280',\n  /*\r\n   * Backend REST API URL\r\n   */\n  // apiURL: (location.protocol === 'https:' ? 'https:' : 'http:') + '//a1.easemob.com',\n  // ios must be https!!! by lwz\n  apiURL: \"https://a1.easemob.com\",\n  // apiURL: (location.protocol === 'https:' ? 'https:' : 'http:') + '//172.17.3.155:8080',\n  /*\r\n   * Application AppKey\r\n   */\n  appkey: \"1114200118019238#shunpao\",\n  /*\r\n                                       * Whether to use HTTPS      '1177161227178308#xcx'\r\n                                       * @parameter {Boolean} true or false\r\n                                       */\n  https: false,\n  /*\r\n                 * isMultiLoginSessions\r\n                 * true: A visitor can sign in to multiple webpages and receive messages at all the webpages.\r\n                 * false: A visitor can sign in to only one webpage and receive messages at the webpage.\r\n                 */\n  isMultiLoginSessions: false,\n  /**\r\n                                * Whether to use window.doQuery()\r\n                                * @parameter {Boolean} true or false\r\n                                */\n  isWindowSDK: false,\n  /**\r\n                       * isSandBox=true:  xmppURL: 'im-api.sandbox.easemob.com',  apiURL: '//a1.sdb.easemob.com',\r\n                       * isSandBox=false: xmppURL: 'im-api.easemob.com',          apiURL: '//a1.easemob.com',\r\n                       * @parameter {Boolean} true or false\r\n                       */\n  isSandBox: false,\n  /**\r\n                     * Whether to console.log in strophe.log()\r\n                     * @parameter {Boolean} true or false\r\n                     */\n  isDebug: false,\n  /**\r\n                   * will auto connect the xmpp server autoReconnectNumMax times in background when client is offline.\r\n                   * won't auto connect if autoReconnectNumMax=0.\r\n                   */\n  autoReconnectNumMax: 15,\n  /**\r\n                            * the interval secons between each atuo reconnectting.\r\n                            * works only if autoReconnectMaxNum >= 2.\r\n                            */\n  autoReconnectInterval: 2,\n  /**\r\n                             * webrtc supports WebKit and https only\r\n                             */\n  isWebRTC: false,\n  /*\r\n                    * Set to auto sign-in\r\n                    */\n  isAutoLogin: true };var _default =\n\n\nconfig;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvV2ViSU1Db25maWcuanMiXSwibmFtZXMiOlsibG9jYXRpb24iLCJwcm90b2NvbCIsImNvbmZpZyIsInhtcHBVUkwiLCJhcGlVUkwiLCJhcHBrZXkiLCJodHRwcyIsImlzTXVsdGlMb2dpblNlc3Npb25zIiwiaXNXaW5kb3dTREsiLCJpc1NhbmRCb3giLCJpc0RlYnVnIiwiYXV0b1JlY29ubmVjdE51bU1heCIsImF1dG9SZWNvbm5lY3RJbnRlcnZhbCIsImlzV2ViUlRDIiwiaXNBdXRvTG9naW4iXSwibWFwcGluZ3MiOiJ3RkFBQTs7Ozs7Ozs7QUFRQTtBQUNBLElBQUlBLFFBQVEsR0FBRztBQUNkQyxVQUFRLEVBQUUsT0FESSxFQUFmOzs7QUFJQSxJQUFJQyxNQUFNLEdBQUc7QUFDWjs7O0FBR0FDLFNBQU8sRUFBRSw4QkFKRztBQUtaO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQUMsUUFBTSxFQUFFLHdCQVhJO0FBWVo7QUFDQTs7O0FBR0FDLFFBQU0sRUFBRSwwQkFoQkk7QUFpQlo7Ozs7QUFJQUMsT0FBSyxFQUFFLEtBckJLO0FBc0JaOzs7OztBQUtBQyxzQkFBb0IsRUFBRSxLQTNCVjtBQTRCWjs7OztBQUlBQyxhQUFXLEVBQUUsS0FoQ0Q7QUFpQ1o7Ozs7O0FBS0FDLFdBQVMsRUFBRSxLQXRDQztBQXVDWjs7OztBQUlBQyxTQUFPLEVBQUUsS0EzQ0c7QUE0Q1o7Ozs7QUFJQUMscUJBQW1CLEVBQUUsRUFoRFQ7QUFpRFo7Ozs7QUFJQUMsdUJBQXFCLEVBQUUsQ0FyRFg7QUFzRFo7OztBQUdBQyxVQUFRLEVBQUUsS0F6REU7QUEwRFo7OztBQUdBQyxhQUFXLEVBQUUsSUE3REQsRUFBYixDOzs7QUFnRWVaLE0iLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogZ2l0IGRvIG5vdCBjb250cm9sIHdlYmltLmNvbmZpZy5qc1xyXG4gKiBldmVyeW9uZSBzaG91bGQgY29weSB3ZWJpbS5jb25maWcuanMgdG8gd2ViaW0uY29uZmlnLmpzXHJcbiAqIGFuZCBoYXZlIHRoZWlyIG93biBjb25maWdzLlxyXG4gKiBJbiB0aGlzIHdheSAsIG90aGVycyB3b24ndCBiZSBpbmZsdWVuY2VkIGJ5IHRoaXMgY29uZmlnIHdoaWxlIGdpdCBwdWxsLlxyXG4gKlxyXG4gKi9cclxuXHJcbi8vIGZvciByZWFjdCBuYXRpdmVcclxubGV0IGxvY2F0aW9uID0ge1xyXG5cdHByb3RvY29sOiBcImh0dHBzXCJcclxufTtcclxuXHJcbmxldCBjb25maWcgPSB7XHJcblx0LypcclxuXHQgKiBYTVBQIHNlcnZlclxyXG5cdCAqL1xyXG5cdHhtcHBVUkw6IFwid3NzOi8vaW0tYXBpLmVhc2Vtb2IuY29tL3dzL1wiLFxyXG5cdC8vIHhtcHBVUkw6ICcxNzIuMTcuMy4xMjI6NTI4MCcsXHJcblx0LypcclxuXHQgKiBCYWNrZW5kIFJFU1QgQVBJIFVSTFxyXG5cdCAqL1xyXG5cdC8vIGFwaVVSTDogKGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdodHRwczonIDogJ2h0dHA6JykgKyAnLy9hMS5lYXNlbW9iLmNvbScsXHJcblx0Ly8gaW9zIG11c3QgYmUgaHR0cHMhISEgYnkgbHd6XHJcblx0YXBpVVJMOiBcImh0dHBzOi8vYTEuZWFzZW1vYi5jb21cIixcclxuXHQvLyBhcGlVUkw6IChsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vMTcyLjE3LjMuMTU1OjgwODAnLFxyXG5cdC8qXHJcblx0ICogQXBwbGljYXRpb24gQXBwS2V5XHJcblx0ICovXHJcblx0YXBwa2V5OiBcIjExMTQyMDAxMTgwMTkyMzgjc2h1bnBhb1wiLFxyXG5cdC8qXHJcblx0ICogV2hldGhlciB0byB1c2UgSFRUUFMgICAgICAnMTE3NzE2MTIyNzE3ODMwOCN4Y3gnXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGh0dHBzOiBmYWxzZSxcclxuXHQvKlxyXG5cdCAqIGlzTXVsdGlMb2dpblNlc3Npb25zXHJcblx0ICogdHJ1ZTogQSB2aXNpdG9yIGNhbiBzaWduIGluIHRvIG11bHRpcGxlIHdlYnBhZ2VzIGFuZCByZWNlaXZlIG1lc3NhZ2VzIGF0IGFsbCB0aGUgd2VicGFnZXMuXHJcblx0ICogZmFsc2U6IEEgdmlzaXRvciBjYW4gc2lnbiBpbiB0byBvbmx5IG9uZSB3ZWJwYWdlIGFuZCByZWNlaXZlIG1lc3NhZ2VzIGF0IHRoZSB3ZWJwYWdlLlxyXG5cdCAqL1xyXG5cdGlzTXVsdGlMb2dpblNlc3Npb25zOiBmYWxzZSxcclxuXHQvKipcclxuXHQgKiBXaGV0aGVyIHRvIHVzZSB3aW5kb3cuZG9RdWVyeSgpXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGlzV2luZG93U0RLOiBmYWxzZSxcclxuXHQvKipcclxuXHQgKiBpc1NhbmRCb3g9dHJ1ZTogIHhtcHBVUkw6ICdpbS1hcGkuc2FuZGJveC5lYXNlbW9iLmNvbScsICBhcGlVUkw6ICcvL2ExLnNkYi5lYXNlbW9iLmNvbScsXHJcblx0ICogaXNTYW5kQm94PWZhbHNlOiB4bXBwVVJMOiAnaW0tYXBpLmVhc2Vtb2IuY29tJywgICAgICAgICAgYXBpVVJMOiAnLy9hMS5lYXNlbW9iLmNvbScsXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGlzU2FuZEJveDogZmFsc2UsXHJcblx0LyoqXHJcblx0ICogV2hldGhlciB0byBjb25zb2xlLmxvZyBpbiBzdHJvcGhlLmxvZygpXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGlzRGVidWc6IGZhbHNlLFxyXG5cdC8qKlxyXG5cdCAqIHdpbGwgYXV0byBjb25uZWN0IHRoZSB4bXBwIHNlcnZlciBhdXRvUmVjb25uZWN0TnVtTWF4IHRpbWVzIGluIGJhY2tncm91bmQgd2hlbiBjbGllbnQgaXMgb2ZmbGluZS5cclxuXHQgKiB3b24ndCBhdXRvIGNvbm5lY3QgaWYgYXV0b1JlY29ubmVjdE51bU1heD0wLlxyXG5cdCAqL1xyXG5cdGF1dG9SZWNvbm5lY3ROdW1NYXg6IDE1LFxyXG5cdC8qKlxyXG5cdCAqIHRoZSBpbnRlcnZhbCBzZWNvbnMgYmV0d2VlbiBlYWNoIGF0dW8gcmVjb25uZWN0dGluZy5cclxuXHQgKiB3b3JrcyBvbmx5IGlmIGF1dG9SZWNvbm5lY3RNYXhOdW0gPj0gMi5cclxuXHQgKi9cclxuXHRhdXRvUmVjb25uZWN0SW50ZXJ2YWw6IDIsXHJcblx0LyoqXHJcblx0ICogd2VicnRjIHN1cHBvcnRzIFdlYktpdCBhbmQgaHR0cHMgb25seVxyXG5cdCAqL1xyXG5cdGlzV2ViUlRDOiBmYWxzZSxcclxuXHQvKlxyXG5cdCAqIFNldCB0byBhdXRvIHNpZ24taW5cclxuXHQgKi9cclxuXHRpc0F1dG9Mb2dpbjogdHJ1ZVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 4:
/*!**********************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/pages.json ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 419:
/*!*************************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/template/QS-picker/js/QS-picker.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function dateObj(props) {\n  this.startYear = props.startYear || new Date().getFullYear() - 5;\n  this.endYear = props.endYear || new Date().getFullYear() + 5;\n  this.defaultValue = props.defaultValue ? new Date(props.defaultValue) : new Date();\n  this.dateMode = props.dateMode || 3;\n  this.dateFormatArray = props.dateFormatArray || ['/', '/', ' ', ':', ':'];\n}\nfunction customObj(props) {\n  this.itemArray = props.itemArray || [];\n  this.linkage = props.linkage || false;\n  this.linkageNum = props.linkageNum || 2;\n  this.defaultValue = props.defaultValue || null;\n  this.steps = props.steps || {};\n}\nfunction custom2Obj(props) {\n  this.itemArray = props.itemArray || [];\n  this.itemObject = props.itemObject || {};\n  this.linkage = props.linkage || false;\n  this.linkageNum = props.linkageNum || 2;\n  this.defaultValue = props.defaultValue || null;\n  this.steps = props.steps || {};\n}\nfunction cityObj(props) {\n  this.defaultValue = props.defaultValue || [0, 0, 0];\n}\nvar _app = {\n  num2Array: function num2Array(num) {\n    var arr = [];\n    if (typeof num === 'number') {\n      for (var i = 1; i <= num; i++) {\n        arr.push(i);\n      }\n    }\n    return arr;\n  },\n  showToast: function showToast(msg) {\n    uni.showToast({\n      title: msg,\n      icon: 'none' });\n\n  },\n  showLoading: function showLoading(msg, ifmask) {\n    uni.showLoading({\n      title: msg,\n      mask: ifmask || false });\n\n  },\n  hideLoading: function hideLoading() {\n    uni.hideLoading();\n  },\n  //date\n  countDays: function countDays(Y, val) {\n    var days = new Date(Y, val[1] + 1, 0).getDate();\n    if (val) {\n      val[2] = val[2] < days - 1 ? val[2] : days - 1;\n    }\n    days = this.num2Array(days);\n    return {\n      days: days,\n      val: val };\n\n  },\n  countYears: function countYears(sy, ey) {\n    var _this = this;\n    var y = [];\n    var c = ey - sy;\n    for (var i = 0; i <= c; i++) {\n      y.push(sy + i);\n    }\n    return y;\n  },\n  creatDateObj: function creatDateObj(props) {\n    return new dateObj(props || {});\n  },\n  creatCustomObj: function creatCustomObj(props) {\n    return new customObj(props || {});\n  },\n  creatCustom2Obj: function creatCustom2Obj(props) {\n    return new custom2Obj(props || {});\n  } };var _default =\n\n_app;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvdGVtcGxhdGUvUVMtcGlja2VyL2pzL1FTLXBpY2tlci5qcyJdLCJuYW1lcyI6WyJkYXRlT2JqIiwicHJvcHMiLCJzdGFydFllYXIiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJlbmRZZWFyIiwiZGVmYXVsdFZhbHVlIiwiZGF0ZU1vZGUiLCJkYXRlRm9ybWF0QXJyYXkiLCJjdXN0b21PYmoiLCJpdGVtQXJyYXkiLCJsaW5rYWdlIiwibGlua2FnZU51bSIsInN0ZXBzIiwiY3VzdG9tMk9iaiIsIml0ZW1PYmplY3QiLCJjaXR5T2JqIiwiX2FwcCIsIm51bTJBcnJheSIsIm51bSIsImFyciIsImkiLCJwdXNoIiwic2hvd1RvYXN0IiwibXNnIiwidW5pIiwidGl0bGUiLCJpY29uIiwic2hvd0xvYWRpbmciLCJpZm1hc2siLCJtYXNrIiwiaGlkZUxvYWRpbmciLCJjb3VudERheXMiLCJZIiwidmFsIiwiZGF5cyIsImdldERhdGUiLCJjb3VudFllYXJzIiwic3kiLCJleSIsIl90aGlzIiwieSIsImMiLCJjcmVhdERhdGVPYmoiLCJjcmVhdEN1c3RvbU9iaiIsImNyZWF0Q3VzdG9tMk9iaiJdLCJtYXBwaW5ncyI6ImtJQUFBLFNBQVNBLE9BQVQsQ0FBa0JDLEtBQWxCLEVBQXlCO0FBQ3hCLE9BQUtDLFNBQUwsR0FBaUJELEtBQUssQ0FBQ0MsU0FBTixJQUFtQixJQUFJQyxJQUFKLEdBQVdDLFdBQVgsS0FBMkIsQ0FBL0Q7QUFDQSxPQUFLQyxPQUFMLEdBQWVKLEtBQUssQ0FBQ0ksT0FBTixJQUFpQixJQUFJRixJQUFKLEdBQVdDLFdBQVgsS0FBMkIsQ0FBM0Q7QUFDQSxPQUFLRSxZQUFMLEdBQW9CTCxLQUFLLENBQUNLLFlBQU4sR0FBbUIsSUFBSUgsSUFBSixDQUFTRixLQUFLLENBQUNLLFlBQWYsQ0FBbkIsR0FBZ0QsSUFBSUgsSUFBSixFQUFwRTtBQUNBLE9BQUtJLFFBQUwsR0FBZ0JOLEtBQUssQ0FBQ00sUUFBTixJQUFrQixDQUFsQztBQUNBLE9BQUtDLGVBQUwsR0FBdUJQLEtBQUssQ0FBQ08sZUFBTixJQUF5QixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixDQUFoRDtBQUNBO0FBQ0QsU0FBU0MsU0FBVCxDQUFvQlIsS0FBcEIsRUFBMkI7QUFDMUIsT0FBS1MsU0FBTCxHQUFpQlQsS0FBSyxDQUFDUyxTQUFOLElBQW1CLEVBQXBDO0FBQ0EsT0FBS0MsT0FBTCxHQUFlVixLQUFLLENBQUNVLE9BQU4sSUFBaUIsS0FBaEM7QUFDQSxPQUFLQyxVQUFMLEdBQWtCWCxLQUFLLENBQUNXLFVBQU4sSUFBb0IsQ0FBdEM7QUFDQSxPQUFLTixZQUFMLEdBQW9CTCxLQUFLLENBQUNLLFlBQU4sSUFBc0IsSUFBMUM7QUFDQSxPQUFLTyxLQUFMLEdBQWFaLEtBQUssQ0FBQ1ksS0FBTixJQUFlLEVBQTVCO0FBQ0E7QUFDRCxTQUFTQyxVQUFULENBQXFCYixLQUFyQixFQUE0QjtBQUMzQixPQUFLUyxTQUFMLEdBQWlCVCxLQUFLLENBQUNTLFNBQU4sSUFBbUIsRUFBcEM7QUFDQSxPQUFLSyxVQUFMLEdBQWtCZCxLQUFLLENBQUNjLFVBQU4sSUFBb0IsRUFBdEM7QUFDQSxPQUFLSixPQUFMLEdBQWVWLEtBQUssQ0FBQ1UsT0FBTixJQUFpQixLQUFoQztBQUNBLE9BQUtDLFVBQUwsR0FBa0JYLEtBQUssQ0FBQ1csVUFBTixJQUFvQixDQUF0QztBQUNBLE9BQUtOLFlBQUwsR0FBb0JMLEtBQUssQ0FBQ0ssWUFBTixJQUFzQixJQUExQztBQUNBLE9BQUtPLEtBQUwsR0FBYVosS0FBSyxDQUFDWSxLQUFOLElBQWUsRUFBNUI7QUFDQTtBQUNELFNBQVNHLE9BQVQsQ0FBa0JmLEtBQWxCLEVBQXlCO0FBQ3hCLE9BQUtLLFlBQUwsR0FBb0JMLEtBQUssQ0FBQ0ssWUFBTixJQUFzQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUExQztBQUNBO0FBQ0QsSUFBTVcsSUFBSSxHQUFHO0FBQ1pDLFdBRFkscUJBQ0ZDLEdBREUsRUFDRztBQUNkLFFBQU1DLEdBQUcsR0FBRyxFQUFaO0FBQ0EsUUFBRyxPQUFPRCxHQUFQLEtBQWUsUUFBbEIsRUFBNEI7QUFDM0IsV0FBSSxJQUFJRSxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLElBQUlGLEdBQXBCLEVBQXlCRSxDQUFDLEVBQTFCLEVBQThCO0FBQzdCRCxXQUFHLENBQUNFLElBQUosQ0FBU0QsQ0FBVDtBQUNBO0FBQ0Q7QUFDRCxXQUFPRCxHQUFQO0FBQ0EsR0FUVztBQVVaRyxXQVZZLHFCQVVGQyxHQVZFLEVBVUc7QUFDZEMsT0FBRyxDQUFDRixTQUFKLENBQWM7QUFDYkcsV0FBSyxFQUFFRixHQURNO0FBRWJHLFVBQUksRUFBRSxNQUZPLEVBQWQ7O0FBSUEsR0FmVztBQWdCWkMsYUFoQlksdUJBZ0JBSixHQWhCQSxFQWdCS0ssTUFoQkwsRUFnQmE7QUFDeEJKLE9BQUcsQ0FBQ0csV0FBSixDQUFnQjtBQUNmRixXQUFLLEVBQUVGLEdBRFE7QUFFZk0sVUFBSSxFQUFFRCxNQUFNLElBQUksS0FGRCxFQUFoQjs7QUFJQSxHQXJCVztBQXNCWkUsYUF0QlkseUJBc0JFO0FBQ2JOLE9BQUcsQ0FBQ00sV0FBSjtBQUNBLEdBeEJXO0FBeUJaO0FBQ0FDLFdBMUJZLHFCQTBCRkMsQ0ExQkUsRUEwQkNDLEdBMUJELEVBMEJNO0FBQ2pCLFFBQUlDLElBQUksR0FBRyxJQUFJaEMsSUFBSixDQUFTOEIsQ0FBVCxFQUFZQyxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQU8sQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUJFLE9BQXpCLEVBQVg7QUFDQSxRQUFJRixHQUFKLEVBQVM7QUFDUkEsU0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNDLElBQUksR0FBRyxDQUFoQixHQUFtQkQsR0FBRyxDQUFDLENBQUQsQ0FBdEIsR0FBNEJDLElBQUksR0FBRyxDQUE1QztBQUNBO0FBQ0RBLFFBQUksR0FBRyxLQUFLakIsU0FBTCxDQUFlaUIsSUFBZixDQUFQO0FBQ0EsV0FBTztBQUNOQSxVQUFJLEVBQUpBLElBRE07QUFFTkQsU0FBRyxFQUFIQSxHQUZNLEVBQVA7O0FBSUEsR0FwQ1c7QUFxQ1pHLFlBckNZLHNCQXFDREMsRUFyQ0MsRUFxQ0dDLEVBckNILEVBcUNPO0FBQ2xCLFFBQUlDLEtBQUssR0FBRyxJQUFaO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHLEVBQVI7QUFDQSxRQUFJQyxDQUFDLEdBQUdILEVBQUUsR0FBR0QsRUFBYjtBQUNBLFNBQUssSUFBSWpCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLElBQUlxQixDQUFyQixFQUF3QnJCLENBQUMsRUFBekIsRUFBNkI7QUFDNUJvQixPQUFDLENBQUNuQixJQUFGLENBQU9nQixFQUFFLEdBQUdqQixDQUFaO0FBQ0E7QUFDRCxXQUFPb0IsQ0FBUDtBQUNBLEdBN0NXO0FBOENaRSxjQTlDWSx3QkE4Q0MxQyxLQTlDRCxFQThDUTtBQUNuQixXQUFPLElBQUlELE9BQUosQ0FBWUMsS0FBSyxJQUFJLEVBQXJCLENBQVA7QUFDQSxHQWhEVztBQWlEWjJDLGdCQWpEWSwwQkFpREczQyxLQWpESCxFQWlEVTtBQUNyQixXQUFPLElBQUlRLFNBQUosQ0FBY1IsS0FBSyxJQUFJLEVBQXZCLENBQVA7QUFDQSxHQW5EVztBQW9EWjRDLGlCQXBEWSwyQkFvREk1QyxLQXBESixFQW9EVztBQUN0QixXQUFPLElBQUlhLFVBQUosQ0FBZWIsS0FBSyxJQUFJLEVBQXhCLENBQVA7QUFDQSxHQXREVyxFQUFiLEM7O0FBd0RlZ0IsSSIsImZpbGUiOiI0MTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBkYXRlT2JqIChwcm9wcykge1xyXG5cdHRoaXMuc3RhcnRZZWFyID0gcHJvcHMuc3RhcnRZZWFyIHx8IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSAtIDU7XHJcblx0dGhpcy5lbmRZZWFyID0gcHJvcHMuZW5kWWVhciB8fCBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCkgKyA1O1xyXG5cdHRoaXMuZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlP25ldyBEYXRlKHByb3BzLmRlZmF1bHRWYWx1ZSk6bmV3IERhdGUoKTtcclxuXHR0aGlzLmRhdGVNb2RlID0gcHJvcHMuZGF0ZU1vZGUgfHwgMztcclxuXHR0aGlzLmRhdGVGb3JtYXRBcnJheSA9IHByb3BzLmRhdGVGb3JtYXRBcnJheSB8fCBbJy8nLCAnLycsICcgJywgJzonLCAnOiddO1xyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbU9iaiAocHJvcHMpIHtcclxuXHR0aGlzLml0ZW1BcnJheSA9IHByb3BzLml0ZW1BcnJheSB8fCBbXTtcclxuXHR0aGlzLmxpbmthZ2UgPSBwcm9wcy5saW5rYWdlIHx8IGZhbHNlO1xyXG5cdHRoaXMubGlua2FnZU51bSA9IHByb3BzLmxpbmthZ2VOdW0gfHwgMjtcclxuXHR0aGlzLmRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSB8fCBudWxsO1xyXG5cdHRoaXMuc3RlcHMgPSBwcm9wcy5zdGVwcyB8fCB7fTtcclxufVxyXG5mdW5jdGlvbiBjdXN0b20yT2JqIChwcm9wcykge1xyXG5cdHRoaXMuaXRlbUFycmF5ID0gcHJvcHMuaXRlbUFycmF5IHx8IFtdO1xyXG5cdHRoaXMuaXRlbU9iamVjdCA9IHByb3BzLml0ZW1PYmplY3QgfHwge307XHJcblx0dGhpcy5saW5rYWdlID0gcHJvcHMubGlua2FnZSB8fCBmYWxzZTtcclxuXHR0aGlzLmxpbmthZ2VOdW0gPSBwcm9wcy5saW5rYWdlTnVtIHx8IDI7XHJcblx0dGhpcy5kZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUgfHwgbnVsbDtcclxuXHR0aGlzLnN0ZXBzID0gcHJvcHMuc3RlcHMgfHwge307XHJcbn1cclxuZnVuY3Rpb24gY2l0eU9iaiAocHJvcHMpIHtcclxuXHR0aGlzLmRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSB8fCBbMCwgMCwgMF07XHJcbn1cclxuY29uc3QgX2FwcCA9IHtcclxuXHRudW0yQXJyYXkobnVtKSB7XHJcblx0XHRjb25zdCBhcnIgPSBbXTtcclxuXHRcdGlmKHR5cGVvZiBudW0gPT09ICdudW1iZXInKSB7XHJcblx0XHRcdGZvcihsZXQgaSA9IDE7IGkgPD0gbnVtOyBpKyspIHtcclxuXHRcdFx0XHRhcnIucHVzaChpKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGFycjtcclxuXHR9LFxyXG5cdHNob3dUb2FzdChtc2cpIHtcclxuXHRcdHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0XHR0aXRsZTogbXNnLFxyXG5cdFx0XHRpY29uOiAnbm9uZSdcclxuXHRcdH0pXHJcblx0fSxcclxuXHRzaG93TG9hZGluZyhtc2csIGlmbWFzaykge1xyXG5cdFx0dW5pLnNob3dMb2FkaW5nKHtcclxuXHRcdFx0dGl0bGU6IG1zZyxcclxuXHRcdFx0bWFzazogaWZtYXNrIHx8IGZhbHNlXHJcblx0XHR9KVxyXG5cdH0sXHJcblx0aGlkZUxvYWRpbmcoKSB7XHJcblx0XHR1bmkuaGlkZUxvYWRpbmcoKTtcclxuXHR9LFxyXG5cdC8vZGF0ZVxyXG5cdGNvdW50RGF5cyhZLCB2YWwpIHtcclxuXHRcdGxldCBkYXlzID0gbmV3IERhdGUoWSwodmFsWzFdKzEpLDApLmdldERhdGUoKTtcclxuXHRcdGlmICh2YWwpIHtcclxuXHRcdFx0dmFsWzJdID0gdmFsWzJdIDwgZGF5cyAtIDE/IHZhbFsyXSA6IGRheXMgLSAxO1xyXG5cdFx0fVxyXG5cdFx0ZGF5cyA9IHRoaXMubnVtMkFycmF5KGRheXMpO1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZGF5cyxcclxuXHRcdFx0dmFsXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0Y291bnRZZWFycyhzeSwgZXkpIHtcclxuXHRcdGxldCBfdGhpcyA9IHRoaXM7XHJcblx0XHRsZXQgeSA9IFtdO1xyXG5cdFx0bGV0IGMgPSBleSAtIHN5O1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPD0gYzsgaSsrKSB7XHJcblx0XHRcdHkucHVzaChzeSArIGkpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHk7XHJcblx0fSxcclxuXHRjcmVhdERhdGVPYmoocHJvcHMpIHtcclxuXHRcdHJldHVybiBuZXcgZGF0ZU9iaihwcm9wcyB8fCB7fSk7XHJcblx0fSxcclxuXHRjcmVhdEN1c3RvbU9iaihwcm9wcykge1xyXG5cdFx0cmV0dXJuIG5ldyBjdXN0b21PYmoocHJvcHMgfHwge30pO1xyXG5cdH0sXHJcblx0Y3JlYXRDdXN0b20yT2JqKHByb3BzKSB7XHJcblx0XHRyZXR1cm4gbmV3IGN1c3RvbTJPYmoocHJvcHMgfHwge30pO1xyXG5cdH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBfYXBwO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///419\n");

/***/ }),

/***/ 420:
/*!*******************************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/template/QS-picker/js/QS-picker-mixin.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var Sys = uni.getSystemInfoSync();\nvar wH = Sys.windowHeight;\nvar wW = Sys.windowWidth;var _default2 =\nfunction _default2()\n\n{var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},QSPickerType = _ref.QSPickerType;\n  return {\n    props: {\n      height: { //picker高度\n        type: Number,\n        default: 0 },\n\n      lineHeight: {\n        type: Number,\n        default: .08 },\n\n      indicator_style: { //picker单行样式\n        type: String,\n        default: '' },\n\n      fontScale: { //picker内文字大小\n        type: Number,\n        default: .034 },\n\n      buttonSet: { //按钮设置\n        type: Object,\n        default: function _default() {\n          return {};\n        } },\n\n      dataSet: { //各类型携带的数据\n        type: Object,\n        default: function _default() {\n          return {};\n        } },\n\n      showReset: { //每次显示是否重置value\n        type: Boolean,\n        default: false },\n\n      title: { //title标题\n        type: String,\n        default: '' },\n\n      mode: {\n        type: String,\n        default: 'bottom' },\n\n      zIndex: {\n        type: [Number, String],\n        default: 9999 },\n\n      bgColor_title: {\n        type: String,\n        default: '#F8F8F8' },\n\n      autoHide: {\n        type: Boolean,\n        default: true },\n\n      titleColor: {\n        type: String,\n        default: '#999' },\n\n      contentColor: {\n        type: String,\n        default: 'black' } },\n\n\n    data: function data() {\n      var defaultFontScale = this.fontScale || .034;\n      var countContentSize = wW * Number(defaultFontScale);\n      var contentSize = countContentSize + 'px';\n      return {\n        setObj: {},\n        value: [],\n        defaultValue: [],\n        pickerViewStyle: \"font-size: \".concat(contentSize, \";color: {this.contentColor||'black'};\"),\n        columnHeight: \"height: \".concat(wH * (this.lineHeight || .08), \"px;\"),\n        columnStyle: \"font-size: 16px;\",\n        wH: wH,\n        wW: wW,\n        contentSize: contentSize,\n        onceShow: false };\n\n    },\n    watch: {\n      dataSet: function dataSet() {\n        this.init();\n        deep: true;\n      } },\n\n    methods: {\n      show: function show() {\n        this.$refs.QSPickerTem.show();\n        if (this.showReset) {\n          var defaultValue = this.defaultValue;\n          var data = QSPicker.countDays(this.years[defaultValue[0]], defaultValue);\n          this.days = data.days;\n          this.value = data.val;\n        }\n        if (!this.onceShow) {\n          this.onceShow = true;\n          this.init();\n        }\n        if (this.$refs.QSPickerTem.checkAsync && typeof this.$refs.QSPickerTem.checkAsync === 'function')\n        this.$refs.QSPickerTem.checkAsync();\n        this.$emit('showQSPicker');\n      },\n      hide: function hide() {\n        this.$refs.QSPickerTem.hide();\n        this.$emit('hideQSPicker');\n      },\n      voidFc: function voidFc() {} } };\n\n\n};exports.default = _default2;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///420\n");

/***/ }),

/***/ 428:
/*!*******************************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/template/QS-picker/city-data/province.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* eslint-disable */\nvar provinceData = [{\n  \"label\": \"北京市\",\n  \"value\": \"11\" },\n\n{\n  \"label\": \"天津市\",\n  \"value\": \"12\" },\n\n{\n  \"label\": \"河北省\",\n  \"value\": \"13\" },\n\n{\n  \"label\": \"山西省\",\n  \"value\": \"14\" },\n\n{\n  \"label\": \"内蒙古自治区\",\n  \"value\": \"15\" },\n\n{\n  \"label\": \"辽宁省\",\n  \"value\": \"21\" },\n\n{\n  \"label\": \"吉林省\",\n  \"value\": \"22\" },\n\n{\n  \"label\": \"黑龙江省\",\n  \"value\": \"23\" },\n\n{\n  \"label\": \"上海市\",\n  \"value\": \"31\" },\n\n{\n  \"label\": \"江苏省\",\n  \"value\": \"32\" },\n\n{\n  \"label\": \"浙江省\",\n  \"value\": \"33\" },\n\n{\n  \"label\": \"安徽省\",\n  \"value\": \"34\" },\n\n{\n  \"label\": \"福建省\",\n  \"value\": \"35\" },\n\n{\n  \"label\": \"江西省\",\n  \"value\": \"36\" },\n\n{\n  \"label\": \"山东省\",\n  \"value\": \"37\" },\n\n{\n  \"label\": \"河南省\",\n  \"value\": \"41\" },\n\n{\n  \"label\": \"湖北省\",\n  \"value\": \"42\" },\n\n{\n  \"label\": \"湖南省\",\n  \"value\": \"43\" },\n\n{\n  \"label\": \"广东省\",\n  \"value\": \"44\" },\n\n{\n  \"label\": \"广西壮族自治区\",\n  \"value\": \"45\" },\n\n{\n  \"label\": \"海南省\",\n  \"value\": \"46\" },\n\n{\n  \"label\": \"重庆市\",\n  \"value\": \"50\" },\n\n{\n  \"label\": \"四川省\",\n  \"value\": \"51\" },\n\n{\n  \"label\": \"贵州省\",\n  \"value\": \"52\" },\n\n{\n  \"label\": \"云南省\",\n  \"value\": \"53\" },\n\n{\n  \"label\": \"西藏自治区\",\n  \"value\": \"54\" },\n\n{\n  \"label\": \"陕西省\",\n  \"value\": \"61\" },\n\n{\n  \"label\": \"甘肃省\",\n  \"value\": \"62\" },\n\n{\n  \"label\": \"青海省\",\n  \"value\": \"63\" },\n\n{\n  \"label\": \"宁夏回族自治区\",\n  \"value\": \"64\" },\n\n{\n  \"label\": \"新疆维吾尔自治区\",\n  \"value\": \"65\" },\n\n{\n  \"label\": \"台湾\",\n  \"value\": \"66\" },\n\n{\n  \"label\": \"香港\",\n  \"value\": \"67\" },\n\n{\n  \"label\": \"澳门\",\n  \"value\": \"68\" }];var _default =\n\n\nprovinceData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy9RUy1pbnB1dHMtc3BsaXQvdGVtcGxhdGUvUVMtcGlja2VyL2NpdHktZGF0YS9wcm92aW5jZS5qcyJdLCJuYW1lcyI6WyJwcm92aW5jZURhdGEiXSwibWFwcGluZ3MiOiJ3RkFBQTtBQUNBLElBQUlBLFlBQVksR0FBRyxDQUFDO0FBQ2hCLFdBQVMsS0FETztBQUVoQixXQUFTLElBRk8sRUFBRDs7QUFJakI7QUFDRSxXQUFTLEtBRFg7QUFFRSxXQUFTLElBRlgsRUFKaUI7O0FBUWpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBUmlCOztBQVlqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQVppQjs7QUFnQmpCO0FBQ0UsV0FBUyxRQURYO0FBRUUsV0FBUyxJQUZYLEVBaEJpQjs7QUFvQmpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBcEJpQjs7QUF3QmpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBeEJpQjs7QUE0QmpCO0FBQ0UsV0FBUyxNQURYO0FBRUUsV0FBUyxJQUZYLEVBNUJpQjs7QUFnQ2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBaENpQjs7QUFvQ2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBcENpQjs7QUF3Q2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBeENpQjs7QUE0Q2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBNUNpQjs7QUFnRGpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBaERpQjs7QUFvRGpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBcERpQjs7QUF3RGpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBeERpQjs7QUE0RGpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBNURpQjs7QUFnRWpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBaEVpQjs7QUFvRWpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBcEVpQjs7QUF3RWpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBeEVpQjs7QUE0RWpCO0FBQ0UsV0FBUyxTQURYO0FBRUUsV0FBUyxJQUZYLEVBNUVpQjs7QUFnRmpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBaEZpQjs7QUFvRmpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBcEZpQjs7QUF3RmpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBeEZpQjs7QUE0RmpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBNUZpQjs7QUFnR2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBaEdpQjs7QUFvR2pCO0FBQ0UsV0FBUyxPQURYO0FBRUUsV0FBUyxJQUZYLEVBcEdpQjs7QUF3R2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBeEdpQjs7QUE0R2pCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBNUdpQjs7QUFnSGpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBaEhpQjs7QUFvSGpCO0FBQ0UsV0FBUyxTQURYO0FBRUUsV0FBUyxJQUZYLEVBcEhpQjs7QUF3SGpCO0FBQ0UsV0FBUyxVQURYO0FBRUUsV0FBUyxJQUZYLEVBeEhpQjs7QUE0SGpCO0FBQ0UsV0FBUyxJQURYO0FBRUUsV0FBUyxJQUZYLEVBNUhpQjs7QUFnSWpCO0FBQ0UsV0FBUyxJQURYO0FBRUUsV0FBUyxJQUZYLEVBaElpQjs7QUFvSWpCO0FBQ0UsV0FBUyxJQURYO0FBRUUsV0FBUyxJQUZYLEVBcElpQixDQUFuQixDOzs7QUF5SWVBLFkiLCJmaWxlIjoiNDI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBwcm92aW5jZURhdGEgPSBbe1xuICAgIFwibGFiZWxcIjogXCLljJfkuqzluIJcIixcbiAgICBcInZhbHVlXCI6IFwiMTFcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWkqea0peW4glwiLFxuICAgIFwidmFsdWVcIjogXCIxMlwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5rKz5YyX55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjEzXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlsbHopb/nnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMTRcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWGheiSmeWPpOiHquayu+WMulwiLFxuICAgIFwidmFsdWVcIjogXCIxNVwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi6L695a6B55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjIxXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlkInmnpfnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMjJcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIum7kem+meaxn+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCIyM1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5LiK5rW35biCXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjMxXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmsZ/oi4/nnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMzJcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIua1meaxn+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCIzM1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5a6J5b6955yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjM0XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLnpo/lu7rnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMzVcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuaxn+ilv+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCIzNlwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5bGx5Lic55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjM3XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmsrPljZfnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNDFcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIua5luWMl+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCI0MlwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5rmW5Y2X55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjQzXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlub/kuJznnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNDRcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuW5v+ilv+WjruaXj+iHquayu+WMulwiLFxuICAgIFwidmFsdWVcIjogXCI0NVwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5rW35Y2X55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjQ2XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLph43luobluIJcIixcbiAgICBcInZhbHVlXCI6IFwiNTBcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWbm+W3neecgVwiLFxuICAgIFwidmFsdWVcIjogXCI1MVwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi6LS15bee55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjUyXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLkupHljZfnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNTNcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuilv+iXj+iHquayu+WMulwiLFxuICAgIFwidmFsdWVcIjogXCI1NFwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi6ZmV6KW/55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjYxXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLnlJjogoPnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNjJcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIumdkua1t+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCI2M1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5a6B5aSP5Zue5peP6Ieq5rK75Yy6XCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjY0XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmlrDnlobnu7TlkL7lsJToh6rmsrvljLpcIixcbiAgICBcInZhbHVlXCI6IFwiNjVcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWPsOa5vlwiLFxuICAgIFwidmFsdWVcIjogXCI2NlwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi6aaZ5rivXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjY3XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmvrPpl6hcIixcbiAgICBcInZhbHVlXCI6IFwiNjhcIlxuICB9XG5dXG5leHBvcnQgZGVmYXVsdCBwcm92aW5jZURhdGE7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///428\n");

/***/ }),

/***/ 429:
/*!***************************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/template/QS-picker/city-data/city.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* eslint-disable */\nvar cityData = [\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"1101\" }],\n\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"1201\" }],\n\n[{\n  \"label\": \"石家庄市\",\n  \"value\": \"1301\" },\n\n{\n  \"label\": \"唐山市\",\n  \"value\": \"1302\" },\n\n{\n  \"label\": \"秦皇岛市\",\n  \"value\": \"1303\" },\n\n{\n  \"label\": \"邯郸市\",\n  \"value\": \"1304\" },\n\n{\n  \"label\": \"邢台市\",\n  \"value\": \"1305\" },\n\n{\n  \"label\": \"保定市\",\n  \"value\": \"1306\" },\n\n{\n  \"label\": \"张家口市\",\n  \"value\": \"1307\" },\n\n{\n  \"label\": \"承德市\",\n  \"value\": \"1308\" },\n\n{\n  \"label\": \"沧州市\",\n  \"value\": \"1309\" },\n\n{\n  \"label\": \"廊坊市\",\n  \"value\": \"1310\" },\n\n{\n  \"label\": \"衡水市\",\n  \"value\": \"1311\" }],\n\n\n[{\n  \"label\": \"太原市\",\n  \"value\": \"1401\" },\n\n{\n  \"label\": \"大同市\",\n  \"value\": \"1402\" },\n\n{\n  \"label\": \"阳泉市\",\n  \"value\": \"1403\" },\n\n{\n  \"label\": \"长治市\",\n  \"value\": \"1404\" },\n\n{\n  \"label\": \"晋城市\",\n  \"value\": \"1405\" },\n\n{\n  \"label\": \"朔州市\",\n  \"value\": \"1406\" },\n\n{\n  \"label\": \"晋中市\",\n  \"value\": \"1407\" },\n\n{\n  \"label\": \"运城市\",\n  \"value\": \"1408\" },\n\n{\n  \"label\": \"忻州市\",\n  \"value\": \"1409\" },\n\n{\n  \"label\": \"临汾市\",\n  \"value\": \"1410\" },\n\n{\n  \"label\": \"吕梁市\",\n  \"value\": \"1411\" }],\n\n\n[{\n  \"label\": \"呼和浩特市\",\n  \"value\": \"1501\" },\n\n{\n  \"label\": \"包头市\",\n  \"value\": \"1502\" },\n\n{\n  \"label\": \"乌海市\",\n  \"value\": \"1503\" },\n\n{\n  \"label\": \"赤峰市\",\n  \"value\": \"1504\" },\n\n{\n  \"label\": \"通辽市\",\n  \"value\": \"1505\" },\n\n{\n  \"label\": \"鄂尔多斯市\",\n  \"value\": \"1506\" },\n\n{\n  \"label\": \"呼伦贝尔市\",\n  \"value\": \"1507\" },\n\n{\n  \"label\": \"巴彦淖尔市\",\n  \"value\": \"1508\" },\n\n{\n  \"label\": \"乌兰察布市\",\n  \"value\": \"1509\" },\n\n{\n  \"label\": \"兴安盟\",\n  \"value\": \"1522\" },\n\n{\n  \"label\": \"锡林郭勒盟\",\n  \"value\": \"1525\" },\n\n{\n  \"label\": \"阿拉善盟\",\n  \"value\": \"1529\" }],\n\n\n[{\n  \"label\": \"沈阳市\",\n  \"value\": \"2101\" },\n\n{\n  \"label\": \"大连市\",\n  \"value\": \"2102\" },\n\n{\n  \"label\": \"鞍山市\",\n  \"value\": \"2103\" },\n\n{\n  \"label\": \"抚顺市\",\n  \"value\": \"2104\" },\n\n{\n  \"label\": \"本溪市\",\n  \"value\": \"2105\" },\n\n{\n  \"label\": \"丹东市\",\n  \"value\": \"2106\" },\n\n{\n  \"label\": \"锦州市\",\n  \"value\": \"2107\" },\n\n{\n  \"label\": \"营口市\",\n  \"value\": \"2108\" },\n\n{\n  \"label\": \"阜新市\",\n  \"value\": \"2109\" },\n\n{\n  \"label\": \"辽阳市\",\n  \"value\": \"2110\" },\n\n{\n  \"label\": \"盘锦市\",\n  \"value\": \"2111\" },\n\n{\n  \"label\": \"铁岭市\",\n  \"value\": \"2112\" },\n\n{\n  \"label\": \"朝阳市\",\n  \"value\": \"2113\" },\n\n{\n  \"label\": \"葫芦岛市\",\n  \"value\": \"2114\" }],\n\n\n[{\n  \"label\": \"长春市\",\n  \"value\": \"2201\" },\n\n{\n  \"label\": \"吉林市\",\n  \"value\": \"2202\" },\n\n{\n  \"label\": \"四平市\",\n  \"value\": \"2203\" },\n\n{\n  \"label\": \"辽源市\",\n  \"value\": \"2204\" },\n\n{\n  \"label\": \"通化市\",\n  \"value\": \"2205\" },\n\n{\n  \"label\": \"白山市\",\n  \"value\": \"2206\" },\n\n{\n  \"label\": \"松原市\",\n  \"value\": \"2207\" },\n\n{\n  \"label\": \"白城市\",\n  \"value\": \"2208\" },\n\n{\n  \"label\": \"延边朝鲜族自治州\",\n  \"value\": \"2224\" }],\n\n\n[{\n  \"label\": \"哈尔滨市\",\n  \"value\": \"2301\" },\n\n{\n  \"label\": \"齐齐哈尔市\",\n  \"value\": \"2302\" },\n\n{\n  \"label\": \"鸡西市\",\n  \"value\": \"2303\" },\n\n{\n  \"label\": \"鹤岗市\",\n  \"value\": \"2304\" },\n\n{\n  \"label\": \"双鸭山市\",\n  \"value\": \"2305\" },\n\n{\n  \"label\": \"大庆市\",\n  \"value\": \"2306\" },\n\n{\n  \"label\": \"伊春市\",\n  \"value\": \"2307\" },\n\n{\n  \"label\": \"佳木斯市\",\n  \"value\": \"2308\" },\n\n{\n  \"label\": \"七台河市\",\n  \"value\": \"2309\" },\n\n{\n  \"label\": \"牡丹江市\",\n  \"value\": \"2310\" },\n\n{\n  \"label\": \"黑河市\",\n  \"value\": \"2311\" },\n\n{\n  \"label\": \"绥化市\",\n  \"value\": \"2312\" },\n\n{\n  \"label\": \"大兴安岭地区\",\n  \"value\": \"2327\" }],\n\n\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"3101\" }],\n\n[{\n  \"label\": \"南京市\",\n  \"value\": \"3201\" },\n\n{\n  \"label\": \"无锡市\",\n  \"value\": \"3202\" },\n\n{\n  \"label\": \"徐州市\",\n  \"value\": \"3203\" },\n\n{\n  \"label\": \"常州市\",\n  \"value\": \"3204\" },\n\n{\n  \"label\": \"苏州市\",\n  \"value\": \"3205\" },\n\n{\n  \"label\": \"南通市\",\n  \"value\": \"3206\" },\n\n{\n  \"label\": \"连云港市\",\n  \"value\": \"3207\" },\n\n{\n  \"label\": \"淮安市\",\n  \"value\": \"3208\" },\n\n{\n  \"label\": \"盐城市\",\n  \"value\": \"3209\" },\n\n{\n  \"label\": \"扬州市\",\n  \"value\": \"3210\" },\n\n{\n  \"label\": \"镇江市\",\n  \"value\": \"3211\" },\n\n{\n  \"label\": \"泰州市\",\n  \"value\": \"3212\" },\n\n{\n  \"label\": \"宿迁市\",\n  \"value\": \"3213\" }],\n\n\n[{\n  \"label\": \"杭州市\",\n  \"value\": \"3301\" },\n\n{\n  \"label\": \"宁波市\",\n  \"value\": \"3302\" },\n\n{\n  \"label\": \"温州市\",\n  \"value\": \"3303\" },\n\n{\n  \"label\": \"嘉兴市\",\n  \"value\": \"3304\" },\n\n{\n  \"label\": \"湖州市\",\n  \"value\": \"3305\" },\n\n{\n  \"label\": \"绍兴市\",\n  \"value\": \"3306\" },\n\n{\n  \"label\": \"金华市\",\n  \"value\": \"3307\" },\n\n{\n  \"label\": \"衢州市\",\n  \"value\": \"3308\" },\n\n{\n  \"label\": \"舟山市\",\n  \"value\": \"3309\" },\n\n{\n  \"label\": \"台州市\",\n  \"value\": \"3310\" },\n\n{\n  \"label\": \"丽水市\",\n  \"value\": \"3311\" }],\n\n\n[{\n  \"label\": \"合肥市\",\n  \"value\": \"3401\" },\n\n{\n  \"label\": \"芜湖市\",\n  \"value\": \"3402\" },\n\n{\n  \"label\": \"蚌埠市\",\n  \"value\": \"3403\" },\n\n{\n  \"label\": \"淮南市\",\n  \"value\": \"3404\" },\n\n{\n  \"label\": \"马鞍山市\",\n  \"value\": \"3405\" },\n\n{\n  \"label\": \"淮北市\",\n  \"value\": \"3406\" },\n\n{\n  \"label\": \"铜陵市\",\n  \"value\": \"3407\" },\n\n{\n  \"label\": \"安庆市\",\n  \"value\": \"3408\" },\n\n{\n  \"label\": \"黄山市\",\n  \"value\": \"3410\" },\n\n{\n  \"label\": \"滁州市\",\n  \"value\": \"3411\" },\n\n{\n  \"label\": \"阜阳市\",\n  \"value\": \"3412\" },\n\n{\n  \"label\": \"宿州市\",\n  \"value\": \"3413\" },\n\n{\n  \"label\": \"六安市\",\n  \"value\": \"3415\" },\n\n{\n  \"label\": \"亳州市\",\n  \"value\": \"3416\" },\n\n{\n  \"label\": \"池州市\",\n  \"value\": \"3417\" },\n\n{\n  \"label\": \"宣城市\",\n  \"value\": \"3418\" }],\n\n\n[{\n  \"label\": \"福州市\",\n  \"value\": \"3501\" },\n\n{\n  \"label\": \"厦门市\",\n  \"value\": \"3502\" },\n\n{\n  \"label\": \"莆田市\",\n  \"value\": \"3503\" },\n\n{\n  \"label\": \"三明市\",\n  \"value\": \"3504\" },\n\n{\n  \"label\": \"泉州市\",\n  \"value\": \"3505\" },\n\n{\n  \"label\": \"漳州市\",\n  \"value\": \"3506\" },\n\n{\n  \"label\": \"南平市\",\n  \"value\": \"3507\" },\n\n{\n  \"label\": \"龙岩市\",\n  \"value\": \"3508\" },\n\n{\n  \"label\": \"宁德市\",\n  \"value\": \"3509\" }],\n\n\n[{\n  \"label\": \"南昌市\",\n  \"value\": \"3601\" },\n\n{\n  \"label\": \"景德镇市\",\n  \"value\": \"3602\" },\n\n{\n  \"label\": \"萍乡市\",\n  \"value\": \"3603\" },\n\n{\n  \"label\": \"九江市\",\n  \"value\": \"3604\" },\n\n{\n  \"label\": \"新余市\",\n  \"value\": \"3605\" },\n\n{\n  \"label\": \"鹰潭市\",\n  \"value\": \"3606\" },\n\n{\n  \"label\": \"赣州市\",\n  \"value\": \"3607\" },\n\n{\n  \"label\": \"吉安市\",\n  \"value\": \"3608\" },\n\n{\n  \"label\": \"宜春市\",\n  \"value\": \"3609\" },\n\n{\n  \"label\": \"抚州市\",\n  \"value\": \"3610\" },\n\n{\n  \"label\": \"上饶市\",\n  \"value\": \"3611\" }],\n\n\n[{\n  \"label\": \"济南市\",\n  \"value\": \"3701\" },\n\n{\n  \"label\": \"青岛市\",\n  \"value\": \"3702\" },\n\n{\n  \"label\": \"淄博市\",\n  \"value\": \"3703\" },\n\n{\n  \"label\": \"枣庄市\",\n  \"value\": \"3704\" },\n\n{\n  \"label\": \"东营市\",\n  \"value\": \"3705\" },\n\n{\n  \"label\": \"烟台市\",\n  \"value\": \"3706\" },\n\n{\n  \"label\": \"潍坊市\",\n  \"value\": \"3707\" },\n\n{\n  \"label\": \"济宁市\",\n  \"value\": \"3708\" },\n\n{\n  \"label\": \"泰安市\",\n  \"value\": \"3709\" },\n\n{\n  \"label\": \"威海市\",\n  \"value\": \"3710\" },\n\n{\n  \"label\": \"日照市\",\n  \"value\": \"3711\" },\n\n{\n  \"label\": \"莱芜市\",\n  \"value\": \"3712\" },\n\n{\n  \"label\": \"临沂市\",\n  \"value\": \"3713\" },\n\n{\n  \"label\": \"德州市\",\n  \"value\": \"3714\" },\n\n{\n  \"label\": \"聊城市\",\n  \"value\": \"3715\" },\n\n{\n  \"label\": \"滨州市\",\n  \"value\": \"3716\" },\n\n{\n  \"label\": \"菏泽市\",\n  \"value\": \"3717\" }],\n\n\n[{\n  \"label\": \"郑州市\",\n  \"value\": \"4101\" },\n\n{\n  \"label\": \"开封市\",\n  \"value\": \"4102\" },\n\n{\n  \"label\": \"洛阳市\",\n  \"value\": \"4103\" },\n\n{\n  \"label\": \"平顶山市\",\n  \"value\": \"4104\" },\n\n{\n  \"label\": \"安阳市\",\n  \"value\": \"4105\" },\n\n{\n  \"label\": \"鹤壁市\",\n  \"value\": \"4106\" },\n\n{\n  \"label\": \"新乡市\",\n  \"value\": \"4107\" },\n\n{\n  \"label\": \"焦作市\",\n  \"value\": \"4108\" },\n\n{\n  \"label\": \"濮阳市\",\n  \"value\": \"4109\" },\n\n{\n  \"label\": \"许昌市\",\n  \"value\": \"4110\" },\n\n{\n  \"label\": \"漯河市\",\n  \"value\": \"4111\" },\n\n{\n  \"label\": \"三门峡市\",\n  \"value\": \"4112\" },\n\n{\n  \"label\": \"南阳市\",\n  \"value\": \"4113\" },\n\n{\n  \"label\": \"商丘市\",\n  \"value\": \"4114\" },\n\n{\n  \"label\": \"信阳市\",\n  \"value\": \"4115\" },\n\n{\n  \"label\": \"周口市\",\n  \"value\": \"4116\" },\n\n{\n  \"label\": \"驻马店市\",\n  \"value\": \"4117\" },\n\n{\n  \"label\": \"省直辖县级行政区划\",\n  \"value\": \"4190\" }],\n\n\n[{\n  \"label\": \"武汉市\",\n  \"value\": \"4201\" },\n\n{\n  \"label\": \"黄石市\",\n  \"value\": \"4202\" },\n\n{\n  \"label\": \"十堰市\",\n  \"value\": \"4203\" },\n\n{\n  \"label\": \"宜昌市\",\n  \"value\": \"4205\" },\n\n{\n  \"label\": \"襄阳市\",\n  \"value\": \"4206\" },\n\n{\n  \"label\": \"鄂州市\",\n  \"value\": \"4207\" },\n\n{\n  \"label\": \"荆门市\",\n  \"value\": \"4208\" },\n\n{\n  \"label\": \"孝感市\",\n  \"value\": \"4209\" },\n\n{\n  \"label\": \"荆州市\",\n  \"value\": \"4210\" },\n\n{\n  \"label\": \"黄冈市\",\n  \"value\": \"4211\" },\n\n{\n  \"label\": \"咸宁市\",\n  \"value\": \"4212\" },\n\n{\n  \"label\": \"随州市\",\n  \"value\": \"4213\" },\n\n{\n  \"label\": \"恩施土家族苗族自治州\",\n  \"value\": \"4228\" },\n\n{\n  \"label\": \"省直辖县级行政区划\",\n  \"value\": \"4290\" }],\n\n\n[{\n  \"label\": \"长沙市\",\n  \"value\": \"4301\" },\n\n{\n  \"label\": \"株洲市\",\n  \"value\": \"4302\" },\n\n{\n  \"label\": \"湘潭市\",\n  \"value\": \"4303\" },\n\n{\n  \"label\": \"衡阳市\",\n  \"value\": \"4304\" },\n\n{\n  \"label\": \"邵阳市\",\n  \"value\": \"4305\" },\n\n{\n  \"label\": \"岳阳市\",\n  \"value\": \"4306\" },\n\n{\n  \"label\": \"常德市\",\n  \"value\": \"4307\" },\n\n{\n  \"label\": \"张家界市\",\n  \"value\": \"4308\" },\n\n{\n  \"label\": \"益阳市\",\n  \"value\": \"4309\" },\n\n{\n  \"label\": \"郴州市\",\n  \"value\": \"4310\" },\n\n{\n  \"label\": \"永州市\",\n  \"value\": \"4311\" },\n\n{\n  \"label\": \"怀化市\",\n  \"value\": \"4312\" },\n\n{\n  \"label\": \"娄底市\",\n  \"value\": \"4313\" },\n\n{\n  \"label\": \"湘西土家族苗族自治州\",\n  \"value\": \"4331\" }],\n\n\n[{\n  \"label\": \"广州市\",\n  \"value\": \"4401\" },\n\n{\n  \"label\": \"韶关市\",\n  \"value\": \"4402\" },\n\n{\n  \"label\": \"深圳市\",\n  \"value\": \"4403\" },\n\n{\n  \"label\": \"珠海市\",\n  \"value\": \"4404\" },\n\n{\n  \"label\": \"汕头市\",\n  \"value\": \"4405\" },\n\n{\n  \"label\": \"佛山市\",\n  \"value\": \"4406\" },\n\n{\n  \"label\": \"江门市\",\n  \"value\": \"4407\" },\n\n{\n  \"label\": \"湛江市\",\n  \"value\": \"4408\" },\n\n{\n  \"label\": \"茂名市\",\n  \"value\": \"4409\" },\n\n{\n  \"label\": \"肇庆市\",\n  \"value\": \"4412\" },\n\n{\n  \"label\": \"惠州市\",\n  \"value\": \"4413\" },\n\n{\n  \"label\": \"梅州市\",\n  \"value\": \"4414\" },\n\n{\n  \"label\": \"汕尾市\",\n  \"value\": \"4415\" },\n\n{\n  \"label\": \"河源市\",\n  \"value\": \"4416\" },\n\n{\n  \"label\": \"阳江市\",\n  \"value\": \"4417\" },\n\n{\n  \"label\": \"清远市\",\n  \"value\": \"4418\" },\n\n{\n  \"label\": \"东莞市\",\n  \"value\": \"4419\" },\n\n{\n  \"label\": \"中山市\",\n  \"value\": \"4420\" },\n\n{\n  \"label\": \"潮州市\",\n  \"value\": \"4451\" },\n\n{\n  \"label\": \"揭阳市\",\n  \"value\": \"4452\" },\n\n{\n  \"label\": \"云浮市\",\n  \"value\": \"4453\" }],\n\n\n[{\n  \"label\": \"南宁市\",\n  \"value\": \"4501\" },\n\n{\n  \"label\": \"柳州市\",\n  \"value\": \"4502\" },\n\n{\n  \"label\": \"桂林市\",\n  \"value\": \"4503\" },\n\n{\n  \"label\": \"梧州市\",\n  \"value\": \"4504\" },\n\n{\n  \"label\": \"北海市\",\n  \"value\": \"4505\" },\n\n{\n  \"label\": \"防城港市\",\n  \"value\": \"4506\" },\n\n{\n  \"label\": \"钦州市\",\n  \"value\": \"4507\" },\n\n{\n  \"label\": \"贵港市\",\n  \"value\": \"4508\" },\n\n{\n  \"label\": \"玉林市\",\n  \"value\": \"4509\" },\n\n{\n  \"label\": \"百色市\",\n  \"value\": \"4510\" },\n\n{\n  \"label\": \"贺州市\",\n  \"value\": \"4511\" },\n\n{\n  \"label\": \"河池市\",\n  \"value\": \"4512\" },\n\n{\n  \"label\": \"来宾市\",\n  \"value\": \"4513\" },\n\n{\n  \"label\": \"崇左市\",\n  \"value\": \"4514\" }],\n\n\n[{\n  \"label\": \"海口市\",\n  \"value\": \"4601\" },\n\n{\n  \"label\": \"三亚市\",\n  \"value\": \"4602\" },\n\n{\n  \"label\": \"三沙市\",\n  \"value\": \"4603\" },\n\n{\n  \"label\": \"儋州市\",\n  \"value\": \"4604\" },\n\n{\n  \"label\": \"省直辖县级行政区划\",\n  \"value\": \"4690\" }],\n\n\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"5001\" },\n\n{\n  \"label\": \"县\",\n  \"value\": \"5002\" }],\n\n\n[{\n  \"label\": \"成都市\",\n  \"value\": \"5101\" },\n\n{\n  \"label\": \"自贡市\",\n  \"value\": \"5103\" },\n\n{\n  \"label\": \"攀枝花市\",\n  \"value\": \"5104\" },\n\n{\n  \"label\": \"泸州市\",\n  \"value\": \"5105\" },\n\n{\n  \"label\": \"德阳市\",\n  \"value\": \"5106\" },\n\n{\n  \"label\": \"绵阳市\",\n  \"value\": \"5107\" },\n\n{\n  \"label\": \"广元市\",\n  \"value\": \"5108\" },\n\n{\n  \"label\": \"遂宁市\",\n  \"value\": \"5109\" },\n\n{\n  \"label\": \"内江市\",\n  \"value\": \"5110\" },\n\n{\n  \"label\": \"乐山市\",\n  \"value\": \"5111\" },\n\n{\n  \"label\": \"南充市\",\n  \"value\": \"5113\" },\n\n{\n  \"label\": \"眉山市\",\n  \"value\": \"5114\" },\n\n{\n  \"label\": \"宜宾市\",\n  \"value\": \"5115\" },\n\n{\n  \"label\": \"广安市\",\n  \"value\": \"5116\" },\n\n{\n  \"label\": \"达州市\",\n  \"value\": \"5117\" },\n\n{\n  \"label\": \"雅安市\",\n  \"value\": \"5118\" },\n\n{\n  \"label\": \"巴中市\",\n  \"value\": \"5119\" },\n\n{\n  \"label\": \"资阳市\",\n  \"value\": \"5120\" },\n\n{\n  \"label\": \"阿坝藏族羌族自治州\",\n  \"value\": \"5132\" },\n\n{\n  \"label\": \"甘孜藏族自治州\",\n  \"value\": \"5133\" },\n\n{\n  \"label\": \"凉山彝族自治州\",\n  \"value\": \"5134\" }],\n\n\n[{\n  \"label\": \"贵阳市\",\n  \"value\": \"5201\" },\n\n{\n  \"label\": \"六盘水市\",\n  \"value\": \"5202\" },\n\n{\n  \"label\": \"遵义市\",\n  \"value\": \"5203\" },\n\n{\n  \"label\": \"安顺市\",\n  \"value\": \"5204\" },\n\n{\n  \"label\": \"毕节市\",\n  \"value\": \"5205\" },\n\n{\n  \"label\": \"铜仁市\",\n  \"value\": \"5206\" },\n\n{\n  \"label\": \"黔西南布依族苗族自治州\",\n  \"value\": \"5223\" },\n\n{\n  \"label\": \"黔东南苗族侗族自治州\",\n  \"value\": \"5226\" },\n\n{\n  \"label\": \"黔南布依族苗族自治州\",\n  \"value\": \"5227\" }],\n\n\n[{\n  \"label\": \"昆明市\",\n  \"value\": \"5301\" },\n\n{\n  \"label\": \"曲靖市\",\n  \"value\": \"5303\" },\n\n{\n  \"label\": \"玉溪市\",\n  \"value\": \"5304\" },\n\n{\n  \"label\": \"保山市\",\n  \"value\": \"5305\" },\n\n{\n  \"label\": \"昭通市\",\n  \"value\": \"5306\" },\n\n{\n  \"label\": \"丽江市\",\n  \"value\": \"5307\" },\n\n{\n  \"label\": \"普洱市\",\n  \"value\": \"5308\" },\n\n{\n  \"label\": \"临沧市\",\n  \"value\": \"5309\" },\n\n{\n  \"label\": \"楚雄彝族自治州\",\n  \"value\": \"5323\" },\n\n{\n  \"label\": \"红河哈尼族彝族自治州\",\n  \"value\": \"5325\" },\n\n{\n  \"label\": \"文山壮族苗族自治州\",\n  \"value\": \"5326\" },\n\n{\n  \"label\": \"西双版纳傣族自治州\",\n  \"value\": \"5328\" },\n\n{\n  \"label\": \"大理白族自治州\",\n  \"value\": \"5329\" },\n\n{\n  \"label\": \"德宏傣族景颇族自治州\",\n  \"value\": \"5331\" },\n\n{\n  \"label\": \"怒江傈僳族自治州\",\n  \"value\": \"5333\" },\n\n{\n  \"label\": \"迪庆藏族自治州\",\n  \"value\": \"5334\" }],\n\n\n[{\n  \"label\": \"拉萨市\",\n  \"value\": \"5401\" },\n\n{\n  \"label\": \"日喀则市\",\n  \"value\": \"5402\" },\n\n{\n  \"label\": \"昌都市\",\n  \"value\": \"5403\" },\n\n{\n  \"label\": \"林芝市\",\n  \"value\": \"5404\" },\n\n{\n  \"label\": \"山南市\",\n  \"value\": \"5405\" },\n\n{\n  \"label\": \"那曲地区\",\n  \"value\": \"5424\" },\n\n{\n  \"label\": \"阿里地区\",\n  \"value\": \"5425\" }],\n\n\n[{\n  \"label\": \"西安市\",\n  \"value\": \"6101\" },\n\n{\n  \"label\": \"铜川市\",\n  \"value\": \"6102\" },\n\n{\n  \"label\": \"宝鸡市\",\n  \"value\": \"6103\" },\n\n{\n  \"label\": \"咸阳市\",\n  \"value\": \"6104\" },\n\n{\n  \"label\": \"渭南市\",\n  \"value\": \"6105\" },\n\n{\n  \"label\": \"延安市\",\n  \"value\": \"6106\" },\n\n{\n  \"label\": \"汉中市\",\n  \"value\": \"6107\" },\n\n{\n  \"label\": \"榆林市\",\n  \"value\": \"6108\" },\n\n{\n  \"label\": \"安康市\",\n  \"value\": \"6109\" },\n\n{\n  \"label\": \"商洛市\",\n  \"value\": \"6110\" }],\n\n\n[{\n  \"label\": \"兰州市\",\n  \"value\": \"6201\" },\n\n{\n  \"label\": \"嘉峪关市\",\n  \"value\": \"6202\" },\n\n{\n  \"label\": \"金昌市\",\n  \"value\": \"6203\" },\n\n{\n  \"label\": \"白银市\",\n  \"value\": \"6204\" },\n\n{\n  \"label\": \"天水市\",\n  \"value\": \"6205\" },\n\n{\n  \"label\": \"武威市\",\n  \"value\": \"6206\" },\n\n{\n  \"label\": \"张掖市\",\n  \"value\": \"6207\" },\n\n{\n  \"label\": \"平凉市\",\n  \"value\": \"6208\" },\n\n{\n  \"label\": \"酒泉市\",\n  \"value\": \"6209\" },\n\n{\n  \"label\": \"庆阳市\",\n  \"value\": \"6210\" },\n\n{\n  \"label\": \"定西市\",\n  \"value\": \"6211\" },\n\n{\n  \"label\": \"陇南市\",\n  \"value\": \"6212\" },\n\n{\n  \"label\": \"临夏回族自治州\",\n  \"value\": \"6229\" },\n\n{\n  \"label\": \"甘南藏族自治州\",\n  \"value\": \"6230\" }],\n\n\n[{\n  \"label\": \"西宁市\",\n  \"value\": \"6301\" },\n\n{\n  \"label\": \"海东市\",\n  \"value\": \"6302\" },\n\n{\n  \"label\": \"海北藏族自治州\",\n  \"value\": \"6322\" },\n\n{\n  \"label\": \"黄南藏族自治州\",\n  \"value\": \"6323\" },\n\n{\n  \"label\": \"海南藏族自治州\",\n  \"value\": \"6325\" },\n\n{\n  \"label\": \"果洛藏族自治州\",\n  \"value\": \"6326\" },\n\n{\n  \"label\": \"玉树藏族自治州\",\n  \"value\": \"6327\" },\n\n{\n  \"label\": \"海西蒙古族藏族自治州\",\n  \"value\": \"6328\" }],\n\n\n[{\n  \"label\": \"银川市\",\n  \"value\": \"6401\" },\n\n{\n  \"label\": \"石嘴山市\",\n  \"value\": \"6402\" },\n\n{\n  \"label\": \"吴忠市\",\n  \"value\": \"6403\" },\n\n{\n  \"label\": \"固原市\",\n  \"value\": \"6404\" },\n\n{\n  \"label\": \"中卫市\",\n  \"value\": \"6405\" }],\n\n\n[{\n  \"label\": \"乌鲁木齐市\",\n  \"value\": \"6501\" },\n\n{\n  \"label\": \"克拉玛依市\",\n  \"value\": \"6502\" },\n\n{\n  \"label\": \"吐鲁番市\",\n  \"value\": \"6504\" },\n\n{\n  \"label\": \"哈密市\",\n  \"value\": \"6505\" },\n\n{\n  \"label\": \"昌吉回族自治州\",\n  \"value\": \"6523\" },\n\n{\n  \"label\": \"博尔塔拉蒙古自治州\",\n  \"value\": \"6527\" },\n\n{\n  \"label\": \"巴音郭楞蒙古自治州\",\n  \"value\": \"6528\" },\n\n{\n  \"label\": \"阿克苏地区\",\n  \"value\": \"6529\" },\n\n{\n  \"label\": \"克孜勒苏柯尔克孜自治州\",\n  \"value\": \"6530\" },\n\n{\n  \"label\": \"喀什地区\",\n  \"value\": \"6531\" },\n\n{\n  \"label\": \"和田地区\",\n  \"value\": \"6532\" },\n\n{\n  \"label\": \"伊犁哈萨克自治州\",\n  \"value\": \"6540\" },\n\n{\n  \"label\": \"塔城地区\",\n  \"value\": \"6542\" },\n\n{\n  \"label\": \"阿勒泰地区\",\n  \"value\": \"6543\" },\n\n{\n  \"label\": \"自治区直辖县级行政区划\",\n  \"value\": \"6590\" }],\n\n\n[{\n  \"label\": \"台北\",\n  \"value\": \"6601\" },\n\n{\n  \"label\": \"高雄\",\n  \"value\": \"6602\" },\n\n{\n  \"label\": \"基隆\",\n  \"value\": \"6603\" },\n\n{\n  \"label\": \"台中\",\n  \"value\": \"6604\" },\n\n{\n  \"label\": \"台南\",\n  \"value\": \"6605\" },\n\n{\n  \"label\": \"新竹\",\n  \"value\": \"6606\" },\n\n{\n  \"label\": \"嘉义\",\n  \"value\": \"6607\" },\n\n{\n  \"label\": \"宜兰\",\n  \"value\": \"6608\" },\n\n{\n  \"label\": \"桃园\",\n  \"value\": \"6609\" },\n\n{\n  \"label\": \"苗栗\",\n  \"value\": \"6610\" },\n\n{\n  \"label\": \"彰化\",\n  \"value\": \"6611\" },\n\n{\n  \"label\": \"南投\",\n  \"value\": \"6612\" },\n\n{\n  \"label\": \"云林\",\n  \"value\": \"6613\" },\n\n{\n  \"label\": \"屏东\",\n  \"value\": \"6614\" },\n\n{\n  \"label\": \"台东\",\n  \"value\": \"6615\" },\n\n{\n  \"label\": \"花莲\",\n  \"value\": \"6616\" },\n\n{\n  \"label\": \"澎湖\",\n  \"value\": \"6617\" }],\n\n\n[{\n  \"label\": \"香港岛\",\n  \"value\": \"6701\" },\n\n{\n  \"label\": \"九龙\",\n  \"value\": \"6702\" },\n\n{\n  \"label\": \"新界\",\n  \"value\": \"6703\" }],\n\n\n[{\n  \"label\": \"澳门半岛\",\n  \"value\": \"6801\" },\n\n{\n  \"label\": \"氹仔岛\",\n  \"value\": \"6802\" },\n\n{\n  \"label\": \"路环岛\",\n  \"value\": \"6803\" },\n\n{\n  \"label\": \"路氹城\",\n  \"value\": \"6804\" }]];var _default =\n\n\n\ncityData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///429\n");

/***/ }),

/***/ 430:
/*!***************************************************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/components/QS-inputs-split/template/QS-picker/city-data/area.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* eslint-disable */\nvar areaData = [\n[\n[{\n  \"label\": \"东城区\",\n  \"value\": \"110101\" },\n\n{\n  \"label\": \"西城区\",\n  \"value\": \"110102\" },\n\n{\n  \"label\": \"朝阳区\",\n  \"value\": \"110105\" },\n\n{\n  \"label\": \"丰台区\",\n  \"value\": \"110106\" },\n\n{\n  \"label\": \"石景山区\",\n  \"value\": \"110107\" },\n\n{\n  \"label\": \"海淀区\",\n  \"value\": \"110108\" },\n\n{\n  \"label\": \"门头沟区\",\n  \"value\": \"110109\" },\n\n{\n  \"label\": \"房山区\",\n  \"value\": \"110111\" },\n\n{\n  \"label\": \"通州区\",\n  \"value\": \"110112\" },\n\n{\n  \"label\": \"顺义区\",\n  \"value\": \"110113\" },\n\n{\n  \"label\": \"昌平区\",\n  \"value\": \"110114\" },\n\n{\n  \"label\": \"大兴区\",\n  \"value\": \"110115\" },\n\n{\n  \"label\": \"怀柔区\",\n  \"value\": \"110116\" },\n\n{\n  \"label\": \"平谷区\",\n  \"value\": \"110117\" },\n\n{\n  \"label\": \"密云区\",\n  \"value\": \"110118\" },\n\n{\n  \"label\": \"延庆区\",\n  \"value\": \"110119\" }]],\n\n\n\n[\n[{\n  \"label\": \"和平区\",\n  \"value\": \"120101\" },\n\n{\n  \"label\": \"河东区\",\n  \"value\": \"120102\" },\n\n{\n  \"label\": \"河西区\",\n  \"value\": \"120103\" },\n\n{\n  \"label\": \"南开区\",\n  \"value\": \"120104\" },\n\n{\n  \"label\": \"河北区\",\n  \"value\": \"120105\" },\n\n{\n  \"label\": \"红桥区\",\n  \"value\": \"120106\" },\n\n{\n  \"label\": \"东丽区\",\n  \"value\": \"120110\" },\n\n{\n  \"label\": \"西青区\",\n  \"value\": \"120111\" },\n\n{\n  \"label\": \"津南区\",\n  \"value\": \"120112\" },\n\n{\n  \"label\": \"北辰区\",\n  \"value\": \"120113\" },\n\n{\n  \"label\": \"武清区\",\n  \"value\": \"120114\" },\n\n{\n  \"label\": \"宝坻区\",\n  \"value\": \"120115\" },\n\n{\n  \"label\": \"滨海新区\",\n  \"value\": \"120116\" },\n\n{\n  \"label\": \"宁河区\",\n  \"value\": \"120117\" },\n\n{\n  \"label\": \"静海区\",\n  \"value\": \"120118\" },\n\n{\n  \"label\": \"蓟州区\",\n  \"value\": \"120119\" }]],\n\n\n\n[\n[{\n  \"label\": \"长安区\",\n  \"value\": \"130102\" },\n\n{\n  \"label\": \"桥西区\",\n  \"value\": \"130104\" },\n\n{\n  \"label\": \"新华区\",\n  \"value\": \"130105\" },\n\n{\n  \"label\": \"井陉矿区\",\n  \"value\": \"130107\" },\n\n{\n  \"label\": \"裕华区\",\n  \"value\": \"130108\" },\n\n{\n  \"label\": \"藁城区\",\n  \"value\": \"130109\" },\n\n{\n  \"label\": \"鹿泉区\",\n  \"value\": \"130110\" },\n\n{\n  \"label\": \"栾城区\",\n  \"value\": \"130111\" },\n\n{\n  \"label\": \"井陉县\",\n  \"value\": \"130121\" },\n\n{\n  \"label\": \"正定县\",\n  \"value\": \"130123\" },\n\n{\n  \"label\": \"行唐县\",\n  \"value\": \"130125\" },\n\n{\n  \"label\": \"灵寿县\",\n  \"value\": \"130126\" },\n\n{\n  \"label\": \"高邑县\",\n  \"value\": \"130127\" },\n\n{\n  \"label\": \"深泽县\",\n  \"value\": \"130128\" },\n\n{\n  \"label\": \"赞皇县\",\n  \"value\": \"130129\" },\n\n{\n  \"label\": \"无极县\",\n  \"value\": \"130130\" },\n\n{\n  \"label\": \"平山县\",\n  \"value\": \"130131\" },\n\n{\n  \"label\": \"元氏县\",\n  \"value\": \"130132\" },\n\n{\n  \"label\": \"赵县\",\n  \"value\": \"130133\" },\n\n{\n  \"label\": \"石家庄高新技术产业开发区\",\n  \"value\": \"130171\" },\n\n{\n  \"label\": \"石家庄循环化工园区\",\n  \"value\": \"130172\" },\n\n{\n  \"label\": \"辛集市\",\n  \"value\": \"130181\" },\n\n{\n  \"label\": \"晋州市\",\n  \"value\": \"130183\" },\n\n{\n  \"label\": \"新乐市\",\n  \"value\": \"130184\" }],\n\n\n[{\n  \"label\": \"路南区\",\n  \"value\": \"130202\" },\n\n{\n  \"label\": \"路北区\",\n  \"value\": \"130203\" },\n\n{\n  \"label\": \"古冶区\",\n  \"value\": \"130204\" },\n\n{\n  \"label\": \"开平区\",\n  \"value\": \"130205\" },\n\n{\n  \"label\": \"丰南区\",\n  \"value\": \"130207\" },\n\n{\n  \"label\": \"丰润区\",\n  \"value\": \"130208\" },\n\n{\n  \"label\": \"曹妃甸区\",\n  \"value\": \"130209\" },\n\n{\n  \"label\": \"滦县\",\n  \"value\": \"130223\" },\n\n{\n  \"label\": \"滦南县\",\n  \"value\": \"130224\" },\n\n{\n  \"label\": \"乐亭县\",\n  \"value\": \"130225\" },\n\n{\n  \"label\": \"迁西县\",\n  \"value\": \"130227\" },\n\n{\n  \"label\": \"玉田县\",\n  \"value\": \"130229\" },\n\n{\n  \"label\": \"唐山市芦台经济技术开发区\",\n  \"value\": \"130271\" },\n\n{\n  \"label\": \"唐山市汉沽管理区\",\n  \"value\": \"130272\" },\n\n{\n  \"label\": \"唐山高新技术产业开发区\",\n  \"value\": \"130273\" },\n\n{\n  \"label\": \"河北唐山海港经济开发区\",\n  \"value\": \"130274\" },\n\n{\n  \"label\": \"遵化市\",\n  \"value\": \"130281\" },\n\n{\n  \"label\": \"迁安市\",\n  \"value\": \"130283\" }],\n\n\n[{\n  \"label\": \"海港区\",\n  \"value\": \"130302\" },\n\n{\n  \"label\": \"山海关区\",\n  \"value\": \"130303\" },\n\n{\n  \"label\": \"北戴河区\",\n  \"value\": \"130304\" },\n\n{\n  \"label\": \"抚宁区\",\n  \"value\": \"130306\" },\n\n{\n  \"label\": \"青龙满族自治县\",\n  \"value\": \"130321\" },\n\n{\n  \"label\": \"昌黎县\",\n  \"value\": \"130322\" },\n\n{\n  \"label\": \"卢龙县\",\n  \"value\": \"130324\" },\n\n{\n  \"label\": \"秦皇岛市经济技术开发区\",\n  \"value\": \"130371\" },\n\n{\n  \"label\": \"北戴河新区\",\n  \"value\": \"130372\" }],\n\n\n[{\n  \"label\": \"邯山区\",\n  \"value\": \"130402\" },\n\n{\n  \"label\": \"丛台区\",\n  \"value\": \"130403\" },\n\n{\n  \"label\": \"复兴区\",\n  \"value\": \"130404\" },\n\n{\n  \"label\": \"峰峰矿区\",\n  \"value\": \"130406\" },\n\n{\n  \"label\": \"肥乡区\",\n  \"value\": \"130407\" },\n\n{\n  \"label\": \"永年区\",\n  \"value\": \"130408\" },\n\n{\n  \"label\": \"临漳县\",\n  \"value\": \"130423\" },\n\n{\n  \"label\": \"成安县\",\n  \"value\": \"130424\" },\n\n{\n  \"label\": \"大名县\",\n  \"value\": \"130425\" },\n\n{\n  \"label\": \"涉县\",\n  \"value\": \"130426\" },\n\n{\n  \"label\": \"磁县\",\n  \"value\": \"130427\" },\n\n{\n  \"label\": \"邱县\",\n  \"value\": \"130430\" },\n\n{\n  \"label\": \"鸡泽县\",\n  \"value\": \"130431\" },\n\n{\n  \"label\": \"广平县\",\n  \"value\": \"130432\" },\n\n{\n  \"label\": \"馆陶县\",\n  \"value\": \"130433\" },\n\n{\n  \"label\": \"魏县\",\n  \"value\": \"130434\" },\n\n{\n  \"label\": \"曲周县\",\n  \"value\": \"130435\" },\n\n{\n  \"label\": \"邯郸经济技术开发区\",\n  \"value\": \"130471\" },\n\n{\n  \"label\": \"邯郸冀南新区\",\n  \"value\": \"130473\" },\n\n{\n  \"label\": \"武安市\",\n  \"value\": \"130481\" }],\n\n\n[{\n  \"label\": \"桥东区\",\n  \"value\": \"130502\" },\n\n{\n  \"label\": \"桥西区\",\n  \"value\": \"130503\" },\n\n{\n  \"label\": \"邢台县\",\n  \"value\": \"130521\" },\n\n{\n  \"label\": \"临城县\",\n  \"value\": \"130522\" },\n\n{\n  \"label\": \"内丘县\",\n  \"value\": \"130523\" },\n\n{\n  \"label\": \"柏乡县\",\n  \"value\": \"130524\" },\n\n{\n  \"label\": \"隆尧县\",\n  \"value\": \"130525\" },\n\n{\n  \"label\": \"任县\",\n  \"value\": \"130526\" },\n\n{\n  \"label\": \"南和县\",\n  \"value\": \"130527\" },\n\n{\n  \"label\": \"宁晋县\",\n  \"value\": \"130528\" },\n\n{\n  \"label\": \"巨鹿县\",\n  \"value\": \"130529\" },\n\n{\n  \"label\": \"新河县\",\n  \"value\": \"130530\" },\n\n{\n  \"label\": \"广宗县\",\n  \"value\": \"130531\" },\n\n{\n  \"label\": \"平乡县\",\n  \"value\": \"130532\" },\n\n{\n  \"label\": \"威县\",\n  \"value\": \"130533\" },\n\n{\n  \"label\": \"清河县\",\n  \"value\": \"130534\" },\n\n{\n  \"label\": \"临西县\",\n  \"value\": \"130535\" },\n\n{\n  \"label\": \"河北邢台经济开发区\",\n  \"value\": \"130571\" },\n\n{\n  \"label\": \"南宫市\",\n  \"value\": \"130581\" },\n\n{\n  \"label\": \"沙河市\",\n  \"value\": \"130582\" }],\n\n\n[{\n  \"label\": \"竞秀区\",\n  \"value\": \"130602\" },\n\n{\n  \"label\": \"莲池区\",\n  \"value\": \"130606\" },\n\n{\n  \"label\": \"满城区\",\n  \"value\": \"130607\" },\n\n{\n  \"label\": \"清苑区\",\n  \"value\": \"130608\" },\n\n{\n  \"label\": \"徐水区\",\n  \"value\": \"130609\" },\n\n{\n  \"label\": \"涞水县\",\n  \"value\": \"130623\" },\n\n{\n  \"label\": \"阜平县\",\n  \"value\": \"130624\" },\n\n{\n  \"label\": \"定兴县\",\n  \"value\": \"130626\" },\n\n{\n  \"label\": \"唐县\",\n  \"value\": \"130627\" },\n\n{\n  \"label\": \"高阳县\",\n  \"value\": \"130628\" },\n\n{\n  \"label\": \"容城县\",\n  \"value\": \"130629\" },\n\n{\n  \"label\": \"涞源县\",\n  \"value\": \"130630\" },\n\n{\n  \"label\": \"望都县\",\n  \"value\": \"130631\" },\n\n{\n  \"label\": \"安新县\",\n  \"value\": \"130632\" },\n\n{\n  \"label\": \"易县\",\n  \"value\": \"130633\" },\n\n{\n  \"label\": \"曲阳县\",\n  \"value\": \"130634\" },\n\n{\n  \"label\": \"蠡县\",\n  \"value\": \"130635\" },\n\n{\n  \"label\": \"顺平县\",\n  \"value\": \"130636\" },\n\n{\n  \"label\": \"博野县\",\n  \"value\": \"130637\" },\n\n{\n  \"label\": \"雄县\",\n  \"value\": \"130638\" },\n\n{\n  \"label\": \"保定高新技术产业开发区\",\n  \"value\": \"130671\" },\n\n{\n  \"label\": \"保定白沟新城\",\n  \"value\": \"130672\" },\n\n{\n  \"label\": \"涿州市\",\n  \"value\": \"130681\" },\n\n{\n  \"label\": \"定州市\",\n  \"value\": \"130682\" },\n\n{\n  \"label\": \"安国市\",\n  \"value\": \"130683\" },\n\n{\n  \"label\": \"高碑店市\",\n  \"value\": \"130684\" }],\n\n\n[{\n  \"label\": \"桥东区\",\n  \"value\": \"130702\" },\n\n{\n  \"label\": \"桥西区\",\n  \"value\": \"130703\" },\n\n{\n  \"label\": \"宣化区\",\n  \"value\": \"130705\" },\n\n{\n  \"label\": \"下花园区\",\n  \"value\": \"130706\" },\n\n{\n  \"label\": \"万全区\",\n  \"value\": \"130708\" },\n\n{\n  \"label\": \"崇礼区\",\n  \"value\": \"130709\" },\n\n{\n  \"label\": \"张北县\",\n  \"value\": \"130722\" },\n\n{\n  \"label\": \"康保县\",\n  \"value\": \"130723\" },\n\n{\n  \"label\": \"沽源县\",\n  \"value\": \"130724\" },\n\n{\n  \"label\": \"尚义县\",\n  \"value\": \"130725\" },\n\n{\n  \"label\": \"蔚县\",\n  \"value\": \"130726\" },\n\n{\n  \"label\": \"阳原县\",\n  \"value\": \"130727\" },\n\n{\n  \"label\": \"怀安县\",\n  \"value\": \"130728\" },\n\n{\n  \"label\": \"怀来县\",\n  \"value\": \"130730\" },\n\n{\n  \"label\": \"涿鹿县\",\n  \"value\": \"130731\" },\n\n{\n  \"label\": \"赤城县\",\n  \"value\": \"130732\" },\n\n{\n  \"label\": \"张家口市高新技术产业开发区\",\n  \"value\": \"130771\" },\n\n{\n  \"label\": \"张家口市察北管理区\",\n  \"value\": \"130772\" },\n\n{\n  \"label\": \"张家口市塞北管理区\",\n  \"value\": \"130773\" }],\n\n\n[{\n  \"label\": \"双桥区\",\n  \"value\": \"130802\" },\n\n{\n  \"label\": \"双滦区\",\n  \"value\": \"130803\" },\n\n{\n  \"label\": \"鹰手营子矿区\",\n  \"value\": \"130804\" },\n\n{\n  \"label\": \"承德县\",\n  \"value\": \"130821\" },\n\n{\n  \"label\": \"兴隆县\",\n  \"value\": \"130822\" },\n\n{\n  \"label\": \"滦平县\",\n  \"value\": \"130824\" },\n\n{\n  \"label\": \"隆化县\",\n  \"value\": \"130825\" },\n\n{\n  \"label\": \"丰宁满族自治县\",\n  \"value\": \"130826\" },\n\n{\n  \"label\": \"宽城满族自治县\",\n  \"value\": \"130827\" },\n\n{\n  \"label\": \"围场满族蒙古族自治县\",\n  \"value\": \"130828\" },\n\n{\n  \"label\": \"承德高新技术产业开发区\",\n  \"value\": \"130871\" },\n\n{\n  \"label\": \"平泉市\",\n  \"value\": \"130881\" }],\n\n\n[{\n  \"label\": \"新华区\",\n  \"value\": \"130902\" },\n\n{\n  \"label\": \"运河区\",\n  \"value\": \"130903\" },\n\n{\n  \"label\": \"沧县\",\n  \"value\": \"130921\" },\n\n{\n  \"label\": \"青县\",\n  \"value\": \"130922\" },\n\n{\n  \"label\": \"东光县\",\n  \"value\": \"130923\" },\n\n{\n  \"label\": \"海兴县\",\n  \"value\": \"130924\" },\n\n{\n  \"label\": \"盐山县\",\n  \"value\": \"130925\" },\n\n{\n  \"label\": \"肃宁县\",\n  \"value\": \"130926\" },\n\n{\n  \"label\": \"南皮县\",\n  \"value\": \"130927\" },\n\n{\n  \"label\": \"吴桥县\",\n  \"value\": \"130928\" },\n\n{\n  \"label\": \"献县\",\n  \"value\": \"130929\" },\n\n{\n  \"label\": \"孟村回族自治县\",\n  \"value\": \"130930\" },\n\n{\n  \"label\": \"河北沧州经济开发区\",\n  \"value\": \"130971\" },\n\n{\n  \"label\": \"沧州高新技术产业开发区\",\n  \"value\": \"130972\" },\n\n{\n  \"label\": \"沧州渤海新区\",\n  \"value\": \"130973\" },\n\n{\n  \"label\": \"泊头市\",\n  \"value\": \"130981\" },\n\n{\n  \"label\": \"任丘市\",\n  \"value\": \"130982\" },\n\n{\n  \"label\": \"黄骅市\",\n  \"value\": \"130983\" },\n\n{\n  \"label\": \"河间市\",\n  \"value\": \"130984\" }],\n\n\n[{\n  \"label\": \"安次区\",\n  \"value\": \"131002\" },\n\n{\n  \"label\": \"广阳区\",\n  \"value\": \"131003\" },\n\n{\n  \"label\": \"固安县\",\n  \"value\": \"131022\" },\n\n{\n  \"label\": \"永清县\",\n  \"value\": \"131023\" },\n\n{\n  \"label\": \"香河县\",\n  \"value\": \"131024\" },\n\n{\n  \"label\": \"大城县\",\n  \"value\": \"131025\" },\n\n{\n  \"label\": \"文安县\",\n  \"value\": \"131026\" },\n\n{\n  \"label\": \"大厂回族自治县\",\n  \"value\": \"131028\" },\n\n{\n  \"label\": \"廊坊经济技术开发区\",\n  \"value\": \"131071\" },\n\n{\n  \"label\": \"霸州市\",\n  \"value\": \"131081\" },\n\n{\n  \"label\": \"三河市\",\n  \"value\": \"131082\" }],\n\n\n[{\n  \"label\": \"桃城区\",\n  \"value\": \"131102\" },\n\n{\n  \"label\": \"冀州区\",\n  \"value\": \"131103\" },\n\n{\n  \"label\": \"枣强县\",\n  \"value\": \"131121\" },\n\n{\n  \"label\": \"武邑县\",\n  \"value\": \"131122\" },\n\n{\n  \"label\": \"武强县\",\n  \"value\": \"131123\" },\n\n{\n  \"label\": \"饶阳县\",\n  \"value\": \"131124\" },\n\n{\n  \"label\": \"安平县\",\n  \"value\": \"131125\" },\n\n{\n  \"label\": \"故城县\",\n  \"value\": \"131126\" },\n\n{\n  \"label\": \"景县\",\n  \"value\": \"131127\" },\n\n{\n  \"label\": \"阜城县\",\n  \"value\": \"131128\" },\n\n{\n  \"label\": \"河北衡水经济开发区\",\n  \"value\": \"131171\" },\n\n{\n  \"label\": \"衡水滨湖新区\",\n  \"value\": \"131172\" },\n\n{\n  \"label\": \"深州市\",\n  \"value\": \"131182\" }]],\n\n\n\n[\n[{\n  \"label\": \"小店区\",\n  \"value\": \"140105\" },\n\n{\n  \"label\": \"迎泽区\",\n  \"value\": \"140106\" },\n\n{\n  \"label\": \"杏花岭区\",\n  \"value\": \"140107\" },\n\n{\n  \"label\": \"尖草坪区\",\n  \"value\": \"140108\" },\n\n{\n  \"label\": \"万柏林区\",\n  \"value\": \"140109\" },\n\n{\n  \"label\": \"晋源区\",\n  \"value\": \"140110\" },\n\n{\n  \"label\": \"清徐县\",\n  \"value\": \"140121\" },\n\n{\n  \"label\": \"阳曲县\",\n  \"value\": \"140122\" },\n\n{\n  \"label\": \"娄烦县\",\n  \"value\": \"140123\" },\n\n{\n  \"label\": \"山西转型综合改革示范区\",\n  \"value\": \"140171\" },\n\n{\n  \"label\": \"古交市\",\n  \"value\": \"140181\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140202\" },\n\n{\n  \"label\": \"矿区\",\n  \"value\": \"140203\" },\n\n{\n  \"label\": \"南郊区\",\n  \"value\": \"140211\" },\n\n{\n  \"label\": \"新荣区\",\n  \"value\": \"140212\" },\n\n{\n  \"label\": \"阳高县\",\n  \"value\": \"140221\" },\n\n{\n  \"label\": \"天镇县\",\n  \"value\": \"140222\" },\n\n{\n  \"label\": \"广灵县\",\n  \"value\": \"140223\" },\n\n{\n  \"label\": \"灵丘县\",\n  \"value\": \"140224\" },\n\n{\n  \"label\": \"浑源县\",\n  \"value\": \"140225\" },\n\n{\n  \"label\": \"左云县\",\n  \"value\": \"140226\" },\n\n{\n  \"label\": \"大同县\",\n  \"value\": \"140227\" },\n\n{\n  \"label\": \"山西大同经济开发区\",\n  \"value\": \"140271\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140302\" },\n\n{\n  \"label\": \"矿区\",\n  \"value\": \"140303\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"140311\" },\n\n{\n  \"label\": \"平定县\",\n  \"value\": \"140321\" },\n\n{\n  \"label\": \"盂县\",\n  \"value\": \"140322\" },\n\n{\n  \"label\": \"山西阳泉经济开发区\",\n  \"value\": \"140371\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140402\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"140411\" },\n\n{\n  \"label\": \"长治县\",\n  \"value\": \"140421\" },\n\n{\n  \"label\": \"襄垣县\",\n  \"value\": \"140423\" },\n\n{\n  \"label\": \"屯留县\",\n  \"value\": \"140424\" },\n\n{\n  \"label\": \"平顺县\",\n  \"value\": \"140425\" },\n\n{\n  \"label\": \"黎城县\",\n  \"value\": \"140426\" },\n\n{\n  \"label\": \"壶关县\",\n  \"value\": \"140427\" },\n\n{\n  \"label\": \"长子县\",\n  \"value\": \"140428\" },\n\n{\n  \"label\": \"武乡县\",\n  \"value\": \"140429\" },\n\n{\n  \"label\": \"沁县\",\n  \"value\": \"140430\" },\n\n{\n  \"label\": \"沁源县\",\n  \"value\": \"140431\" },\n\n{\n  \"label\": \"山西长治高新技术产业园区\",\n  \"value\": \"140471\" },\n\n{\n  \"label\": \"潞城市\",\n  \"value\": \"140481\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140502\" },\n\n{\n  \"label\": \"沁水县\",\n  \"value\": \"140521\" },\n\n{\n  \"label\": \"阳城县\",\n  \"value\": \"140522\" },\n\n{\n  \"label\": \"陵川县\",\n  \"value\": \"140524\" },\n\n{\n  \"label\": \"泽州县\",\n  \"value\": \"140525\" },\n\n{\n  \"label\": \"高平市\",\n  \"value\": \"140581\" }],\n\n\n[{\n  \"label\": \"朔城区\",\n  \"value\": \"140602\" },\n\n{\n  \"label\": \"平鲁区\",\n  \"value\": \"140603\" },\n\n{\n  \"label\": \"山阴县\",\n  \"value\": \"140621\" },\n\n{\n  \"label\": \"应县\",\n  \"value\": \"140622\" },\n\n{\n  \"label\": \"右玉县\",\n  \"value\": \"140623\" },\n\n{\n  \"label\": \"怀仁县\",\n  \"value\": \"140624\" },\n\n{\n  \"label\": \"山西朔州经济开发区\",\n  \"value\": \"140671\" }],\n\n\n[{\n  \"label\": \"榆次区\",\n  \"value\": \"140702\" },\n\n{\n  \"label\": \"榆社县\",\n  \"value\": \"140721\" },\n\n{\n  \"label\": \"左权县\",\n  \"value\": \"140722\" },\n\n{\n  \"label\": \"和顺县\",\n  \"value\": \"140723\" },\n\n{\n  \"label\": \"昔阳县\",\n  \"value\": \"140724\" },\n\n{\n  \"label\": \"寿阳县\",\n  \"value\": \"140725\" },\n\n{\n  \"label\": \"太谷县\",\n  \"value\": \"140726\" },\n\n{\n  \"label\": \"祁县\",\n  \"value\": \"140727\" },\n\n{\n  \"label\": \"平遥县\",\n  \"value\": \"140728\" },\n\n{\n  \"label\": \"灵石县\",\n  \"value\": \"140729\" },\n\n{\n  \"label\": \"介休市\",\n  \"value\": \"140781\" }],\n\n\n[{\n  \"label\": \"盐湖区\",\n  \"value\": \"140802\" },\n\n{\n  \"label\": \"临猗县\",\n  \"value\": \"140821\" },\n\n{\n  \"label\": \"万荣县\",\n  \"value\": \"140822\" },\n\n{\n  \"label\": \"闻喜县\",\n  \"value\": \"140823\" },\n\n{\n  \"label\": \"稷山县\",\n  \"value\": \"140824\" },\n\n{\n  \"label\": \"新绛县\",\n  \"value\": \"140825\" },\n\n{\n  \"label\": \"绛县\",\n  \"value\": \"140826\" },\n\n{\n  \"label\": \"垣曲县\",\n  \"value\": \"140827\" },\n\n{\n  \"label\": \"夏县\",\n  \"value\": \"140828\" },\n\n{\n  \"label\": \"平陆县\",\n  \"value\": \"140829\" },\n\n{\n  \"label\": \"芮城县\",\n  \"value\": \"140830\" },\n\n{\n  \"label\": \"永济市\",\n  \"value\": \"140881\" },\n\n{\n  \"label\": \"河津市\",\n  \"value\": \"140882\" }],\n\n\n[{\n  \"label\": \"忻府区\",\n  \"value\": \"140902\" },\n\n{\n  \"label\": \"定襄县\",\n  \"value\": \"140921\" },\n\n{\n  \"label\": \"五台县\",\n  \"value\": \"140922\" },\n\n{\n  \"label\": \"代县\",\n  \"value\": \"140923\" },\n\n{\n  \"label\": \"繁峙县\",\n  \"value\": \"140924\" },\n\n{\n  \"label\": \"宁武县\",\n  \"value\": \"140925\" },\n\n{\n  \"label\": \"静乐县\",\n  \"value\": \"140926\" },\n\n{\n  \"label\": \"神池县\",\n  \"value\": \"140927\" },\n\n{\n  \"label\": \"五寨县\",\n  \"value\": \"140928\" },\n\n{\n  \"label\": \"岢岚县\",\n  \"value\": \"140929\" },\n\n{\n  \"label\": \"河曲县\",\n  \"value\": \"140930\" },\n\n{\n  \"label\": \"保德县\",\n  \"value\": \"140931\" },\n\n{\n  \"label\": \"偏关县\",\n  \"value\": \"140932\" },\n\n{\n  \"label\": \"五台山风景名胜区\",\n  \"value\": \"140971\" },\n\n{\n  \"label\": \"原平市\",\n  \"value\": \"140981\" }],\n\n\n[{\n  \"label\": \"尧都区\",\n  \"value\": \"141002\" },\n\n{\n  \"label\": \"曲沃县\",\n  \"value\": \"141021\" },\n\n{\n  \"label\": \"翼城县\",\n  \"value\": \"141022\" },\n\n{\n  \"label\": \"襄汾县\",\n  \"value\": \"141023\" },\n\n{\n  \"label\": \"洪洞县\",\n  \"value\": \"141024\" },\n\n{\n  \"label\": \"古县\",\n  \"value\": \"141025\" },\n\n{\n  \"label\": \"安泽县\",\n  \"value\": \"141026\" },\n\n{\n  \"label\": \"浮山县\",\n  \"value\": \"141027\" },\n\n{\n  \"label\": \"吉县\",\n  \"value\": \"141028\" },\n\n{\n  \"label\": \"乡宁县\",\n  \"value\": \"141029\" },\n\n{\n  \"label\": \"大宁县\",\n  \"value\": \"141030\" },\n\n{\n  \"label\": \"隰县\",\n  \"value\": \"141031\" },\n\n{\n  \"label\": \"永和县\",\n  \"value\": \"141032\" },\n\n{\n  \"label\": \"蒲县\",\n  \"value\": \"141033\" },\n\n{\n  \"label\": \"汾西县\",\n  \"value\": \"141034\" },\n\n{\n  \"label\": \"侯马市\",\n  \"value\": \"141081\" },\n\n{\n  \"label\": \"霍州市\",\n  \"value\": \"141082\" }],\n\n\n[{\n  \"label\": \"离石区\",\n  \"value\": \"141102\" },\n\n{\n  \"label\": \"文水县\",\n  \"value\": \"141121\" },\n\n{\n  \"label\": \"交城县\",\n  \"value\": \"141122\" },\n\n{\n  \"label\": \"兴县\",\n  \"value\": \"141123\" },\n\n{\n  \"label\": \"临县\",\n  \"value\": \"141124\" },\n\n{\n  \"label\": \"柳林县\",\n  \"value\": \"141125\" },\n\n{\n  \"label\": \"石楼县\",\n  \"value\": \"141126\" },\n\n{\n  \"label\": \"岚县\",\n  \"value\": \"141127\" },\n\n{\n  \"label\": \"方山县\",\n  \"value\": \"141128\" },\n\n{\n  \"label\": \"中阳县\",\n  \"value\": \"141129\" },\n\n{\n  \"label\": \"交口县\",\n  \"value\": \"141130\" },\n\n{\n  \"label\": \"孝义市\",\n  \"value\": \"141181\" },\n\n{\n  \"label\": \"汾阳市\",\n  \"value\": \"141182\" }]],\n\n\n\n[\n[{\n  \"label\": \"新城区\",\n  \"value\": \"150102\" },\n\n{\n  \"label\": \"回民区\",\n  \"value\": \"150103\" },\n\n{\n  \"label\": \"玉泉区\",\n  \"value\": \"150104\" },\n\n{\n  \"label\": \"赛罕区\",\n  \"value\": \"150105\" },\n\n{\n  \"label\": \"土默特左旗\",\n  \"value\": \"150121\" },\n\n{\n  \"label\": \"托克托县\",\n  \"value\": \"150122\" },\n\n{\n  \"label\": \"和林格尔县\",\n  \"value\": \"150123\" },\n\n{\n  \"label\": \"清水河县\",\n  \"value\": \"150124\" },\n\n{\n  \"label\": \"武川县\",\n  \"value\": \"150125\" },\n\n{\n  \"label\": \"呼和浩特金海工业园区\",\n  \"value\": \"150171\" },\n\n{\n  \"label\": \"呼和浩特经济技术开发区\",\n  \"value\": \"150172\" }],\n\n\n[{\n  \"label\": \"东河区\",\n  \"value\": \"150202\" },\n\n{\n  \"label\": \"昆都仑区\",\n  \"value\": \"150203\" },\n\n{\n  \"label\": \"青山区\",\n  \"value\": \"150204\" },\n\n{\n  \"label\": \"石拐区\",\n  \"value\": \"150205\" },\n\n{\n  \"label\": \"白云鄂博矿区\",\n  \"value\": \"150206\" },\n\n{\n  \"label\": \"九原区\",\n  \"value\": \"150207\" },\n\n{\n  \"label\": \"土默特右旗\",\n  \"value\": \"150221\" },\n\n{\n  \"label\": \"固阳县\",\n  \"value\": \"150222\" },\n\n{\n  \"label\": \"达尔罕茂明安联合旗\",\n  \"value\": \"150223\" },\n\n{\n  \"label\": \"包头稀土高新技术产业开发区\",\n  \"value\": \"150271\" }],\n\n\n[{\n  \"label\": \"海勃湾区\",\n  \"value\": \"150302\" },\n\n{\n  \"label\": \"海南区\",\n  \"value\": \"150303\" },\n\n{\n  \"label\": \"乌达区\",\n  \"value\": \"150304\" }],\n\n\n[{\n  \"label\": \"红山区\",\n  \"value\": \"150402\" },\n\n{\n  \"label\": \"元宝山区\",\n  \"value\": \"150403\" },\n\n{\n  \"label\": \"松山区\",\n  \"value\": \"150404\" },\n\n{\n  \"label\": \"阿鲁科尔沁旗\",\n  \"value\": \"150421\" },\n\n{\n  \"label\": \"巴林左旗\",\n  \"value\": \"150422\" },\n\n{\n  \"label\": \"巴林右旗\",\n  \"value\": \"150423\" },\n\n{\n  \"label\": \"林西县\",\n  \"value\": \"150424\" },\n\n{\n  \"label\": \"克什克腾旗\",\n  \"value\": \"150425\" },\n\n{\n  \"label\": \"翁牛特旗\",\n  \"value\": \"150426\" },\n\n{\n  \"label\": \"喀喇沁旗\",\n  \"value\": \"150428\" },\n\n{\n  \"label\": \"宁城县\",\n  \"value\": \"150429\" },\n\n{\n  \"label\": \"敖汉旗\",\n  \"value\": \"150430\" }],\n\n\n[{\n  \"label\": \"科尔沁区\",\n  \"value\": \"150502\" },\n\n{\n  \"label\": \"科尔沁左翼中旗\",\n  \"value\": \"150521\" },\n\n{\n  \"label\": \"科尔沁左翼后旗\",\n  \"value\": \"150522\" },\n\n{\n  \"label\": \"开鲁县\",\n  \"value\": \"150523\" },\n\n{\n  \"label\": \"库伦旗\",\n  \"value\": \"150524\" },\n\n{\n  \"label\": \"奈曼旗\",\n  \"value\": \"150525\" },\n\n{\n  \"label\": \"扎鲁特旗\",\n  \"value\": \"150526\" },\n\n{\n  \"label\": \"通辽经济技术开发区\",\n  \"value\": \"150571\" },\n\n{\n  \"label\": \"霍林郭勒市\",\n  \"value\": \"150581\" }],\n\n\n[{\n  \"label\": \"东胜区\",\n  \"value\": \"150602\" },\n\n{\n  \"label\": \"康巴什区\",\n  \"value\": \"150603\" },\n\n{\n  \"label\": \"达拉特旗\",\n  \"value\": \"150621\" },\n\n{\n  \"label\": \"准格尔旗\",\n  \"value\": \"150622\" },\n\n{\n  \"label\": \"鄂托克前旗\",\n  \"value\": \"150623\" },\n\n{\n  \"label\": \"鄂托克旗\",\n  \"value\": \"150624\" },\n\n{\n  \"label\": \"杭锦旗\",\n  \"value\": \"150625\" },\n\n{\n  \"label\": \"乌审旗\",\n  \"value\": \"150626\" },\n\n{\n  \"label\": \"伊金霍洛旗\",\n  \"value\": \"150627\" }],\n\n\n[{\n  \"label\": \"海拉尔区\",\n  \"value\": \"150702\" },\n\n{\n  \"label\": \"扎赉诺尔区\",\n  \"value\": \"150703\" },\n\n{\n  \"label\": \"阿荣旗\",\n  \"value\": \"150721\" },\n\n{\n  \"label\": \"莫力达瓦达斡尔族自治旗\",\n  \"value\": \"150722\" },\n\n{\n  \"label\": \"鄂伦春自治旗\",\n  \"value\": \"150723\" },\n\n{\n  \"label\": \"鄂温克族自治旗\",\n  \"value\": \"150724\" },\n\n{\n  \"label\": \"陈巴尔虎旗\",\n  \"value\": \"150725\" },\n\n{\n  \"label\": \"新巴尔虎左旗\",\n  \"value\": \"150726\" },\n\n{\n  \"label\": \"新巴尔虎右旗\",\n  \"value\": \"150727\" },\n\n{\n  \"label\": \"满洲里市\",\n  \"value\": \"150781\" },\n\n{\n  \"label\": \"牙克石市\",\n  \"value\": \"150782\" },\n\n{\n  \"label\": \"扎兰屯市\",\n  \"value\": \"150783\" },\n\n{\n  \"label\": \"额尔古纳市\",\n  \"value\": \"150784\" },\n\n{\n  \"label\": \"根河市\",\n  \"value\": \"150785\" }],\n\n\n[{\n  \"label\": \"临河区\",\n  \"value\": \"150802\" },\n\n{\n  \"label\": \"五原县\",\n  \"value\": \"150821\" },\n\n{\n  \"label\": \"磴口县\",\n  \"value\": \"150822\" },\n\n{\n  \"label\": \"乌拉特前旗\",\n  \"value\": \"150823\" },\n\n{\n  \"label\": \"乌拉特中旗\",\n  \"value\": \"150824\" },\n\n{\n  \"label\": \"乌拉特后旗\",\n  \"value\": \"150825\" },\n\n{\n  \"label\": \"杭锦后旗\",\n  \"value\": \"150826\" }],\n\n\n[{\n  \"label\": \"集宁区\",\n  \"value\": \"150902\" },\n\n{\n  \"label\": \"卓资县\",\n  \"value\": \"150921\" },\n\n{\n  \"label\": \"化德县\",\n  \"value\": \"150922\" },\n\n{\n  \"label\": \"商都县\",\n  \"value\": \"150923\" },\n\n{\n  \"label\": \"兴和县\",\n  \"value\": \"150924\" },\n\n{\n  \"label\": \"凉城县\",\n  \"value\": \"150925\" },\n\n{\n  \"label\": \"察哈尔右翼前旗\",\n  \"value\": \"150926\" },\n\n{\n  \"label\": \"察哈尔右翼中旗\",\n  \"value\": \"150927\" },\n\n{\n  \"label\": \"察哈尔右翼后旗\",\n  \"value\": \"150928\" },\n\n{\n  \"label\": \"四子王旗\",\n  \"value\": \"150929\" },\n\n{\n  \"label\": \"丰镇市\",\n  \"value\": \"150981\" }],\n\n\n[{\n  \"label\": \"乌兰浩特市\",\n  \"value\": \"152201\" },\n\n{\n  \"label\": \"阿尔山市\",\n  \"value\": \"152202\" },\n\n{\n  \"label\": \"科尔沁右翼前旗\",\n  \"value\": \"152221\" },\n\n{\n  \"label\": \"科尔沁右翼中旗\",\n  \"value\": \"152222\" },\n\n{\n  \"label\": \"扎赉特旗\",\n  \"value\": \"152223\" },\n\n{\n  \"label\": \"突泉县\",\n  \"value\": \"152224\" }],\n\n\n[{\n  \"label\": \"二连浩特市\",\n  \"value\": \"152501\" },\n\n{\n  \"label\": \"锡林浩特市\",\n  \"value\": \"152502\" },\n\n{\n  \"label\": \"阿巴嘎旗\",\n  \"value\": \"152522\" },\n\n{\n  \"label\": \"苏尼特左旗\",\n  \"value\": \"152523\" },\n\n{\n  \"label\": \"苏尼特右旗\",\n  \"value\": \"152524\" },\n\n{\n  \"label\": \"东乌珠穆沁旗\",\n  \"value\": \"152525\" },\n\n{\n  \"label\": \"西乌珠穆沁旗\",\n  \"value\": \"152526\" },\n\n{\n  \"label\": \"太仆寺旗\",\n  \"value\": \"152527\" },\n\n{\n  \"label\": \"镶黄旗\",\n  \"value\": \"152528\" },\n\n{\n  \"label\": \"正镶白旗\",\n  \"value\": \"152529\" },\n\n{\n  \"label\": \"正蓝旗\",\n  \"value\": \"152530\" },\n\n{\n  \"label\": \"多伦县\",\n  \"value\": \"152531\" },\n\n{\n  \"label\": \"乌拉盖管委会\",\n  \"value\": \"152571\" }],\n\n\n[{\n  \"label\": \"阿拉善左旗\",\n  \"value\": \"152921\" },\n\n{\n  \"label\": \"阿拉善右旗\",\n  \"value\": \"152922\" },\n\n{\n  \"label\": \"额济纳旗\",\n  \"value\": \"152923\" },\n\n{\n  \"label\": \"内蒙古阿拉善经济开发区\",\n  \"value\": \"152971\" }]],\n\n\n\n[\n[{\n  \"label\": \"和平区\",\n  \"value\": \"210102\" },\n\n{\n  \"label\": \"沈河区\",\n  \"value\": \"210103\" },\n\n{\n  \"label\": \"大东区\",\n  \"value\": \"210104\" },\n\n{\n  \"label\": \"皇姑区\",\n  \"value\": \"210105\" },\n\n{\n  \"label\": \"铁西区\",\n  \"value\": \"210106\" },\n\n{\n  \"label\": \"苏家屯区\",\n  \"value\": \"210111\" },\n\n{\n  \"label\": \"浑南区\",\n  \"value\": \"210112\" },\n\n{\n  \"label\": \"沈北新区\",\n  \"value\": \"210113\" },\n\n{\n  \"label\": \"于洪区\",\n  \"value\": \"210114\" },\n\n{\n  \"label\": \"辽中区\",\n  \"value\": \"210115\" },\n\n{\n  \"label\": \"康平县\",\n  \"value\": \"210123\" },\n\n{\n  \"label\": \"法库县\",\n  \"value\": \"210124\" },\n\n{\n  \"label\": \"新民市\",\n  \"value\": \"210181\" }],\n\n\n[{\n  \"label\": \"中山区\",\n  \"value\": \"210202\" },\n\n{\n  \"label\": \"西岗区\",\n  \"value\": \"210203\" },\n\n{\n  \"label\": \"沙河口区\",\n  \"value\": \"210204\" },\n\n{\n  \"label\": \"甘井子区\",\n  \"value\": \"210211\" },\n\n{\n  \"label\": \"旅顺口区\",\n  \"value\": \"210212\" },\n\n{\n  \"label\": \"金州区\",\n  \"value\": \"210213\" },\n\n{\n  \"label\": \"普兰店区\",\n  \"value\": \"210214\" },\n\n{\n  \"label\": \"长海县\",\n  \"value\": \"210224\" },\n\n{\n  \"label\": \"瓦房店市\",\n  \"value\": \"210281\" },\n\n{\n  \"label\": \"庄河市\",\n  \"value\": \"210283\" }],\n\n\n[{\n  \"label\": \"铁东区\",\n  \"value\": \"210302\" },\n\n{\n  \"label\": \"铁西区\",\n  \"value\": \"210303\" },\n\n{\n  \"label\": \"立山区\",\n  \"value\": \"210304\" },\n\n{\n  \"label\": \"千山区\",\n  \"value\": \"210311\" },\n\n{\n  \"label\": \"台安县\",\n  \"value\": \"210321\" },\n\n{\n  \"label\": \"岫岩满族自治县\",\n  \"value\": \"210323\" },\n\n{\n  \"label\": \"海城市\",\n  \"value\": \"210381\" }],\n\n\n[{\n  \"label\": \"新抚区\",\n  \"value\": \"210402\" },\n\n{\n  \"label\": \"东洲区\",\n  \"value\": \"210403\" },\n\n{\n  \"label\": \"望花区\",\n  \"value\": \"210404\" },\n\n{\n  \"label\": \"顺城区\",\n  \"value\": \"210411\" },\n\n{\n  \"label\": \"抚顺县\",\n  \"value\": \"210421\" },\n\n{\n  \"label\": \"新宾满族自治县\",\n  \"value\": \"210422\" },\n\n{\n  \"label\": \"清原满族自治县\",\n  \"value\": \"210423\" }],\n\n\n[{\n  \"label\": \"平山区\",\n  \"value\": \"210502\" },\n\n{\n  \"label\": \"溪湖区\",\n  \"value\": \"210503\" },\n\n{\n  \"label\": \"明山区\",\n  \"value\": \"210504\" },\n\n{\n  \"label\": \"南芬区\",\n  \"value\": \"210505\" },\n\n{\n  \"label\": \"本溪满族自治县\",\n  \"value\": \"210521\" },\n\n{\n  \"label\": \"桓仁满族自治县\",\n  \"value\": \"210522\" }],\n\n\n[{\n  \"label\": \"元宝区\",\n  \"value\": \"210602\" },\n\n{\n  \"label\": \"振兴区\",\n  \"value\": \"210603\" },\n\n{\n  \"label\": \"振安区\",\n  \"value\": \"210604\" },\n\n{\n  \"label\": \"宽甸满族自治县\",\n  \"value\": \"210624\" },\n\n{\n  \"label\": \"东港市\",\n  \"value\": \"210681\" },\n\n{\n  \"label\": \"凤城市\",\n  \"value\": \"210682\" }],\n\n\n[{\n  \"label\": \"古塔区\",\n  \"value\": \"210702\" },\n\n{\n  \"label\": \"凌河区\",\n  \"value\": \"210703\" },\n\n{\n  \"label\": \"太和区\",\n  \"value\": \"210711\" },\n\n{\n  \"label\": \"黑山县\",\n  \"value\": \"210726\" },\n\n{\n  \"label\": \"义县\",\n  \"value\": \"210727\" },\n\n{\n  \"label\": \"凌海市\",\n  \"value\": \"210781\" },\n\n{\n  \"label\": \"北镇市\",\n  \"value\": \"210782\" }],\n\n\n[{\n  \"label\": \"站前区\",\n  \"value\": \"210802\" },\n\n{\n  \"label\": \"西市区\",\n  \"value\": \"210803\" },\n\n{\n  \"label\": \"鲅鱼圈区\",\n  \"value\": \"210804\" },\n\n{\n  \"label\": \"老边区\",\n  \"value\": \"210811\" },\n\n{\n  \"label\": \"盖州市\",\n  \"value\": \"210881\" },\n\n{\n  \"label\": \"大石桥市\",\n  \"value\": \"210882\" }],\n\n\n[{\n  \"label\": \"海州区\",\n  \"value\": \"210902\" },\n\n{\n  \"label\": \"新邱区\",\n  \"value\": \"210903\" },\n\n{\n  \"label\": \"太平区\",\n  \"value\": \"210904\" },\n\n{\n  \"label\": \"清河门区\",\n  \"value\": \"210905\" },\n\n{\n  \"label\": \"细河区\",\n  \"value\": \"210911\" },\n\n{\n  \"label\": \"阜新蒙古族自治县\",\n  \"value\": \"210921\" },\n\n{\n  \"label\": \"彰武县\",\n  \"value\": \"210922\" }],\n\n\n[{\n  \"label\": \"白塔区\",\n  \"value\": \"211002\" },\n\n{\n  \"label\": \"文圣区\",\n  \"value\": \"211003\" },\n\n{\n  \"label\": \"宏伟区\",\n  \"value\": \"211004\" },\n\n{\n  \"label\": \"弓长岭区\",\n  \"value\": \"211005\" },\n\n{\n  \"label\": \"太子河区\",\n  \"value\": \"211011\" },\n\n{\n  \"label\": \"辽阳县\",\n  \"value\": \"211021\" },\n\n{\n  \"label\": \"灯塔市\",\n  \"value\": \"211081\" }],\n\n\n[{\n  \"label\": \"双台子区\",\n  \"value\": \"211102\" },\n\n{\n  \"label\": \"兴隆台区\",\n  \"value\": \"211103\" },\n\n{\n  \"label\": \"大洼区\",\n  \"value\": \"211104\" },\n\n{\n  \"label\": \"盘山县\",\n  \"value\": \"211122\" }],\n\n\n[{\n  \"label\": \"银州区\",\n  \"value\": \"211202\" },\n\n{\n  \"label\": \"清河区\",\n  \"value\": \"211204\" },\n\n{\n  \"label\": \"铁岭县\",\n  \"value\": \"211221\" },\n\n{\n  \"label\": \"西丰县\",\n  \"value\": \"211223\" },\n\n{\n  \"label\": \"昌图县\",\n  \"value\": \"211224\" },\n\n{\n  \"label\": \"调兵山市\",\n  \"value\": \"211281\" },\n\n{\n  \"label\": \"开原市\",\n  \"value\": \"211282\" }],\n\n\n[{\n  \"label\": \"双塔区\",\n  \"value\": \"211302\" },\n\n{\n  \"label\": \"龙城区\",\n  \"value\": \"211303\" },\n\n{\n  \"label\": \"朝阳县\",\n  \"value\": \"211321\" },\n\n{\n  \"label\": \"建平县\",\n  \"value\": \"211322\" },\n\n{\n  \"label\": \"喀喇沁左翼蒙古族自治县\",\n  \"value\": \"211324\" },\n\n{\n  \"label\": \"北票市\",\n  \"value\": \"211381\" },\n\n{\n  \"label\": \"凌源市\",\n  \"value\": \"211382\" }],\n\n\n[{\n  \"label\": \"连山区\",\n  \"value\": \"211402\" },\n\n{\n  \"label\": \"龙港区\",\n  \"value\": \"211403\" },\n\n{\n  \"label\": \"南票区\",\n  \"value\": \"211404\" },\n\n{\n  \"label\": \"绥中县\",\n  \"value\": \"211421\" },\n\n{\n  \"label\": \"建昌县\",\n  \"value\": \"211422\" },\n\n{\n  \"label\": \"兴城市\",\n  \"value\": \"211481\" }]],\n\n\n\n[\n[{\n  \"label\": \"南关区\",\n  \"value\": \"220102\" },\n\n{\n  \"label\": \"宽城区\",\n  \"value\": \"220103\" },\n\n{\n  \"label\": \"朝阳区\",\n  \"value\": \"220104\" },\n\n{\n  \"label\": \"二道区\",\n  \"value\": \"220105\" },\n\n{\n  \"label\": \"绿园区\",\n  \"value\": \"220106\" },\n\n{\n  \"label\": \"双阳区\",\n  \"value\": \"220112\" },\n\n{\n  \"label\": \"九台区\",\n  \"value\": \"220113\" },\n\n{\n  \"label\": \"农安县\",\n  \"value\": \"220122\" },\n\n{\n  \"label\": \"长春经济技术开发区\",\n  \"value\": \"220171\" },\n\n{\n  \"label\": \"长春净月高新技术产业开发区\",\n  \"value\": \"220172\" },\n\n{\n  \"label\": \"长春高新技术产业开发区\",\n  \"value\": \"220173\" },\n\n{\n  \"label\": \"长春汽车经济技术开发区\",\n  \"value\": \"220174\" },\n\n{\n  \"label\": \"榆树市\",\n  \"value\": \"220182\" },\n\n{\n  \"label\": \"德惠市\",\n  \"value\": \"220183\" }],\n\n\n[{\n  \"label\": \"昌邑区\",\n  \"value\": \"220202\" },\n\n{\n  \"label\": \"龙潭区\",\n  \"value\": \"220203\" },\n\n{\n  \"label\": \"船营区\",\n  \"value\": \"220204\" },\n\n{\n  \"label\": \"丰满区\",\n  \"value\": \"220211\" },\n\n{\n  \"label\": \"永吉县\",\n  \"value\": \"220221\" },\n\n{\n  \"label\": \"吉林经济开发区\",\n  \"value\": \"220271\" },\n\n{\n  \"label\": \"吉林高新技术产业开发区\",\n  \"value\": \"220272\" },\n\n{\n  \"label\": \"吉林中国新加坡食品区\",\n  \"value\": \"220273\" },\n\n{\n  \"label\": \"蛟河市\",\n  \"value\": \"220281\" },\n\n{\n  \"label\": \"桦甸市\",\n  \"value\": \"220282\" },\n\n{\n  \"label\": \"舒兰市\",\n  \"value\": \"220283\" },\n\n{\n  \"label\": \"磐石市\",\n  \"value\": \"220284\" }],\n\n\n[{\n  \"label\": \"铁西区\",\n  \"value\": \"220302\" },\n\n{\n  \"label\": \"铁东区\",\n  \"value\": \"220303\" },\n\n{\n  \"label\": \"梨树县\",\n  \"value\": \"220322\" },\n\n{\n  \"label\": \"伊通满族自治县\",\n  \"value\": \"220323\" },\n\n{\n  \"label\": \"公主岭市\",\n  \"value\": \"220381\" },\n\n{\n  \"label\": \"双辽市\",\n  \"value\": \"220382\" }],\n\n\n[{\n  \"label\": \"龙山区\",\n  \"value\": \"220402\" },\n\n{\n  \"label\": \"西安区\",\n  \"value\": \"220403\" },\n\n{\n  \"label\": \"东丰县\",\n  \"value\": \"220421\" },\n\n{\n  \"label\": \"东辽县\",\n  \"value\": \"220422\" }],\n\n\n[{\n  \"label\": \"东昌区\",\n  \"value\": \"220502\" },\n\n{\n  \"label\": \"二道江区\",\n  \"value\": \"220503\" },\n\n{\n  \"label\": \"通化县\",\n  \"value\": \"220521\" },\n\n{\n  \"label\": \"辉南县\",\n  \"value\": \"220523\" },\n\n{\n  \"label\": \"柳河县\",\n  \"value\": \"220524\" },\n\n{\n  \"label\": \"梅河口市\",\n  \"value\": \"220581\" },\n\n{\n  \"label\": \"集安市\",\n  \"value\": \"220582\" }],\n\n\n[{\n  \"label\": \"浑江区\",\n  \"value\": \"220602\" },\n\n{\n  \"label\": \"江源区\",\n  \"value\": \"220605\" },\n\n{\n  \"label\": \"抚松县\",\n  \"value\": \"220621\" },\n\n{\n  \"label\": \"靖宇县\",\n  \"value\": \"220622\" },\n\n{\n  \"label\": \"长白朝鲜族自治县\",\n  \"value\": \"220623\" },\n\n{\n  \"label\": \"临江市\",\n  \"value\": \"220681\" }],\n\n\n[{\n  \"label\": \"宁江区\",\n  \"value\": \"220702\" },\n\n{\n  \"label\": \"前郭尔罗斯蒙古族自治县\",\n  \"value\": \"220721\" },\n\n{\n  \"label\": \"长岭县\",\n  \"value\": \"220722\" },\n\n{\n  \"label\": \"乾安县\",\n  \"value\": \"220723\" },\n\n{\n  \"label\": \"吉林松原经济开发区\",\n  \"value\": \"220771\" },\n\n{\n  \"label\": \"扶余市\",\n  \"value\": \"220781\" }],\n\n\n[{\n  \"label\": \"洮北区\",\n  \"value\": \"220802\" },\n\n{\n  \"label\": \"镇赉县\",\n  \"value\": \"220821\" },\n\n{\n  \"label\": \"通榆县\",\n  \"value\": \"220822\" },\n\n{\n  \"label\": \"吉林白城经济开发区\",\n  \"value\": \"220871\" },\n\n{\n  \"label\": \"洮南市\",\n  \"value\": \"220881\" },\n\n{\n  \"label\": \"大安市\",\n  \"value\": \"220882\" }],\n\n\n[{\n  \"label\": \"延吉市\",\n  \"value\": \"222401\" },\n\n{\n  \"label\": \"图们市\",\n  \"value\": \"222402\" },\n\n{\n  \"label\": \"敦化市\",\n  \"value\": \"222403\" },\n\n{\n  \"label\": \"珲春市\",\n  \"value\": \"222404\" },\n\n{\n  \"label\": \"龙井市\",\n  \"value\": \"222405\" },\n\n{\n  \"label\": \"和龙市\",\n  \"value\": \"222406\" },\n\n{\n  \"label\": \"汪清县\",\n  \"value\": \"222424\" },\n\n{\n  \"label\": \"安图县\",\n  \"value\": \"222426\" }]],\n\n\n\n[\n[{\n  \"label\": \"道里区\",\n  \"value\": \"230102\" },\n\n{\n  \"label\": \"南岗区\",\n  \"value\": \"230103\" },\n\n{\n  \"label\": \"道外区\",\n  \"value\": \"230104\" },\n\n{\n  \"label\": \"平房区\",\n  \"value\": \"230108\" },\n\n{\n  \"label\": \"松北区\",\n  \"value\": \"230109\" },\n\n{\n  \"label\": \"香坊区\",\n  \"value\": \"230110\" },\n\n{\n  \"label\": \"呼兰区\",\n  \"value\": \"230111\" },\n\n{\n  \"label\": \"阿城区\",\n  \"value\": \"230112\" },\n\n{\n  \"label\": \"双城区\",\n  \"value\": \"230113\" },\n\n{\n  \"label\": \"依兰县\",\n  \"value\": \"230123\" },\n\n{\n  \"label\": \"方正县\",\n  \"value\": \"230124\" },\n\n{\n  \"label\": \"宾县\",\n  \"value\": \"230125\" },\n\n{\n  \"label\": \"巴彦县\",\n  \"value\": \"230126\" },\n\n{\n  \"label\": \"木兰县\",\n  \"value\": \"230127\" },\n\n{\n  \"label\": \"通河县\",\n  \"value\": \"230128\" },\n\n{\n  \"label\": \"延寿县\",\n  \"value\": \"230129\" },\n\n{\n  \"label\": \"尚志市\",\n  \"value\": \"230183\" },\n\n{\n  \"label\": \"五常市\",\n  \"value\": \"230184\" }],\n\n\n[{\n  \"label\": \"龙沙区\",\n  \"value\": \"230202\" },\n\n{\n  \"label\": \"建华区\",\n  \"value\": \"230203\" },\n\n{\n  \"label\": \"铁锋区\",\n  \"value\": \"230204\" },\n\n{\n  \"label\": \"昂昂溪区\",\n  \"value\": \"230205\" },\n\n{\n  \"label\": \"富拉尔基区\",\n  \"value\": \"230206\" },\n\n{\n  \"label\": \"碾子山区\",\n  \"value\": \"230207\" },\n\n{\n  \"label\": \"梅里斯达斡尔族区\",\n  \"value\": \"230208\" },\n\n{\n  \"label\": \"龙江县\",\n  \"value\": \"230221\" },\n\n{\n  \"label\": \"依安县\",\n  \"value\": \"230223\" },\n\n{\n  \"label\": \"泰来县\",\n  \"value\": \"230224\" },\n\n{\n  \"label\": \"甘南县\",\n  \"value\": \"230225\" },\n\n{\n  \"label\": \"富裕县\",\n  \"value\": \"230227\" },\n\n{\n  \"label\": \"克山县\",\n  \"value\": \"230229\" },\n\n{\n  \"label\": \"克东县\",\n  \"value\": \"230230\" },\n\n{\n  \"label\": \"拜泉县\",\n  \"value\": \"230231\" },\n\n{\n  \"label\": \"讷河市\",\n  \"value\": \"230281\" }],\n\n\n[{\n  \"label\": \"鸡冠区\",\n  \"value\": \"230302\" },\n\n{\n  \"label\": \"恒山区\",\n  \"value\": \"230303\" },\n\n{\n  \"label\": \"滴道区\",\n  \"value\": \"230304\" },\n\n{\n  \"label\": \"梨树区\",\n  \"value\": \"230305\" },\n\n{\n  \"label\": \"城子河区\",\n  \"value\": \"230306\" },\n\n{\n  \"label\": \"麻山区\",\n  \"value\": \"230307\" },\n\n{\n  \"label\": \"鸡东县\",\n  \"value\": \"230321\" },\n\n{\n  \"label\": \"虎林市\",\n  \"value\": \"230381\" },\n\n{\n  \"label\": \"密山市\",\n  \"value\": \"230382\" }],\n\n\n[{\n  \"label\": \"向阳区\",\n  \"value\": \"230402\" },\n\n{\n  \"label\": \"工农区\",\n  \"value\": \"230403\" },\n\n{\n  \"label\": \"南山区\",\n  \"value\": \"230404\" },\n\n{\n  \"label\": \"兴安区\",\n  \"value\": \"230405\" },\n\n{\n  \"label\": \"东山区\",\n  \"value\": \"230406\" },\n\n{\n  \"label\": \"兴山区\",\n  \"value\": \"230407\" },\n\n{\n  \"label\": \"萝北县\",\n  \"value\": \"230421\" },\n\n{\n  \"label\": \"绥滨县\",\n  \"value\": \"230422\" }],\n\n\n[{\n  \"label\": \"尖山区\",\n  \"value\": \"230502\" },\n\n{\n  \"label\": \"岭东区\",\n  \"value\": \"230503\" },\n\n{\n  \"label\": \"四方台区\",\n  \"value\": \"230505\" },\n\n{\n  \"label\": \"宝山区\",\n  \"value\": \"230506\" },\n\n{\n  \"label\": \"集贤县\",\n  \"value\": \"230521\" },\n\n{\n  \"label\": \"友谊县\",\n  \"value\": \"230522\" },\n\n{\n  \"label\": \"宝清县\",\n  \"value\": \"230523\" },\n\n{\n  \"label\": \"饶河县\",\n  \"value\": \"230524\" }],\n\n\n[{\n  \"label\": \"萨尔图区\",\n  \"value\": \"230602\" },\n\n{\n  \"label\": \"龙凤区\",\n  \"value\": \"230603\" },\n\n{\n  \"label\": \"让胡路区\",\n  \"value\": \"230604\" },\n\n{\n  \"label\": \"红岗区\",\n  \"value\": \"230605\" },\n\n{\n  \"label\": \"大同区\",\n  \"value\": \"230606\" },\n\n{\n  \"label\": \"肇州县\",\n  \"value\": \"230621\" },\n\n{\n  \"label\": \"肇源县\",\n  \"value\": \"230622\" },\n\n{\n  \"label\": \"林甸县\",\n  \"value\": \"230623\" },\n\n{\n  \"label\": \"杜尔伯特蒙古族自治县\",\n  \"value\": \"230624\" },\n\n{\n  \"label\": \"大庆高新技术产业开发区\",\n  \"value\": \"230671\" }],\n\n\n[{\n  \"label\": \"伊春区\",\n  \"value\": \"230702\" },\n\n{\n  \"label\": \"南岔区\",\n  \"value\": \"230703\" },\n\n{\n  \"label\": \"友好区\",\n  \"value\": \"230704\" },\n\n{\n  \"label\": \"西林区\",\n  \"value\": \"230705\" },\n\n{\n  \"label\": \"翠峦区\",\n  \"value\": \"230706\" },\n\n{\n  \"label\": \"新青区\",\n  \"value\": \"230707\" },\n\n{\n  \"label\": \"美溪区\",\n  \"value\": \"230708\" },\n\n{\n  \"label\": \"金山屯区\",\n  \"value\": \"230709\" },\n\n{\n  \"label\": \"五营区\",\n  \"value\": \"230710\" },\n\n{\n  \"label\": \"乌马河区\",\n  \"value\": \"230711\" },\n\n{\n  \"label\": \"汤旺河区\",\n  \"value\": \"230712\" },\n\n{\n  \"label\": \"带岭区\",\n  \"value\": \"230713\" },\n\n{\n  \"label\": \"乌伊岭区\",\n  \"value\": \"230714\" },\n\n{\n  \"label\": \"红星区\",\n  \"value\": \"230715\" },\n\n{\n  \"label\": \"上甘岭区\",\n  \"value\": \"230716\" },\n\n{\n  \"label\": \"嘉荫县\",\n  \"value\": \"230722\" },\n\n{\n  \"label\": \"铁力市\",\n  \"value\": \"230781\" }],\n\n\n[{\n  \"label\": \"向阳区\",\n  \"value\": \"230803\" },\n\n{\n  \"label\": \"前进区\",\n  \"value\": \"230804\" },\n\n{\n  \"label\": \"东风区\",\n  \"value\": \"230805\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"230811\" },\n\n{\n  \"label\": \"桦南县\",\n  \"value\": \"230822\" },\n\n{\n  \"label\": \"桦川县\",\n  \"value\": \"230826\" },\n\n{\n  \"label\": \"汤原县\",\n  \"value\": \"230828\" },\n\n{\n  \"label\": \"同江市\",\n  \"value\": \"230881\" },\n\n{\n  \"label\": \"富锦市\",\n  \"value\": \"230882\" },\n\n{\n  \"label\": \"抚远市\",\n  \"value\": \"230883\" }],\n\n\n[{\n  \"label\": \"新兴区\",\n  \"value\": \"230902\" },\n\n{\n  \"label\": \"桃山区\",\n  \"value\": \"230903\" },\n\n{\n  \"label\": \"茄子河区\",\n  \"value\": \"230904\" },\n\n{\n  \"label\": \"勃利县\",\n  \"value\": \"230921\" }],\n\n\n[{\n  \"label\": \"东安区\",\n  \"value\": \"231002\" },\n\n{\n  \"label\": \"阳明区\",\n  \"value\": \"231003\" },\n\n{\n  \"label\": \"爱民区\",\n  \"value\": \"231004\" },\n\n{\n  \"label\": \"西安区\",\n  \"value\": \"231005\" },\n\n{\n  \"label\": \"林口县\",\n  \"value\": \"231025\" },\n\n{\n  \"label\": \"牡丹江经济技术开发区\",\n  \"value\": \"231071\" },\n\n{\n  \"label\": \"绥芬河市\",\n  \"value\": \"231081\" },\n\n{\n  \"label\": \"海林市\",\n  \"value\": \"231083\" },\n\n{\n  \"label\": \"宁安市\",\n  \"value\": \"231084\" },\n\n{\n  \"label\": \"穆棱市\",\n  \"value\": \"231085\" },\n\n{\n  \"label\": \"东宁市\",\n  \"value\": \"231086\" }],\n\n\n[{\n  \"label\": \"爱辉区\",\n  \"value\": \"231102\" },\n\n{\n  \"label\": \"嫩江县\",\n  \"value\": \"231121\" },\n\n{\n  \"label\": \"逊克县\",\n  \"value\": \"231123\" },\n\n{\n  \"label\": \"孙吴县\",\n  \"value\": \"231124\" },\n\n{\n  \"label\": \"北安市\",\n  \"value\": \"231181\" },\n\n{\n  \"label\": \"五大连池市\",\n  \"value\": \"231182\" }],\n\n\n[{\n  \"label\": \"北林区\",\n  \"value\": \"231202\" },\n\n{\n  \"label\": \"望奎县\",\n  \"value\": \"231221\" },\n\n{\n  \"label\": \"兰西县\",\n  \"value\": \"231222\" },\n\n{\n  \"label\": \"青冈县\",\n  \"value\": \"231223\" },\n\n{\n  \"label\": \"庆安县\",\n  \"value\": \"231224\" },\n\n{\n  \"label\": \"明水县\",\n  \"value\": \"231225\" },\n\n{\n  \"label\": \"绥棱县\",\n  \"value\": \"231226\" },\n\n{\n  \"label\": \"安达市\",\n  \"value\": \"231281\" },\n\n{\n  \"label\": \"肇东市\",\n  \"value\": \"231282\" },\n\n{\n  \"label\": \"海伦市\",\n  \"value\": \"231283\" }],\n\n\n[{\n  \"label\": \"加格达奇区\",\n  \"value\": \"232701\" },\n\n{\n  \"label\": \"松岭区\",\n  \"value\": \"232702\" },\n\n{\n  \"label\": \"新林区\",\n  \"value\": \"232703\" },\n\n{\n  \"label\": \"呼中区\",\n  \"value\": \"232704\" },\n\n{\n  \"label\": \"呼玛县\",\n  \"value\": \"232721\" },\n\n{\n  \"label\": \"塔河县\",\n  \"value\": \"232722\" },\n\n{\n  \"label\": \"漠河县\",\n  \"value\": \"232723\" }]],\n\n\n\n[\n[{\n  \"label\": \"黄浦区\",\n  \"value\": \"310101\" },\n\n{\n  \"label\": \"徐汇区\",\n  \"value\": \"310104\" },\n\n{\n  \"label\": \"长宁区\",\n  \"value\": \"310105\" },\n\n{\n  \"label\": \"静安区\",\n  \"value\": \"310106\" },\n\n{\n  \"label\": \"普陀区\",\n  \"value\": \"310107\" },\n\n{\n  \"label\": \"虹口区\",\n  \"value\": \"310109\" },\n\n{\n  \"label\": \"杨浦区\",\n  \"value\": \"310110\" },\n\n{\n  \"label\": \"闵行区\",\n  \"value\": \"310112\" },\n\n{\n  \"label\": \"宝山区\",\n  \"value\": \"310113\" },\n\n{\n  \"label\": \"嘉定区\",\n  \"value\": \"310114\" },\n\n{\n  \"label\": \"浦东新区\",\n  \"value\": \"310115\" },\n\n{\n  \"label\": \"金山区\",\n  \"value\": \"310116\" },\n\n{\n  \"label\": \"松江区\",\n  \"value\": \"310117\" },\n\n{\n  \"label\": \"青浦区\",\n  \"value\": \"310118\" },\n\n{\n  \"label\": \"奉贤区\",\n  \"value\": \"310120\" },\n\n{\n  \"label\": \"崇明区\",\n  \"value\": \"310151\" }]],\n\n\n\n[\n[{\n  \"label\": \"玄武区\",\n  \"value\": \"320102\" },\n\n{\n  \"label\": \"秦淮区\",\n  \"value\": \"320104\" },\n\n{\n  \"label\": \"建邺区\",\n  \"value\": \"320105\" },\n\n{\n  \"label\": \"鼓楼区\",\n  \"value\": \"320106\" },\n\n{\n  \"label\": \"浦口区\",\n  \"value\": \"320111\" },\n\n{\n  \"label\": \"栖霞区\",\n  \"value\": \"320113\" },\n\n{\n  \"label\": \"雨花台区\",\n  \"value\": \"320114\" },\n\n{\n  \"label\": \"江宁区\",\n  \"value\": \"320115\" },\n\n{\n  \"label\": \"六合区\",\n  \"value\": \"320116\" },\n\n{\n  \"label\": \"溧水区\",\n  \"value\": \"320117\" },\n\n{\n  \"label\": \"高淳区\",\n  \"value\": \"320118\" }],\n\n\n[{\n  \"label\": \"锡山区\",\n  \"value\": \"320205\" },\n\n{\n  \"label\": \"惠山区\",\n  \"value\": \"320206\" },\n\n{\n  \"label\": \"滨湖区\",\n  \"value\": \"320211\" },\n\n{\n  \"label\": \"梁溪区\",\n  \"value\": \"320213\" },\n\n{\n  \"label\": \"新吴区\",\n  \"value\": \"320214\" },\n\n{\n  \"label\": \"江阴市\",\n  \"value\": \"320281\" },\n\n{\n  \"label\": \"宜兴市\",\n  \"value\": \"320282\" }],\n\n\n[{\n  \"label\": \"鼓楼区\",\n  \"value\": \"320302\" },\n\n{\n  \"label\": \"云龙区\",\n  \"value\": \"320303\" },\n\n{\n  \"label\": \"贾汪区\",\n  \"value\": \"320305\" },\n\n{\n  \"label\": \"泉山区\",\n  \"value\": \"320311\" },\n\n{\n  \"label\": \"铜山区\",\n  \"value\": \"320312\" },\n\n{\n  \"label\": \"丰县\",\n  \"value\": \"320321\" },\n\n{\n  \"label\": \"沛县\",\n  \"value\": \"320322\" },\n\n{\n  \"label\": \"睢宁县\",\n  \"value\": \"320324\" },\n\n{\n  \"label\": \"徐州经济技术开发区\",\n  \"value\": \"320371\" },\n\n{\n  \"label\": \"新沂市\",\n  \"value\": \"320381\" },\n\n{\n  \"label\": \"邳州市\",\n  \"value\": \"320382\" }],\n\n\n[{\n  \"label\": \"天宁区\",\n  \"value\": \"320402\" },\n\n{\n  \"label\": \"钟楼区\",\n  \"value\": \"320404\" },\n\n{\n  \"label\": \"新北区\",\n  \"value\": \"320411\" },\n\n{\n  \"label\": \"武进区\",\n  \"value\": \"320412\" },\n\n{\n  \"label\": \"金坛区\",\n  \"value\": \"320413\" },\n\n{\n  \"label\": \"溧阳市\",\n  \"value\": \"320481\" }],\n\n\n[{\n  \"label\": \"虎丘区\",\n  \"value\": \"320505\" },\n\n{\n  \"label\": \"吴中区\",\n  \"value\": \"320506\" },\n\n{\n  \"label\": \"相城区\",\n  \"value\": \"320507\" },\n\n{\n  \"label\": \"姑苏区\",\n  \"value\": \"320508\" },\n\n{\n  \"label\": \"吴江区\",\n  \"value\": \"320509\" },\n\n{\n  \"label\": \"苏州工业园区\",\n  \"value\": \"320571\" },\n\n{\n  \"label\": \"常熟市\",\n  \"value\": \"320581\" },\n\n{\n  \"label\": \"张家港市\",\n  \"value\": \"320582\" },\n\n{\n  \"label\": \"昆山市\",\n  \"value\": \"320583\" },\n\n{\n  \"label\": \"太仓市\",\n  \"value\": \"320585\" }],\n\n\n[{\n  \"label\": \"崇川区\",\n  \"value\": \"320602\" },\n\n{\n  \"label\": \"港闸区\",\n  \"value\": \"320611\" },\n\n{\n  \"label\": \"通州区\",\n  \"value\": \"320612\" },\n\n{\n  \"label\": \"海安县\",\n  \"value\": \"320621\" },\n\n{\n  \"label\": \"如东县\",\n  \"value\": \"320623\" },\n\n{\n  \"label\": \"南通经济技术开发区\",\n  \"value\": \"320671\" },\n\n{\n  \"label\": \"启东市\",\n  \"value\": \"320681\" },\n\n{\n  \"label\": \"如皋市\",\n  \"value\": \"320682\" },\n\n{\n  \"label\": \"海门市\",\n  \"value\": \"320684\" }],\n\n\n[{\n  \"label\": \"连云区\",\n  \"value\": \"320703\" },\n\n{\n  \"label\": \"海州区\",\n  \"value\": \"320706\" },\n\n{\n  \"label\": \"赣榆区\",\n  \"value\": \"320707\" },\n\n{\n  \"label\": \"东海县\",\n  \"value\": \"320722\" },\n\n{\n  \"label\": \"灌云县\",\n  \"value\": \"320723\" },\n\n{\n  \"label\": \"灌南县\",\n  \"value\": \"320724\" },\n\n{\n  \"label\": \"连云港经济技术开发区\",\n  \"value\": \"320771\" },\n\n{\n  \"label\": \"连云港高新技术产业开发区\",\n  \"value\": \"320772\" }],\n\n\n[{\n  \"label\": \"淮安区\",\n  \"value\": \"320803\" },\n\n{\n  \"label\": \"淮阴区\",\n  \"value\": \"320804\" },\n\n{\n  \"label\": \"清江浦区\",\n  \"value\": \"320812\" },\n\n{\n  \"label\": \"洪泽区\",\n  \"value\": \"320813\" },\n\n{\n  \"label\": \"涟水县\",\n  \"value\": \"320826\" },\n\n{\n  \"label\": \"盱眙县\",\n  \"value\": \"320830\" },\n\n{\n  \"label\": \"金湖县\",\n  \"value\": \"320831\" },\n\n{\n  \"label\": \"淮安经济技术开发区\",\n  \"value\": \"320871\" }],\n\n\n[{\n  \"label\": \"亭湖区\",\n  \"value\": \"320902\" },\n\n{\n  \"label\": \"盐都区\",\n  \"value\": \"320903\" },\n\n{\n  \"label\": \"大丰区\",\n  \"value\": \"320904\" },\n\n{\n  \"label\": \"响水县\",\n  \"value\": \"320921\" },\n\n{\n  \"label\": \"滨海县\",\n  \"value\": \"320922\" },\n\n{\n  \"label\": \"阜宁县\",\n  \"value\": \"320923\" },\n\n{\n  \"label\": \"射阳县\",\n  \"value\": \"320924\" },\n\n{\n  \"label\": \"建湖县\",\n  \"value\": \"320925\" },\n\n{\n  \"label\": \"盐城经济技术开发区\",\n  \"value\": \"320971\" },\n\n{\n  \"label\": \"东台市\",\n  \"value\": \"320981\" }],\n\n\n[{\n  \"label\": \"广陵区\",\n  \"value\": \"321002\" },\n\n{\n  \"label\": \"邗江区\",\n  \"value\": \"321003\" },\n\n{\n  \"label\": \"江都区\",\n  \"value\": \"321012\" },\n\n{\n  \"label\": \"宝应县\",\n  \"value\": \"321023\" },\n\n{\n  \"label\": \"扬州经济技术开发区\",\n  \"value\": \"321071\" },\n\n{\n  \"label\": \"仪征市\",\n  \"value\": \"321081\" },\n\n{\n  \"label\": \"高邮市\",\n  \"value\": \"321084\" }],\n\n\n[{\n  \"label\": \"京口区\",\n  \"value\": \"321102\" },\n\n{\n  \"label\": \"润州区\",\n  \"value\": \"321111\" },\n\n{\n  \"label\": \"丹徒区\",\n  \"value\": \"321112\" },\n\n{\n  \"label\": \"镇江新区\",\n  \"value\": \"321171\" },\n\n{\n  \"label\": \"丹阳市\",\n  \"value\": \"321181\" },\n\n{\n  \"label\": \"扬中市\",\n  \"value\": \"321182\" },\n\n{\n  \"label\": \"句容市\",\n  \"value\": \"321183\" }],\n\n\n[{\n  \"label\": \"海陵区\",\n  \"value\": \"321202\" },\n\n{\n  \"label\": \"高港区\",\n  \"value\": \"321203\" },\n\n{\n  \"label\": \"姜堰区\",\n  \"value\": \"321204\" },\n\n{\n  \"label\": \"泰州医药高新技术产业开发区\",\n  \"value\": \"321271\" },\n\n{\n  \"label\": \"兴化市\",\n  \"value\": \"321281\" },\n\n{\n  \"label\": \"靖江市\",\n  \"value\": \"321282\" },\n\n{\n  \"label\": \"泰兴市\",\n  \"value\": \"321283\" }],\n\n\n[{\n  \"label\": \"宿城区\",\n  \"value\": \"321302\" },\n\n{\n  \"label\": \"宿豫区\",\n  \"value\": \"321311\" },\n\n{\n  \"label\": \"沭阳县\",\n  \"value\": \"321322\" },\n\n{\n  \"label\": \"泗阳县\",\n  \"value\": \"321323\" },\n\n{\n  \"label\": \"泗洪县\",\n  \"value\": \"321324\" },\n\n{\n  \"label\": \"宿迁经济技术开发区\",\n  \"value\": \"321371\" }]],\n\n\n\n[\n[{\n  \"label\": \"上城区\",\n  \"value\": \"330102\" },\n\n{\n  \"label\": \"下城区\",\n  \"value\": \"330103\" },\n\n{\n  \"label\": \"江干区\",\n  \"value\": \"330104\" },\n\n{\n  \"label\": \"拱墅区\",\n  \"value\": \"330105\" },\n\n{\n  \"label\": \"西湖区\",\n  \"value\": \"330106\" },\n\n{\n  \"label\": \"滨江区\",\n  \"value\": \"330108\" },\n\n{\n  \"label\": \"萧山区\",\n  \"value\": \"330109\" },\n\n{\n  \"label\": \"余杭区\",\n  \"value\": \"330110\" },\n\n{\n  \"label\": \"富阳区\",\n  \"value\": \"330111\" },\n\n{\n  \"label\": \"临安区\",\n  \"value\": \"330112\" },\n\n{\n  \"label\": \"桐庐县\",\n  \"value\": \"330122\" },\n\n{\n  \"label\": \"淳安县\",\n  \"value\": \"330127\" },\n\n{\n  \"label\": \"建德市\",\n  \"value\": \"330182\" }],\n\n\n[{\n  \"label\": \"海曙区\",\n  \"value\": \"330203\" },\n\n{\n  \"label\": \"江北区\",\n  \"value\": \"330205\" },\n\n{\n  \"label\": \"北仑区\",\n  \"value\": \"330206\" },\n\n{\n  \"label\": \"镇海区\",\n  \"value\": \"330211\" },\n\n{\n  \"label\": \"鄞州区\",\n  \"value\": \"330212\" },\n\n{\n  \"label\": \"奉化区\",\n  \"value\": \"330213\" },\n\n{\n  \"label\": \"象山县\",\n  \"value\": \"330225\" },\n\n{\n  \"label\": \"宁海县\",\n  \"value\": \"330226\" },\n\n{\n  \"label\": \"余姚市\",\n  \"value\": \"330281\" },\n\n{\n  \"label\": \"慈溪市\",\n  \"value\": \"330282\" }],\n\n\n[{\n  \"label\": \"鹿城区\",\n  \"value\": \"330302\" },\n\n{\n  \"label\": \"龙湾区\",\n  \"value\": \"330303\" },\n\n{\n  \"label\": \"瓯海区\",\n  \"value\": \"330304\" },\n\n{\n  \"label\": \"洞头区\",\n  \"value\": \"330305\" },\n\n{\n  \"label\": \"永嘉县\",\n  \"value\": \"330324\" },\n\n{\n  \"label\": \"平阳县\",\n  \"value\": \"330326\" },\n\n{\n  \"label\": \"苍南县\",\n  \"value\": \"330327\" },\n\n{\n  \"label\": \"文成县\",\n  \"value\": \"330328\" },\n\n{\n  \"label\": \"泰顺县\",\n  \"value\": \"330329\" },\n\n{\n  \"label\": \"温州经济技术开发区\",\n  \"value\": \"330371\" },\n\n{\n  \"label\": \"瑞安市\",\n  \"value\": \"330381\" },\n\n{\n  \"label\": \"乐清市\",\n  \"value\": \"330382\" }],\n\n\n[{\n  \"label\": \"南湖区\",\n  \"value\": \"330402\" },\n\n{\n  \"label\": \"秀洲区\",\n  \"value\": \"330411\" },\n\n{\n  \"label\": \"嘉善县\",\n  \"value\": \"330421\" },\n\n{\n  \"label\": \"海盐县\",\n  \"value\": \"330424\" },\n\n{\n  \"label\": \"海宁市\",\n  \"value\": \"330481\" },\n\n{\n  \"label\": \"平湖市\",\n  \"value\": \"330482\" },\n\n{\n  \"label\": \"桐乡市\",\n  \"value\": \"330483\" }],\n\n\n[{\n  \"label\": \"吴兴区\",\n  \"value\": \"330502\" },\n\n{\n  \"label\": \"南浔区\",\n  \"value\": \"330503\" },\n\n{\n  \"label\": \"德清县\",\n  \"value\": \"330521\" },\n\n{\n  \"label\": \"长兴县\",\n  \"value\": \"330522\" },\n\n{\n  \"label\": \"安吉县\",\n  \"value\": \"330523\" }],\n\n\n[{\n  \"label\": \"越城区\",\n  \"value\": \"330602\" },\n\n{\n  \"label\": \"柯桥区\",\n  \"value\": \"330603\" },\n\n{\n  \"label\": \"上虞区\",\n  \"value\": \"330604\" },\n\n{\n  \"label\": \"新昌县\",\n  \"value\": \"330624\" },\n\n{\n  \"label\": \"诸暨市\",\n  \"value\": \"330681\" },\n\n{\n  \"label\": \"嵊州市\",\n  \"value\": \"330683\" }],\n\n\n[{\n  \"label\": \"婺城区\",\n  \"value\": \"330702\" },\n\n{\n  \"label\": \"金东区\",\n  \"value\": \"330703\" },\n\n{\n  \"label\": \"武义县\",\n  \"value\": \"330723\" },\n\n{\n  \"label\": \"浦江县\",\n  \"value\": \"330726\" },\n\n{\n  \"label\": \"磐安县\",\n  \"value\": \"330727\" },\n\n{\n  \"label\": \"兰溪市\",\n  \"value\": \"330781\" },\n\n{\n  \"label\": \"义乌市\",\n  \"value\": \"330782\" },\n\n{\n  \"label\": \"东阳市\",\n  \"value\": \"330783\" },\n\n{\n  \"label\": \"永康市\",\n  \"value\": \"330784\" }],\n\n\n[{\n  \"label\": \"柯城区\",\n  \"value\": \"330802\" },\n\n{\n  \"label\": \"衢江区\",\n  \"value\": \"330803\" },\n\n{\n  \"label\": \"常山县\",\n  \"value\": \"330822\" },\n\n{\n  \"label\": \"开化县\",\n  \"value\": \"330824\" },\n\n{\n  \"label\": \"龙游县\",\n  \"value\": \"330825\" },\n\n{\n  \"label\": \"江山市\",\n  \"value\": \"330881\" }],\n\n\n[{\n  \"label\": \"定海区\",\n  \"value\": \"330902\" },\n\n{\n  \"label\": \"普陀区\",\n  \"value\": \"330903\" },\n\n{\n  \"label\": \"岱山县\",\n  \"value\": \"330921\" },\n\n{\n  \"label\": \"嵊泗县\",\n  \"value\": \"330922\" }],\n\n\n[{\n  \"label\": \"椒江区\",\n  \"value\": \"331002\" },\n\n{\n  \"label\": \"黄岩区\",\n  \"value\": \"331003\" },\n\n{\n  \"label\": \"路桥区\",\n  \"value\": \"331004\" },\n\n{\n  \"label\": \"三门县\",\n  \"value\": \"331022\" },\n\n{\n  \"label\": \"天台县\",\n  \"value\": \"331023\" },\n\n{\n  \"label\": \"仙居县\",\n  \"value\": \"331024\" },\n\n{\n  \"label\": \"温岭市\",\n  \"value\": \"331081\" },\n\n{\n  \"label\": \"临海市\",\n  \"value\": \"331082\" },\n\n{\n  \"label\": \"玉环市\",\n  \"value\": \"331083\" }],\n\n\n[{\n  \"label\": \"莲都区\",\n  \"value\": \"331102\" },\n\n{\n  \"label\": \"青田县\",\n  \"value\": \"331121\" },\n\n{\n  \"label\": \"缙云县\",\n  \"value\": \"331122\" },\n\n{\n  \"label\": \"遂昌县\",\n  \"value\": \"331123\" },\n\n{\n  \"label\": \"松阳县\",\n  \"value\": \"331124\" },\n\n{\n  \"label\": \"云和县\",\n  \"value\": \"331125\" },\n\n{\n  \"label\": \"庆元县\",\n  \"value\": \"331126\" },\n\n{\n  \"label\": \"景宁畲族自治县\",\n  \"value\": \"331127\" },\n\n{\n  \"label\": \"龙泉市\",\n  \"value\": \"331181\" }]],\n\n\n\n[\n[{\n  \"label\": \"瑶海区\",\n  \"value\": \"340102\" },\n\n{\n  \"label\": \"庐阳区\",\n  \"value\": \"340103\" },\n\n{\n  \"label\": \"蜀山区\",\n  \"value\": \"340104\" },\n\n{\n  \"label\": \"包河区\",\n  \"value\": \"340111\" },\n\n{\n  \"label\": \"长丰县\",\n  \"value\": \"340121\" },\n\n{\n  \"label\": \"肥东县\",\n  \"value\": \"340122\" },\n\n{\n  \"label\": \"肥西县\",\n  \"value\": \"340123\" },\n\n{\n  \"label\": \"庐江县\",\n  \"value\": \"340124\" },\n\n{\n  \"label\": \"合肥高新技术产业开发区\",\n  \"value\": \"340171\" },\n\n{\n  \"label\": \"合肥经济技术开发区\",\n  \"value\": \"340172\" },\n\n{\n  \"label\": \"合肥新站高新技术产业开发区\",\n  \"value\": \"340173\" },\n\n{\n  \"label\": \"巢湖市\",\n  \"value\": \"340181\" }],\n\n\n[{\n  \"label\": \"镜湖区\",\n  \"value\": \"340202\" },\n\n{\n  \"label\": \"弋江区\",\n  \"value\": \"340203\" },\n\n{\n  \"label\": \"鸠江区\",\n  \"value\": \"340207\" },\n\n{\n  \"label\": \"三山区\",\n  \"value\": \"340208\" },\n\n{\n  \"label\": \"芜湖县\",\n  \"value\": \"340221\" },\n\n{\n  \"label\": \"繁昌县\",\n  \"value\": \"340222\" },\n\n{\n  \"label\": \"南陵县\",\n  \"value\": \"340223\" },\n\n{\n  \"label\": \"无为县\",\n  \"value\": \"340225\" },\n\n{\n  \"label\": \"芜湖经济技术开发区\",\n  \"value\": \"340271\" },\n\n{\n  \"label\": \"安徽芜湖长江大桥经济开发区\",\n  \"value\": \"340272\" }],\n\n\n[{\n  \"label\": \"龙子湖区\",\n  \"value\": \"340302\" },\n\n{\n  \"label\": \"蚌山区\",\n  \"value\": \"340303\" },\n\n{\n  \"label\": \"禹会区\",\n  \"value\": \"340304\" },\n\n{\n  \"label\": \"淮上区\",\n  \"value\": \"340311\" },\n\n{\n  \"label\": \"怀远县\",\n  \"value\": \"340321\" },\n\n{\n  \"label\": \"五河县\",\n  \"value\": \"340322\" },\n\n{\n  \"label\": \"固镇县\",\n  \"value\": \"340323\" },\n\n{\n  \"label\": \"蚌埠市高新技术开发区\",\n  \"value\": \"340371\" },\n\n{\n  \"label\": \"蚌埠市经济开发区\",\n  \"value\": \"340372\" }],\n\n\n[{\n  \"label\": \"大通区\",\n  \"value\": \"340402\" },\n\n{\n  \"label\": \"田家庵区\",\n  \"value\": \"340403\" },\n\n{\n  \"label\": \"谢家集区\",\n  \"value\": \"340404\" },\n\n{\n  \"label\": \"八公山区\",\n  \"value\": \"340405\" },\n\n{\n  \"label\": \"潘集区\",\n  \"value\": \"340406\" },\n\n{\n  \"label\": \"凤台县\",\n  \"value\": \"340421\" },\n\n{\n  \"label\": \"寿县\",\n  \"value\": \"340422\" }],\n\n\n[{\n  \"label\": \"花山区\",\n  \"value\": \"340503\" },\n\n{\n  \"label\": \"雨山区\",\n  \"value\": \"340504\" },\n\n{\n  \"label\": \"博望区\",\n  \"value\": \"340506\" },\n\n{\n  \"label\": \"当涂县\",\n  \"value\": \"340521\" },\n\n{\n  \"label\": \"含山县\",\n  \"value\": \"340522\" },\n\n{\n  \"label\": \"和县\",\n  \"value\": \"340523\" }],\n\n\n[{\n  \"label\": \"杜集区\",\n  \"value\": \"340602\" },\n\n{\n  \"label\": \"相山区\",\n  \"value\": \"340603\" },\n\n{\n  \"label\": \"烈山区\",\n  \"value\": \"340604\" },\n\n{\n  \"label\": \"濉溪县\",\n  \"value\": \"340621\" }],\n\n\n[{\n  \"label\": \"铜官区\",\n  \"value\": \"340705\" },\n\n{\n  \"label\": \"义安区\",\n  \"value\": \"340706\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"340711\" },\n\n{\n  \"label\": \"枞阳县\",\n  \"value\": \"340722\" }],\n\n\n[{\n  \"label\": \"迎江区\",\n  \"value\": \"340802\" },\n\n{\n  \"label\": \"大观区\",\n  \"value\": \"340803\" },\n\n{\n  \"label\": \"宜秀区\",\n  \"value\": \"340811\" },\n\n{\n  \"label\": \"怀宁县\",\n  \"value\": \"340822\" },\n\n{\n  \"label\": \"潜山县\",\n  \"value\": \"340824\" },\n\n{\n  \"label\": \"太湖县\",\n  \"value\": \"340825\" },\n\n{\n  \"label\": \"宿松县\",\n  \"value\": \"340826\" },\n\n{\n  \"label\": \"望江县\",\n  \"value\": \"340827\" },\n\n{\n  \"label\": \"岳西县\",\n  \"value\": \"340828\" },\n\n{\n  \"label\": \"安徽安庆经济开发区\",\n  \"value\": \"340871\" },\n\n{\n  \"label\": \"桐城市\",\n  \"value\": \"340881\" }],\n\n\n[{\n  \"label\": \"屯溪区\",\n  \"value\": \"341002\" },\n\n{\n  \"label\": \"黄山区\",\n  \"value\": \"341003\" },\n\n{\n  \"label\": \"徽州区\",\n  \"value\": \"341004\" },\n\n{\n  \"label\": \"歙县\",\n  \"value\": \"341021\" },\n\n{\n  \"label\": \"休宁县\",\n  \"value\": \"341022\" },\n\n{\n  \"label\": \"黟县\",\n  \"value\": \"341023\" },\n\n{\n  \"label\": \"祁门县\",\n  \"value\": \"341024\" }],\n\n\n[{\n  \"label\": \"琅琊区\",\n  \"value\": \"341102\" },\n\n{\n  \"label\": \"南谯区\",\n  \"value\": \"341103\" },\n\n{\n  \"label\": \"来安县\",\n  \"value\": \"341122\" },\n\n{\n  \"label\": \"全椒县\",\n  \"value\": \"341124\" },\n\n{\n  \"label\": \"定远县\",\n  \"value\": \"341125\" },\n\n{\n  \"label\": \"凤阳县\",\n  \"value\": \"341126\" },\n\n{\n  \"label\": \"苏滁现代产业园\",\n  \"value\": \"341171\" },\n\n{\n  \"label\": \"滁州经济技术开发区\",\n  \"value\": \"341172\" },\n\n{\n  \"label\": \"天长市\",\n  \"value\": \"341181\" },\n\n{\n  \"label\": \"明光市\",\n  \"value\": \"341182\" }],\n\n\n[{\n  \"label\": \"颍州区\",\n  \"value\": \"341202\" },\n\n{\n  \"label\": \"颍东区\",\n  \"value\": \"341203\" },\n\n{\n  \"label\": \"颍泉区\",\n  \"value\": \"341204\" },\n\n{\n  \"label\": \"临泉县\",\n  \"value\": \"341221\" },\n\n{\n  \"label\": \"太和县\",\n  \"value\": \"341222\" },\n\n{\n  \"label\": \"阜南县\",\n  \"value\": \"341225\" },\n\n{\n  \"label\": \"颍上县\",\n  \"value\": \"341226\" },\n\n{\n  \"label\": \"阜阳合肥现代产业园区\",\n  \"value\": \"341271\" },\n\n{\n  \"label\": \"阜阳经济技术开发区\",\n  \"value\": \"341272\" },\n\n{\n  \"label\": \"界首市\",\n  \"value\": \"341282\" }],\n\n\n[{\n  \"label\": \"埇桥区\",\n  \"value\": \"341302\" },\n\n{\n  \"label\": \"砀山县\",\n  \"value\": \"341321\" },\n\n{\n  \"label\": \"萧县\",\n  \"value\": \"341322\" },\n\n{\n  \"label\": \"灵璧县\",\n  \"value\": \"341323\" },\n\n{\n  \"label\": \"泗县\",\n  \"value\": \"341324\" },\n\n{\n  \"label\": \"宿州马鞍山现代产业园区\",\n  \"value\": \"341371\" },\n\n{\n  \"label\": \"宿州经济技术开发区\",\n  \"value\": \"341372\" }],\n\n\n[{\n  \"label\": \"金安区\",\n  \"value\": \"341502\" },\n\n{\n  \"label\": \"裕安区\",\n  \"value\": \"341503\" },\n\n{\n  \"label\": \"叶集区\",\n  \"value\": \"341504\" },\n\n{\n  \"label\": \"霍邱县\",\n  \"value\": \"341522\" },\n\n{\n  \"label\": \"舒城县\",\n  \"value\": \"341523\" },\n\n{\n  \"label\": \"金寨县\",\n  \"value\": \"341524\" },\n\n{\n  \"label\": \"霍山县\",\n  \"value\": \"341525\" }],\n\n\n[{\n  \"label\": \"谯城区\",\n  \"value\": \"341602\" },\n\n{\n  \"label\": \"涡阳县\",\n  \"value\": \"341621\" },\n\n{\n  \"label\": \"蒙城县\",\n  \"value\": \"341622\" },\n\n{\n  \"label\": \"利辛县\",\n  \"value\": \"341623\" }],\n\n\n[{\n  \"label\": \"贵池区\",\n  \"value\": \"341702\" },\n\n{\n  \"label\": \"东至县\",\n  \"value\": \"341721\" },\n\n{\n  \"label\": \"石台县\",\n  \"value\": \"341722\" },\n\n{\n  \"label\": \"青阳县\",\n  \"value\": \"341723\" }],\n\n\n[{\n  \"label\": \"宣州区\",\n  \"value\": \"341802\" },\n\n{\n  \"label\": \"郎溪县\",\n  \"value\": \"341821\" },\n\n{\n  \"label\": \"广德县\",\n  \"value\": \"341822\" },\n\n{\n  \"label\": \"泾县\",\n  \"value\": \"341823\" },\n\n{\n  \"label\": \"绩溪县\",\n  \"value\": \"341824\" },\n\n{\n  \"label\": \"旌德县\",\n  \"value\": \"341825\" },\n\n{\n  \"label\": \"宣城市经济开发区\",\n  \"value\": \"341871\" },\n\n{\n  \"label\": \"宁国市\",\n  \"value\": \"341881\" }]],\n\n\n\n[\n[{\n  \"label\": \"鼓楼区\",\n  \"value\": \"350102\" },\n\n{\n  \"label\": \"台江区\",\n  \"value\": \"350103\" },\n\n{\n  \"label\": \"仓山区\",\n  \"value\": \"350104\" },\n\n{\n  \"label\": \"马尾区\",\n  \"value\": \"350105\" },\n\n{\n  \"label\": \"晋安区\",\n  \"value\": \"350111\" },\n\n{\n  \"label\": \"闽侯县\",\n  \"value\": \"350121\" },\n\n{\n  \"label\": \"连江县\",\n  \"value\": \"350122\" },\n\n{\n  \"label\": \"罗源县\",\n  \"value\": \"350123\" },\n\n{\n  \"label\": \"闽清县\",\n  \"value\": \"350124\" },\n\n{\n  \"label\": \"永泰县\",\n  \"value\": \"350125\" },\n\n{\n  \"label\": \"平潭县\",\n  \"value\": \"350128\" },\n\n{\n  \"label\": \"福清市\",\n  \"value\": \"350181\" },\n\n{\n  \"label\": \"长乐市\",\n  \"value\": \"350182\" }],\n\n\n[{\n  \"label\": \"思明区\",\n  \"value\": \"350203\" },\n\n{\n  \"label\": \"海沧区\",\n  \"value\": \"350205\" },\n\n{\n  \"label\": \"湖里区\",\n  \"value\": \"350206\" },\n\n{\n  \"label\": \"集美区\",\n  \"value\": \"350211\" },\n\n{\n  \"label\": \"同安区\",\n  \"value\": \"350212\" },\n\n{\n  \"label\": \"翔安区\",\n  \"value\": \"350213\" }],\n\n\n[{\n  \"label\": \"城厢区\",\n  \"value\": \"350302\" },\n\n{\n  \"label\": \"涵江区\",\n  \"value\": \"350303\" },\n\n{\n  \"label\": \"荔城区\",\n  \"value\": \"350304\" },\n\n{\n  \"label\": \"秀屿区\",\n  \"value\": \"350305\" },\n\n{\n  \"label\": \"仙游县\",\n  \"value\": \"350322\" }],\n\n\n[{\n  \"label\": \"梅列区\",\n  \"value\": \"350402\" },\n\n{\n  \"label\": \"三元区\",\n  \"value\": \"350403\" },\n\n{\n  \"label\": \"明溪县\",\n  \"value\": \"350421\" },\n\n{\n  \"label\": \"清流县\",\n  \"value\": \"350423\" },\n\n{\n  \"label\": \"宁化县\",\n  \"value\": \"350424\" },\n\n{\n  \"label\": \"大田县\",\n  \"value\": \"350425\" },\n\n{\n  \"label\": \"尤溪县\",\n  \"value\": \"350426\" },\n\n{\n  \"label\": \"沙县\",\n  \"value\": \"350427\" },\n\n{\n  \"label\": \"将乐县\",\n  \"value\": \"350428\" },\n\n{\n  \"label\": \"泰宁县\",\n  \"value\": \"350429\" },\n\n{\n  \"label\": \"建宁县\",\n  \"value\": \"350430\" },\n\n{\n  \"label\": \"永安市\",\n  \"value\": \"350481\" }],\n\n\n[{\n  \"label\": \"鲤城区\",\n  \"value\": \"350502\" },\n\n{\n  \"label\": \"丰泽区\",\n  \"value\": \"350503\" },\n\n{\n  \"label\": \"洛江区\",\n  \"value\": \"350504\" },\n\n{\n  \"label\": \"泉港区\",\n  \"value\": \"350505\" },\n\n{\n  \"label\": \"惠安县\",\n  \"value\": \"350521\" },\n\n{\n  \"label\": \"安溪县\",\n  \"value\": \"350524\" },\n\n{\n  \"label\": \"永春县\",\n  \"value\": \"350525\" },\n\n{\n  \"label\": \"德化县\",\n  \"value\": \"350526\" },\n\n{\n  \"label\": \"金门县\",\n  \"value\": \"350527\" },\n\n{\n  \"label\": \"石狮市\",\n  \"value\": \"350581\" },\n\n{\n  \"label\": \"晋江市\",\n  \"value\": \"350582\" },\n\n{\n  \"label\": \"南安市\",\n  \"value\": \"350583\" }],\n\n\n[{\n  \"label\": \"芗城区\",\n  \"value\": \"350602\" },\n\n{\n  \"label\": \"龙文区\",\n  \"value\": \"350603\" },\n\n{\n  \"label\": \"云霄县\",\n  \"value\": \"350622\" },\n\n{\n  \"label\": \"漳浦县\",\n  \"value\": \"350623\" },\n\n{\n  \"label\": \"诏安县\",\n  \"value\": \"350624\" },\n\n{\n  \"label\": \"长泰县\",\n  \"value\": \"350625\" },\n\n{\n  \"label\": \"东山县\",\n  \"value\": \"350626\" },\n\n{\n  \"label\": \"南靖县\",\n  \"value\": \"350627\" },\n\n{\n  \"label\": \"平和县\",\n  \"value\": \"350628\" },\n\n{\n  \"label\": \"华安县\",\n  \"value\": \"350629\" },\n\n{\n  \"label\": \"龙海市\",\n  \"value\": \"350681\" }],\n\n\n[{\n  \"label\": \"延平区\",\n  \"value\": \"350702\" },\n\n{\n  \"label\": \"建阳区\",\n  \"value\": \"350703\" },\n\n{\n  \"label\": \"顺昌县\",\n  \"value\": \"350721\" },\n\n{\n  \"label\": \"浦城县\",\n  \"value\": \"350722\" },\n\n{\n  \"label\": \"光泽县\",\n  \"value\": \"350723\" },\n\n{\n  \"label\": \"松溪县\",\n  \"value\": \"350724\" },\n\n{\n  \"label\": \"政和县\",\n  \"value\": \"350725\" },\n\n{\n  \"label\": \"邵武市\",\n  \"value\": \"350781\" },\n\n{\n  \"label\": \"武夷山市\",\n  \"value\": \"350782\" },\n\n{\n  \"label\": \"建瓯市\",\n  \"value\": \"350783\" }],\n\n\n[{\n  \"label\": \"新罗区\",\n  \"value\": \"350802\" },\n\n{\n  \"label\": \"永定区\",\n  \"value\": \"350803\" },\n\n{\n  \"label\": \"长汀县\",\n  \"value\": \"350821\" },\n\n{\n  \"label\": \"上杭县\",\n  \"value\": \"350823\" },\n\n{\n  \"label\": \"武平县\",\n  \"value\": \"350824\" },\n\n{\n  \"label\": \"连城县\",\n  \"value\": \"350825\" },\n\n{\n  \"label\": \"漳平市\",\n  \"value\": \"350881\" }],\n\n\n[{\n  \"label\": \"蕉城区\",\n  \"value\": \"350902\" },\n\n{\n  \"label\": \"霞浦县\",\n  \"value\": \"350921\" },\n\n{\n  \"label\": \"古田县\",\n  \"value\": \"350922\" },\n\n{\n  \"label\": \"屏南县\",\n  \"value\": \"350923\" },\n\n{\n  \"label\": \"寿宁县\",\n  \"value\": \"350924\" },\n\n{\n  \"label\": \"周宁县\",\n  \"value\": \"350925\" },\n\n{\n  \"label\": \"柘荣县\",\n  \"value\": \"350926\" },\n\n{\n  \"label\": \"福安市\",\n  \"value\": \"350981\" },\n\n{\n  \"label\": \"福鼎市\",\n  \"value\": \"350982\" }]],\n\n\n\n[\n[{\n  \"label\": \"东湖区\",\n  \"value\": \"360102\" },\n\n{\n  \"label\": \"西湖区\",\n  \"value\": \"360103\" },\n\n{\n  \"label\": \"青云谱区\",\n  \"value\": \"360104\" },\n\n{\n  \"label\": \"湾里区\",\n  \"value\": \"360105\" },\n\n{\n  \"label\": \"青山湖区\",\n  \"value\": \"360111\" },\n\n{\n  \"label\": \"新建区\",\n  \"value\": \"360112\" },\n\n{\n  \"label\": \"南昌县\",\n  \"value\": \"360121\" },\n\n{\n  \"label\": \"安义县\",\n  \"value\": \"360123\" },\n\n{\n  \"label\": \"进贤县\",\n  \"value\": \"360124\" }],\n\n\n[{\n  \"label\": \"昌江区\",\n  \"value\": \"360202\" },\n\n{\n  \"label\": \"珠山区\",\n  \"value\": \"360203\" },\n\n{\n  \"label\": \"浮梁县\",\n  \"value\": \"360222\" },\n\n{\n  \"label\": \"乐平市\",\n  \"value\": \"360281\" }],\n\n\n[{\n  \"label\": \"安源区\",\n  \"value\": \"360302\" },\n\n{\n  \"label\": \"湘东区\",\n  \"value\": \"360313\" },\n\n{\n  \"label\": \"莲花县\",\n  \"value\": \"360321\" },\n\n{\n  \"label\": \"上栗县\",\n  \"value\": \"360322\" },\n\n{\n  \"label\": \"芦溪县\",\n  \"value\": \"360323\" }],\n\n\n[{\n  \"label\": \"濂溪区\",\n  \"value\": \"360402\" },\n\n{\n  \"label\": \"浔阳区\",\n  \"value\": \"360403\" },\n\n{\n  \"label\": \"柴桑区\",\n  \"value\": \"360404\" },\n\n{\n  \"label\": \"武宁县\",\n  \"value\": \"360423\" },\n\n{\n  \"label\": \"修水县\",\n  \"value\": \"360424\" },\n\n{\n  \"label\": \"永修县\",\n  \"value\": \"360425\" },\n\n{\n  \"label\": \"德安县\",\n  \"value\": \"360426\" },\n\n{\n  \"label\": \"都昌县\",\n  \"value\": \"360428\" },\n\n{\n  \"label\": \"湖口县\",\n  \"value\": \"360429\" },\n\n{\n  \"label\": \"彭泽县\",\n  \"value\": \"360430\" },\n\n{\n  \"label\": \"瑞昌市\",\n  \"value\": \"360481\" },\n\n{\n  \"label\": \"共青城市\",\n  \"value\": \"360482\" },\n\n{\n  \"label\": \"庐山市\",\n  \"value\": \"360483\" }],\n\n\n[{\n  \"label\": \"渝水区\",\n  \"value\": \"360502\" },\n\n{\n  \"label\": \"分宜县\",\n  \"value\": \"360521\" }],\n\n\n[{\n  \"label\": \"月湖区\",\n  \"value\": \"360602\" },\n\n{\n  \"label\": \"余江县\",\n  \"value\": \"360622\" },\n\n{\n  \"label\": \"贵溪市\",\n  \"value\": \"360681\" }],\n\n\n[{\n  \"label\": \"章贡区\",\n  \"value\": \"360702\" },\n\n{\n  \"label\": \"南康区\",\n  \"value\": \"360703\" },\n\n{\n  \"label\": \"赣县区\",\n  \"value\": \"360704\" },\n\n{\n  \"label\": \"信丰县\",\n  \"value\": \"360722\" },\n\n{\n  \"label\": \"大余县\",\n  \"value\": \"360723\" },\n\n{\n  \"label\": \"上犹县\",\n  \"value\": \"360724\" },\n\n{\n  \"label\": \"崇义县\",\n  \"value\": \"360725\" },\n\n{\n  \"label\": \"安远县\",\n  \"value\": \"360726\" },\n\n{\n  \"label\": \"龙南县\",\n  \"value\": \"360727\" },\n\n{\n  \"label\": \"定南县\",\n  \"value\": \"360728\" },\n\n{\n  \"label\": \"全南县\",\n  \"value\": \"360729\" },\n\n{\n  \"label\": \"宁都县\",\n  \"value\": \"360730\" },\n\n{\n  \"label\": \"于都县\",\n  \"value\": \"360731\" },\n\n{\n  \"label\": \"兴国县\",\n  \"value\": \"360732\" },\n\n{\n  \"label\": \"会昌县\",\n  \"value\": \"360733\" },\n\n{\n  \"label\": \"寻乌县\",\n  \"value\": \"360734\" },\n\n{\n  \"label\": \"石城县\",\n  \"value\": \"360735\" },\n\n{\n  \"label\": \"瑞金市\",\n  \"value\": \"360781\" }],\n\n\n[{\n  \"label\": \"吉州区\",\n  \"value\": \"360802\" },\n\n{\n  \"label\": \"青原区\",\n  \"value\": \"360803\" },\n\n{\n  \"label\": \"吉安县\",\n  \"value\": \"360821\" },\n\n{\n  \"label\": \"吉水县\",\n  \"value\": \"360822\" },\n\n{\n  \"label\": \"峡江县\",\n  \"value\": \"360823\" },\n\n{\n  \"label\": \"新干县\",\n  \"value\": \"360824\" },\n\n{\n  \"label\": \"永丰县\",\n  \"value\": \"360825\" },\n\n{\n  \"label\": \"泰和县\",\n  \"value\": \"360826\" },\n\n{\n  \"label\": \"遂川县\",\n  \"value\": \"360827\" },\n\n{\n  \"label\": \"万安县\",\n  \"value\": \"360828\" },\n\n{\n  \"label\": \"安福县\",\n  \"value\": \"360829\" },\n\n{\n  \"label\": \"永新县\",\n  \"value\": \"360830\" },\n\n{\n  \"label\": \"井冈山市\",\n  \"value\": \"360881\" }],\n\n\n[{\n  \"label\": \"袁州区\",\n  \"value\": \"360902\" },\n\n{\n  \"label\": \"奉新县\",\n  \"value\": \"360921\" },\n\n{\n  \"label\": \"万载县\",\n  \"value\": \"360922\" },\n\n{\n  \"label\": \"上高县\",\n  \"value\": \"360923\" },\n\n{\n  \"label\": \"宜丰县\",\n  \"value\": \"360924\" },\n\n{\n  \"label\": \"靖安县\",\n  \"value\": \"360925\" },\n\n{\n  \"label\": \"铜鼓县\",\n  \"value\": \"360926\" },\n\n{\n  \"label\": \"丰城市\",\n  \"value\": \"360981\" },\n\n{\n  \"label\": \"樟树市\",\n  \"value\": \"360982\" },\n\n{\n  \"label\": \"高安市\",\n  \"value\": \"360983\" }],\n\n\n[{\n  \"label\": \"临川区\",\n  \"value\": \"361002\" },\n\n{\n  \"label\": \"东乡区\",\n  \"value\": \"361003\" },\n\n{\n  \"label\": \"南城县\",\n  \"value\": \"361021\" },\n\n{\n  \"label\": \"黎川县\",\n  \"value\": \"361022\" },\n\n{\n  \"label\": \"南丰县\",\n  \"value\": \"361023\" },\n\n{\n  \"label\": \"崇仁县\",\n  \"value\": \"361024\" },\n\n{\n  \"label\": \"乐安县\",\n  \"value\": \"361025\" },\n\n{\n  \"label\": \"宜黄县\",\n  \"value\": \"361026\" },\n\n{\n  \"label\": \"金溪县\",\n  \"value\": \"361027\" },\n\n{\n  \"label\": \"资溪县\",\n  \"value\": \"361028\" },\n\n{\n  \"label\": \"广昌县\",\n  \"value\": \"361030\" }],\n\n\n[{\n  \"label\": \"信州区\",\n  \"value\": \"361102\" },\n\n{\n  \"label\": \"广丰区\",\n  \"value\": \"361103\" },\n\n{\n  \"label\": \"上饶县\",\n  \"value\": \"361121\" },\n\n{\n  \"label\": \"玉山县\",\n  \"value\": \"361123\" },\n\n{\n  \"label\": \"铅山县\",\n  \"value\": \"361124\" },\n\n{\n  \"label\": \"横峰县\",\n  \"value\": \"361125\" },\n\n{\n  \"label\": \"弋阳县\",\n  \"value\": \"361126\" },\n\n{\n  \"label\": \"余干县\",\n  \"value\": \"361127\" },\n\n{\n  \"label\": \"鄱阳县\",\n  \"value\": \"361128\" },\n\n{\n  \"label\": \"万年县\",\n  \"value\": \"361129\" },\n\n{\n  \"label\": \"婺源县\",\n  \"value\": \"361130\" },\n\n{\n  \"label\": \"德兴市\",\n  \"value\": \"361181\" }]],\n\n\n\n[\n[{\n  \"label\": \"历下区\",\n  \"value\": \"370102\" },\n\n{\n  \"label\": \"市中区\",\n  \"value\": \"370103\" },\n\n{\n  \"label\": \"槐荫区\",\n  \"value\": \"370104\" },\n\n{\n  \"label\": \"天桥区\",\n  \"value\": \"370105\" },\n\n{\n  \"label\": \"历城区\",\n  \"value\": \"370112\" },\n\n{\n  \"label\": \"长清区\",\n  \"value\": \"370113\" },\n\n{\n  \"label\": \"章丘区\",\n  \"value\": \"370114\" },\n\n{\n  \"label\": \"平阴县\",\n  \"value\": \"370124\" },\n\n{\n  \"label\": \"济阳县\",\n  \"value\": \"370125\" },\n\n{\n  \"label\": \"商河县\",\n  \"value\": \"370126\" },\n\n{\n  \"label\": \"济南高新技术产业开发区\",\n  \"value\": \"370171\" }],\n\n\n[{\n  \"label\": \"市南区\",\n  \"value\": \"370202\" },\n\n{\n  \"label\": \"市北区\",\n  \"value\": \"370203\" },\n\n{\n  \"label\": \"黄岛区\",\n  \"value\": \"370211\" },\n\n{\n  \"label\": \"崂山区\",\n  \"value\": \"370212\" },\n\n{\n  \"label\": \"李沧区\",\n  \"value\": \"370213\" },\n\n{\n  \"label\": \"城阳区\",\n  \"value\": \"370214\" },\n\n{\n  \"label\": \"即墨区\",\n  \"value\": \"370215\" },\n\n{\n  \"label\": \"青岛高新技术产业开发区\",\n  \"value\": \"370271\" },\n\n{\n  \"label\": \"胶州市\",\n  \"value\": \"370281\" },\n\n{\n  \"label\": \"平度市\",\n  \"value\": \"370283\" },\n\n{\n  \"label\": \"莱西市\",\n  \"value\": \"370285\" }],\n\n\n[{\n  \"label\": \"淄川区\",\n  \"value\": \"370302\" },\n\n{\n  \"label\": \"张店区\",\n  \"value\": \"370303\" },\n\n{\n  \"label\": \"博山区\",\n  \"value\": \"370304\" },\n\n{\n  \"label\": \"临淄区\",\n  \"value\": \"370305\" },\n\n{\n  \"label\": \"周村区\",\n  \"value\": \"370306\" },\n\n{\n  \"label\": \"桓台县\",\n  \"value\": \"370321\" },\n\n{\n  \"label\": \"高青县\",\n  \"value\": \"370322\" },\n\n{\n  \"label\": \"沂源县\",\n  \"value\": \"370323\" }],\n\n\n[{\n  \"label\": \"市中区\",\n  \"value\": \"370402\" },\n\n{\n  \"label\": \"薛城区\",\n  \"value\": \"370403\" },\n\n{\n  \"label\": \"峄城区\",\n  \"value\": \"370404\" },\n\n{\n  \"label\": \"台儿庄区\",\n  \"value\": \"370405\" },\n\n{\n  \"label\": \"山亭区\",\n  \"value\": \"370406\" },\n\n{\n  \"label\": \"滕州市\",\n  \"value\": \"370481\" }],\n\n\n[{\n  \"label\": \"东营区\",\n  \"value\": \"370502\" },\n\n{\n  \"label\": \"河口区\",\n  \"value\": \"370503\" },\n\n{\n  \"label\": \"垦利区\",\n  \"value\": \"370505\" },\n\n{\n  \"label\": \"利津县\",\n  \"value\": \"370522\" },\n\n{\n  \"label\": \"广饶县\",\n  \"value\": \"370523\" },\n\n{\n  \"label\": \"东营经济技术开发区\",\n  \"value\": \"370571\" },\n\n{\n  \"label\": \"东营港经济开发区\",\n  \"value\": \"370572\" }],\n\n\n[{\n  \"label\": \"芝罘区\",\n  \"value\": \"370602\" },\n\n{\n  \"label\": \"福山区\",\n  \"value\": \"370611\" },\n\n{\n  \"label\": \"牟平区\",\n  \"value\": \"370612\" },\n\n{\n  \"label\": \"莱山区\",\n  \"value\": \"370613\" },\n\n{\n  \"label\": \"长岛县\",\n  \"value\": \"370634\" },\n\n{\n  \"label\": \"烟台高新技术产业开发区\",\n  \"value\": \"370671\" },\n\n{\n  \"label\": \"烟台经济技术开发区\",\n  \"value\": \"370672\" },\n\n{\n  \"label\": \"龙口市\",\n  \"value\": \"370681\" },\n\n{\n  \"label\": \"莱阳市\",\n  \"value\": \"370682\" },\n\n{\n  \"label\": \"莱州市\",\n  \"value\": \"370683\" },\n\n{\n  \"label\": \"蓬莱市\",\n  \"value\": \"370684\" },\n\n{\n  \"label\": \"招远市\",\n  \"value\": \"370685\" },\n\n{\n  \"label\": \"栖霞市\",\n  \"value\": \"370686\" },\n\n{\n  \"label\": \"海阳市\",\n  \"value\": \"370687\" }],\n\n\n[{\n  \"label\": \"潍城区\",\n  \"value\": \"370702\" },\n\n{\n  \"label\": \"寒亭区\",\n  \"value\": \"370703\" },\n\n{\n  \"label\": \"坊子区\",\n  \"value\": \"370704\" },\n\n{\n  \"label\": \"奎文区\",\n  \"value\": \"370705\" },\n\n{\n  \"label\": \"临朐县\",\n  \"value\": \"370724\" },\n\n{\n  \"label\": \"昌乐县\",\n  \"value\": \"370725\" },\n\n{\n  \"label\": \"潍坊滨海经济技术开发区\",\n  \"value\": \"370772\" },\n\n{\n  \"label\": \"青州市\",\n  \"value\": \"370781\" },\n\n{\n  \"label\": \"诸城市\",\n  \"value\": \"370782\" },\n\n{\n  \"label\": \"寿光市\",\n  \"value\": \"370783\" },\n\n{\n  \"label\": \"安丘市\",\n  \"value\": \"370784\" },\n\n{\n  \"label\": \"高密市\",\n  \"value\": \"370785\" },\n\n{\n  \"label\": \"昌邑市\",\n  \"value\": \"370786\" }],\n\n\n[{\n  \"label\": \"任城区\",\n  \"value\": \"370811\" },\n\n{\n  \"label\": \"兖州区\",\n  \"value\": \"370812\" },\n\n{\n  \"label\": \"微山县\",\n  \"value\": \"370826\" },\n\n{\n  \"label\": \"鱼台县\",\n  \"value\": \"370827\" },\n\n{\n  \"label\": \"金乡县\",\n  \"value\": \"370828\" },\n\n{\n  \"label\": \"嘉祥县\",\n  \"value\": \"370829\" },\n\n{\n  \"label\": \"汶上县\",\n  \"value\": \"370830\" },\n\n{\n  \"label\": \"泗水县\",\n  \"value\": \"370831\" },\n\n{\n  \"label\": \"梁山县\",\n  \"value\": \"370832\" },\n\n{\n  \"label\": \"济宁高新技术产业开发区\",\n  \"value\": \"370871\" },\n\n{\n  \"label\": \"曲阜市\",\n  \"value\": \"370881\" },\n\n{\n  \"label\": \"邹城市\",\n  \"value\": \"370883\" }],\n\n\n[{\n  \"label\": \"泰山区\",\n  \"value\": \"370902\" },\n\n{\n  \"label\": \"岱岳区\",\n  \"value\": \"370911\" },\n\n{\n  \"label\": \"宁阳县\",\n  \"value\": \"370921\" },\n\n{\n  \"label\": \"东平县\",\n  \"value\": \"370923\" },\n\n{\n  \"label\": \"新泰市\",\n  \"value\": \"370982\" },\n\n{\n  \"label\": \"肥城市\",\n  \"value\": \"370983\" }],\n\n\n[{\n  \"label\": \"环翠区\",\n  \"value\": \"371002\" },\n\n{\n  \"label\": \"文登区\",\n  \"value\": \"371003\" },\n\n{\n  \"label\": \"威海火炬高技术产业开发区\",\n  \"value\": \"371071\" },\n\n{\n  \"label\": \"威海经济技术开发区\",\n  \"value\": \"371072\" },\n\n{\n  \"label\": \"威海临港经济技术开发区\",\n  \"value\": \"371073\" },\n\n{\n  \"label\": \"荣成市\",\n  \"value\": \"371082\" },\n\n{\n  \"label\": \"乳山市\",\n  \"value\": \"371083\" }],\n\n\n[{\n  \"label\": \"东港区\",\n  \"value\": \"371102\" },\n\n{\n  \"label\": \"岚山区\",\n  \"value\": \"371103\" },\n\n{\n  \"label\": \"五莲县\",\n  \"value\": \"371121\" },\n\n{\n  \"label\": \"莒县\",\n  \"value\": \"371122\" },\n\n{\n  \"label\": \"日照经济技术开发区\",\n  \"value\": \"371171\" },\n\n{\n  \"label\": \"日照国际海洋城\",\n  \"value\": \"371172\" }],\n\n\n[{\n  \"label\": \"莱城区\",\n  \"value\": \"371202\" },\n\n{\n  \"label\": \"钢城区\",\n  \"value\": \"371203\" }],\n\n\n[{\n  \"label\": \"兰山区\",\n  \"value\": \"371302\" },\n\n{\n  \"label\": \"罗庄区\",\n  \"value\": \"371311\" },\n\n{\n  \"label\": \"河东区\",\n  \"value\": \"371312\" },\n\n{\n  \"label\": \"沂南县\",\n  \"value\": \"371321\" },\n\n{\n  \"label\": \"郯城县\",\n  \"value\": \"371322\" },\n\n{\n  \"label\": \"沂水县\",\n  \"value\": \"371323\" },\n\n{\n  \"label\": \"兰陵县\",\n  \"value\": \"371324\" },\n\n{\n  \"label\": \"费县\",\n  \"value\": \"371325\" },\n\n{\n  \"label\": \"平邑县\",\n  \"value\": \"371326\" },\n\n{\n  \"label\": \"莒南县\",\n  \"value\": \"371327\" },\n\n{\n  \"label\": \"蒙阴县\",\n  \"value\": \"371328\" },\n\n{\n  \"label\": \"临沭县\",\n  \"value\": \"371329\" },\n\n{\n  \"label\": \"临沂高新技术产业开发区\",\n  \"value\": \"371371\" },\n\n{\n  \"label\": \"临沂经济技术开发区\",\n  \"value\": \"371372\" },\n\n{\n  \"label\": \"临沂临港经济开发区\",\n  \"value\": \"371373\" }],\n\n\n[{\n  \"label\": \"德城区\",\n  \"value\": \"371402\" },\n\n{\n  \"label\": \"陵城区\",\n  \"value\": \"371403\" },\n\n{\n  \"label\": \"宁津县\",\n  \"value\": \"371422\" },\n\n{\n  \"label\": \"庆云县\",\n  \"value\": \"371423\" },\n\n{\n  \"label\": \"临邑县\",\n  \"value\": \"371424\" },\n\n{\n  \"label\": \"齐河县\",\n  \"value\": \"371425\" },\n\n{\n  \"label\": \"平原县\",\n  \"value\": \"371426\" },\n\n{\n  \"label\": \"夏津县\",\n  \"value\": \"371427\" },\n\n{\n  \"label\": \"武城县\",\n  \"value\": \"371428\" },\n\n{\n  \"label\": \"德州经济技术开发区\",\n  \"value\": \"371471\" },\n\n{\n  \"label\": \"德州运河经济开发区\",\n  \"value\": \"371472\" },\n\n{\n  \"label\": \"乐陵市\",\n  \"value\": \"371481\" },\n\n{\n  \"label\": \"禹城市\",\n  \"value\": \"371482\" }],\n\n\n[{\n  \"label\": \"东昌府区\",\n  \"value\": \"371502\" },\n\n{\n  \"label\": \"阳谷县\",\n  \"value\": \"371521\" },\n\n{\n  \"label\": \"莘县\",\n  \"value\": \"371522\" },\n\n{\n  \"label\": \"茌平县\",\n  \"value\": \"371523\" },\n\n{\n  \"label\": \"东阿县\",\n  \"value\": \"371524\" },\n\n{\n  \"label\": \"冠县\",\n  \"value\": \"371525\" },\n\n{\n  \"label\": \"高唐县\",\n  \"value\": \"371526\" },\n\n{\n  \"label\": \"临清市\",\n  \"value\": \"371581\" }],\n\n\n[{\n  \"label\": \"滨城区\",\n  \"value\": \"371602\" },\n\n{\n  \"label\": \"沾化区\",\n  \"value\": \"371603\" },\n\n{\n  \"label\": \"惠民县\",\n  \"value\": \"371621\" },\n\n{\n  \"label\": \"阳信县\",\n  \"value\": \"371622\" },\n\n{\n  \"label\": \"无棣县\",\n  \"value\": \"371623\" },\n\n{\n  \"label\": \"博兴县\",\n  \"value\": \"371625\" },\n\n{\n  \"label\": \"邹平县\",\n  \"value\": \"371626\" }],\n\n\n[{\n  \"label\": \"牡丹区\",\n  \"value\": \"371702\" },\n\n{\n  \"label\": \"定陶区\",\n  \"value\": \"371703\" },\n\n{\n  \"label\": \"曹县\",\n  \"value\": \"371721\" },\n\n{\n  \"label\": \"单县\",\n  \"value\": \"371722\" },\n\n{\n  \"label\": \"成武县\",\n  \"value\": \"371723\" },\n\n{\n  \"label\": \"巨野县\",\n  \"value\": \"371724\" },\n\n{\n  \"label\": \"郓城县\",\n  \"value\": \"371725\" },\n\n{\n  \"label\": \"鄄城县\",\n  \"value\": \"371726\" },\n\n{\n  \"label\": \"东明县\",\n  \"value\": \"371728\" },\n\n{\n  \"label\": \"菏泽经济技术开发区\",\n  \"value\": \"371771\" },\n\n{\n  \"label\": \"菏泽高新技术开发区\",\n  \"value\": \"371772\" }]],\n\n\n\n[\n[{\n  \"label\": \"中原区\",\n  \"value\": \"410102\" },\n\n{\n  \"label\": \"二七区\",\n  \"value\": \"410103\" },\n\n{\n  \"label\": \"管城回族区\",\n  \"value\": \"410104\" },\n\n{\n  \"label\": \"金水区\",\n  \"value\": \"410105\" },\n\n{\n  \"label\": \"上街区\",\n  \"value\": \"410106\" },\n\n{\n  \"label\": \"惠济区\",\n  \"value\": \"410108\" },\n\n{\n  \"label\": \"中牟县\",\n  \"value\": \"410122\" },\n\n{\n  \"label\": \"郑州经济技术开发区\",\n  \"value\": \"410171\" },\n\n{\n  \"label\": \"郑州高新技术产业开发区\",\n  \"value\": \"410172\" },\n\n{\n  \"label\": \"郑州航空港经济综合实验区\",\n  \"value\": \"410173\" },\n\n{\n  \"label\": \"巩义市\",\n  \"value\": \"410181\" },\n\n{\n  \"label\": \"荥阳市\",\n  \"value\": \"410182\" },\n\n{\n  \"label\": \"新密市\",\n  \"value\": \"410183\" },\n\n{\n  \"label\": \"新郑市\",\n  \"value\": \"410184\" },\n\n{\n  \"label\": \"登封市\",\n  \"value\": \"410185\" }],\n\n\n[{\n  \"label\": \"龙亭区\",\n  \"value\": \"410202\" },\n\n{\n  \"label\": \"顺河回族区\",\n  \"value\": \"410203\" },\n\n{\n  \"label\": \"鼓楼区\",\n  \"value\": \"410204\" },\n\n{\n  \"label\": \"禹王台区\",\n  \"value\": \"410205\" },\n\n{\n  \"label\": \"祥符区\",\n  \"value\": \"410212\" },\n\n{\n  \"label\": \"杞县\",\n  \"value\": \"410221\" },\n\n{\n  \"label\": \"通许县\",\n  \"value\": \"410222\" },\n\n{\n  \"label\": \"尉氏县\",\n  \"value\": \"410223\" },\n\n{\n  \"label\": \"兰考县\",\n  \"value\": \"410225\" }],\n\n\n[{\n  \"label\": \"老城区\",\n  \"value\": \"410302\" },\n\n{\n  \"label\": \"西工区\",\n  \"value\": \"410303\" },\n\n{\n  \"label\": \"瀍河回族区\",\n  \"value\": \"410304\" },\n\n{\n  \"label\": \"涧西区\",\n  \"value\": \"410305\" },\n\n{\n  \"label\": \"吉利区\",\n  \"value\": \"410306\" },\n\n{\n  \"label\": \"洛龙区\",\n  \"value\": \"410311\" },\n\n{\n  \"label\": \"孟津县\",\n  \"value\": \"410322\" },\n\n{\n  \"label\": \"新安县\",\n  \"value\": \"410323\" },\n\n{\n  \"label\": \"栾川县\",\n  \"value\": \"410324\" },\n\n{\n  \"label\": \"嵩县\",\n  \"value\": \"410325\" },\n\n{\n  \"label\": \"汝阳县\",\n  \"value\": \"410326\" },\n\n{\n  \"label\": \"宜阳县\",\n  \"value\": \"410327\" },\n\n{\n  \"label\": \"洛宁县\",\n  \"value\": \"410328\" },\n\n{\n  \"label\": \"伊川县\",\n  \"value\": \"410329\" },\n\n{\n  \"label\": \"洛阳高新技术产业开发区\",\n  \"value\": \"410371\" },\n\n{\n  \"label\": \"偃师市\",\n  \"value\": \"410381\" }],\n\n\n[{\n  \"label\": \"新华区\",\n  \"value\": \"410402\" },\n\n{\n  \"label\": \"卫东区\",\n  \"value\": \"410403\" },\n\n{\n  \"label\": \"石龙区\",\n  \"value\": \"410404\" },\n\n{\n  \"label\": \"湛河区\",\n  \"value\": \"410411\" },\n\n{\n  \"label\": \"宝丰县\",\n  \"value\": \"410421\" },\n\n{\n  \"label\": \"叶县\",\n  \"value\": \"410422\" },\n\n{\n  \"label\": \"鲁山县\",\n  \"value\": \"410423\" },\n\n{\n  \"label\": \"郏县\",\n  \"value\": \"410425\" },\n\n{\n  \"label\": \"平顶山高新技术产业开发区\",\n  \"value\": \"410471\" },\n\n{\n  \"label\": \"平顶山市新城区\",\n  \"value\": \"410472\" },\n\n{\n  \"label\": \"舞钢市\",\n  \"value\": \"410481\" },\n\n{\n  \"label\": \"汝州市\",\n  \"value\": \"410482\" }],\n\n\n[{\n  \"label\": \"文峰区\",\n  \"value\": \"410502\" },\n\n{\n  \"label\": \"北关区\",\n  \"value\": \"410503\" },\n\n{\n  \"label\": \"殷都区\",\n  \"value\": \"410505\" },\n\n{\n  \"label\": \"龙安区\",\n  \"value\": \"410506\" },\n\n{\n  \"label\": \"安阳县\",\n  \"value\": \"410522\" },\n\n{\n  \"label\": \"汤阴县\",\n  \"value\": \"410523\" },\n\n{\n  \"label\": \"滑县\",\n  \"value\": \"410526\" },\n\n{\n  \"label\": \"内黄县\",\n  \"value\": \"410527\" },\n\n{\n  \"label\": \"安阳高新技术产业开发区\",\n  \"value\": \"410571\" },\n\n{\n  \"label\": \"林州市\",\n  \"value\": \"410581\" }],\n\n\n[{\n  \"label\": \"鹤山区\",\n  \"value\": \"410602\" },\n\n{\n  \"label\": \"山城区\",\n  \"value\": \"410603\" },\n\n{\n  \"label\": \"淇滨区\",\n  \"value\": \"410611\" },\n\n{\n  \"label\": \"浚县\",\n  \"value\": \"410621\" },\n\n{\n  \"label\": \"淇县\",\n  \"value\": \"410622\" },\n\n{\n  \"label\": \"鹤壁经济技术开发区\",\n  \"value\": \"410671\" }],\n\n\n[{\n  \"label\": \"红旗区\",\n  \"value\": \"410702\" },\n\n{\n  \"label\": \"卫滨区\",\n  \"value\": \"410703\" },\n\n{\n  \"label\": \"凤泉区\",\n  \"value\": \"410704\" },\n\n{\n  \"label\": \"牧野区\",\n  \"value\": \"410711\" },\n\n{\n  \"label\": \"新乡县\",\n  \"value\": \"410721\" },\n\n{\n  \"label\": \"获嘉县\",\n  \"value\": \"410724\" },\n\n{\n  \"label\": \"原阳县\",\n  \"value\": \"410725\" },\n\n{\n  \"label\": \"延津县\",\n  \"value\": \"410726\" },\n\n{\n  \"label\": \"封丘县\",\n  \"value\": \"410727\" },\n\n{\n  \"label\": \"长垣县\",\n  \"value\": \"410728\" },\n\n{\n  \"label\": \"新乡高新技术产业开发区\",\n  \"value\": \"410771\" },\n\n{\n  \"label\": \"新乡经济技术开发区\",\n  \"value\": \"410772\" },\n\n{\n  \"label\": \"新乡市平原城乡一体化示范区\",\n  \"value\": \"410773\" },\n\n{\n  \"label\": \"卫辉市\",\n  \"value\": \"410781\" },\n\n{\n  \"label\": \"辉县市\",\n  \"value\": \"410782\" }],\n\n\n[{\n  \"label\": \"解放区\",\n  \"value\": \"410802\" },\n\n{\n  \"label\": \"中站区\",\n  \"value\": \"410803\" },\n\n{\n  \"label\": \"马村区\",\n  \"value\": \"410804\" },\n\n{\n  \"label\": \"山阳区\",\n  \"value\": \"410811\" },\n\n{\n  \"label\": \"修武县\",\n  \"value\": \"410821\" },\n\n{\n  \"label\": \"博爱县\",\n  \"value\": \"410822\" },\n\n{\n  \"label\": \"武陟县\",\n  \"value\": \"410823\" },\n\n{\n  \"label\": \"温县\",\n  \"value\": \"410825\" },\n\n{\n  \"label\": \"焦作城乡一体化示范区\",\n  \"value\": \"410871\" },\n\n{\n  \"label\": \"沁阳市\",\n  \"value\": \"410882\" },\n\n{\n  \"label\": \"孟州市\",\n  \"value\": \"410883\" }],\n\n\n[{\n  \"label\": \"华龙区\",\n  \"value\": \"410902\" },\n\n{\n  \"label\": \"清丰县\",\n  \"value\": \"410922\" },\n\n{\n  \"label\": \"南乐县\",\n  \"value\": \"410923\" },\n\n{\n  \"label\": \"范县\",\n  \"value\": \"410926\" },\n\n{\n  \"label\": \"台前县\",\n  \"value\": \"410927\" },\n\n{\n  \"label\": \"濮阳县\",\n  \"value\": \"410928\" },\n\n{\n  \"label\": \"河南濮阳工业园区\",\n  \"value\": \"410971\" },\n\n{\n  \"label\": \"濮阳经济技术开发区\",\n  \"value\": \"410972\" }],\n\n\n[{\n  \"label\": \"魏都区\",\n  \"value\": \"411002\" },\n\n{\n  \"label\": \"建安区\",\n  \"value\": \"411003\" },\n\n{\n  \"label\": \"鄢陵县\",\n  \"value\": \"411024\" },\n\n{\n  \"label\": \"襄城县\",\n  \"value\": \"411025\" },\n\n{\n  \"label\": \"许昌经济技术开发区\",\n  \"value\": \"411071\" },\n\n{\n  \"label\": \"禹州市\",\n  \"value\": \"411081\" },\n\n{\n  \"label\": \"长葛市\",\n  \"value\": \"411082\" }],\n\n\n[{\n  \"label\": \"源汇区\",\n  \"value\": \"411102\" },\n\n{\n  \"label\": \"郾城区\",\n  \"value\": \"411103\" },\n\n{\n  \"label\": \"召陵区\",\n  \"value\": \"411104\" },\n\n{\n  \"label\": \"舞阳县\",\n  \"value\": \"411121\" },\n\n{\n  \"label\": \"临颍县\",\n  \"value\": \"411122\" },\n\n{\n  \"label\": \"漯河经济技术开发区\",\n  \"value\": \"411171\" }],\n\n\n[{\n  \"label\": \"湖滨区\",\n  \"value\": \"411202\" },\n\n{\n  \"label\": \"陕州区\",\n  \"value\": \"411203\" },\n\n{\n  \"label\": \"渑池县\",\n  \"value\": \"411221\" },\n\n{\n  \"label\": \"卢氏县\",\n  \"value\": \"411224\" },\n\n{\n  \"label\": \"河南三门峡经济开发区\",\n  \"value\": \"411271\" },\n\n{\n  \"label\": \"义马市\",\n  \"value\": \"411281\" },\n\n{\n  \"label\": \"灵宝市\",\n  \"value\": \"411282\" }],\n\n\n[{\n  \"label\": \"宛城区\",\n  \"value\": \"411302\" },\n\n{\n  \"label\": \"卧龙区\",\n  \"value\": \"411303\" },\n\n{\n  \"label\": \"南召县\",\n  \"value\": \"411321\" },\n\n{\n  \"label\": \"方城县\",\n  \"value\": \"411322\" },\n\n{\n  \"label\": \"西峡县\",\n  \"value\": \"411323\" },\n\n{\n  \"label\": \"镇平县\",\n  \"value\": \"411324\" },\n\n{\n  \"label\": \"内乡县\",\n  \"value\": \"411325\" },\n\n{\n  \"label\": \"淅川县\",\n  \"value\": \"411326\" },\n\n{\n  \"label\": \"社旗县\",\n  \"value\": \"411327\" },\n\n{\n  \"label\": \"唐河县\",\n  \"value\": \"411328\" },\n\n{\n  \"label\": \"新野县\",\n  \"value\": \"411329\" },\n\n{\n  \"label\": \"桐柏县\",\n  \"value\": \"411330\" },\n\n{\n  \"label\": \"南阳高新技术产业开发区\",\n  \"value\": \"411371\" },\n\n{\n  \"label\": \"南阳市城乡一体化示范区\",\n  \"value\": \"411372\" },\n\n{\n  \"label\": \"邓州市\",\n  \"value\": \"411381\" }],\n\n\n[{\n  \"label\": \"梁园区\",\n  \"value\": \"411402\" },\n\n{\n  \"label\": \"睢阳区\",\n  \"value\": \"411403\" },\n\n{\n  \"label\": \"民权县\",\n  \"value\": \"411421\" },\n\n{\n  \"label\": \"睢县\",\n  \"value\": \"411422\" },\n\n{\n  \"label\": \"宁陵县\",\n  \"value\": \"411423\" },\n\n{\n  \"label\": \"柘城县\",\n  \"value\": \"411424\" },\n\n{\n  \"label\": \"虞城县\",\n  \"value\": \"411425\" },\n\n{\n  \"label\": \"夏邑县\",\n  \"value\": \"411426\" },\n\n{\n  \"label\": \"豫东综合物流产业聚集区\",\n  \"value\": \"411471\" },\n\n{\n  \"label\": \"河南商丘经济开发区\",\n  \"value\": \"411472\" },\n\n{\n  \"label\": \"永城市\",\n  \"value\": \"411481\" }],\n\n\n[{\n  \"label\": \"浉河区\",\n  \"value\": \"411502\" },\n\n{\n  \"label\": \"平桥区\",\n  \"value\": \"411503\" },\n\n{\n  \"label\": \"罗山县\",\n  \"value\": \"411521\" },\n\n{\n  \"label\": \"光山县\",\n  \"value\": \"411522\" },\n\n{\n  \"label\": \"新县\",\n  \"value\": \"411523\" },\n\n{\n  \"label\": \"商城县\",\n  \"value\": \"411524\" },\n\n{\n  \"label\": \"固始县\",\n  \"value\": \"411525\" },\n\n{\n  \"label\": \"潢川县\",\n  \"value\": \"411526\" },\n\n{\n  \"label\": \"淮滨县\",\n  \"value\": \"411527\" },\n\n{\n  \"label\": \"息县\",\n  \"value\": \"411528\" },\n\n{\n  \"label\": \"信阳高新技术产业开发区\",\n  \"value\": \"411571\" }],\n\n\n[{\n  \"label\": \"川汇区\",\n  \"value\": \"411602\" },\n\n{\n  \"label\": \"扶沟县\",\n  \"value\": \"411621\" },\n\n{\n  \"label\": \"西华县\",\n  \"value\": \"411622\" },\n\n{\n  \"label\": \"商水县\",\n  \"value\": \"411623\" },\n\n{\n  \"label\": \"沈丘县\",\n  \"value\": \"411624\" },\n\n{\n  \"label\": \"郸城县\",\n  \"value\": \"411625\" },\n\n{\n  \"label\": \"淮阳县\",\n  \"value\": \"411626\" },\n\n{\n  \"label\": \"太康县\",\n  \"value\": \"411627\" },\n\n{\n  \"label\": \"鹿邑县\",\n  \"value\": \"411628\" },\n\n{\n  \"label\": \"河南周口经济开发区\",\n  \"value\": \"411671\" },\n\n{\n  \"label\": \"项城市\",\n  \"value\": \"411681\" }],\n\n\n[{\n  \"label\": \"驿城区\",\n  \"value\": \"411702\" },\n\n{\n  \"label\": \"西平县\",\n  \"value\": \"411721\" },\n\n{\n  \"label\": \"上蔡县\",\n  \"value\": \"411722\" },\n\n{\n  \"label\": \"平舆县\",\n  \"value\": \"411723\" },\n\n{\n  \"label\": \"正阳县\",\n  \"value\": \"411724\" },\n\n{\n  \"label\": \"确山县\",\n  \"value\": \"411725\" },\n\n{\n  \"label\": \"泌阳县\",\n  \"value\": \"411726\" },\n\n{\n  \"label\": \"汝南县\",\n  \"value\": \"411727\" },\n\n{\n  \"label\": \"遂平县\",\n  \"value\": \"411728\" },\n\n{\n  \"label\": \"新蔡县\",\n  \"value\": \"411729\" },\n\n{\n  \"label\": \"河南驻马店经济开发区\",\n  \"value\": \"411771\" }],\n\n\n[{\n  \"label\": \"济源市\",\n  \"value\": \"419001\" }]],\n\n\n[\n[{\n  \"label\": \"江岸区\",\n  \"value\": \"420102\" },\n\n{\n  \"label\": \"江汉区\",\n  \"value\": \"420103\" },\n\n{\n  \"label\": \"硚口区\",\n  \"value\": \"420104\" },\n\n{\n  \"label\": \"汉阳区\",\n  \"value\": \"420105\" },\n\n{\n  \"label\": \"武昌区\",\n  \"value\": \"420106\" },\n\n{\n  \"label\": \"青山区\",\n  \"value\": \"420107\" },\n\n{\n  \"label\": \"洪山区\",\n  \"value\": \"420111\" },\n\n{\n  \"label\": \"东西湖区\",\n  \"value\": \"420112\" },\n\n{\n  \"label\": \"汉南区\",\n  \"value\": \"420113\" },\n\n{\n  \"label\": \"蔡甸区\",\n  \"value\": \"420114\" },\n\n{\n  \"label\": \"江夏区\",\n  \"value\": \"420115\" },\n\n{\n  \"label\": \"黄陂区\",\n  \"value\": \"420116\" },\n\n{\n  \"label\": \"新洲区\",\n  \"value\": \"420117\" }],\n\n\n[{\n  \"label\": \"黄石港区\",\n  \"value\": \"420202\" },\n\n{\n  \"label\": \"西塞山区\",\n  \"value\": \"420203\" },\n\n{\n  \"label\": \"下陆区\",\n  \"value\": \"420204\" },\n\n{\n  \"label\": \"铁山区\",\n  \"value\": \"420205\" },\n\n{\n  \"label\": \"阳新县\",\n  \"value\": \"420222\" },\n\n{\n  \"label\": \"大冶市\",\n  \"value\": \"420281\" }],\n\n\n[{\n  \"label\": \"茅箭区\",\n  \"value\": \"420302\" },\n\n{\n  \"label\": \"张湾区\",\n  \"value\": \"420303\" },\n\n{\n  \"label\": \"郧阳区\",\n  \"value\": \"420304\" },\n\n{\n  \"label\": \"郧西县\",\n  \"value\": \"420322\" },\n\n{\n  \"label\": \"竹山县\",\n  \"value\": \"420323\" },\n\n{\n  \"label\": \"竹溪县\",\n  \"value\": \"420324\" },\n\n{\n  \"label\": \"房县\",\n  \"value\": \"420325\" },\n\n{\n  \"label\": \"丹江口市\",\n  \"value\": \"420381\" }],\n\n\n[{\n  \"label\": \"西陵区\",\n  \"value\": \"420502\" },\n\n{\n  \"label\": \"伍家岗区\",\n  \"value\": \"420503\" },\n\n{\n  \"label\": \"点军区\",\n  \"value\": \"420504\" },\n\n{\n  \"label\": \"猇亭区\",\n  \"value\": \"420505\" },\n\n{\n  \"label\": \"夷陵区\",\n  \"value\": \"420506\" },\n\n{\n  \"label\": \"远安县\",\n  \"value\": \"420525\" },\n\n{\n  \"label\": \"兴山县\",\n  \"value\": \"420526\" },\n\n{\n  \"label\": \"秭归县\",\n  \"value\": \"420527\" },\n\n{\n  \"label\": \"长阳土家族自治县\",\n  \"value\": \"420528\" },\n\n{\n  \"label\": \"五峰土家族自治县\",\n  \"value\": \"420529\" },\n\n{\n  \"label\": \"宜都市\",\n  \"value\": \"420581\" },\n\n{\n  \"label\": \"当阳市\",\n  \"value\": \"420582\" },\n\n{\n  \"label\": \"枝江市\",\n  \"value\": \"420583\" }],\n\n\n[{\n  \"label\": \"襄城区\",\n  \"value\": \"420602\" },\n\n{\n  \"label\": \"樊城区\",\n  \"value\": \"420606\" },\n\n{\n  \"label\": \"襄州区\",\n  \"value\": \"420607\" },\n\n{\n  \"label\": \"南漳县\",\n  \"value\": \"420624\" },\n\n{\n  \"label\": \"谷城县\",\n  \"value\": \"420625\" },\n\n{\n  \"label\": \"保康县\",\n  \"value\": \"420626\" },\n\n{\n  \"label\": \"老河口市\",\n  \"value\": \"420682\" },\n\n{\n  \"label\": \"枣阳市\",\n  \"value\": \"420683\" },\n\n{\n  \"label\": \"宜城市\",\n  \"value\": \"420684\" }],\n\n\n[{\n  \"label\": \"梁子湖区\",\n  \"value\": \"420702\" },\n\n{\n  \"label\": \"华容区\",\n  \"value\": \"420703\" },\n\n{\n  \"label\": \"鄂城区\",\n  \"value\": \"420704\" }],\n\n\n[{\n  \"label\": \"东宝区\",\n  \"value\": \"420802\" },\n\n{\n  \"label\": \"掇刀区\",\n  \"value\": \"420804\" },\n\n{\n  \"label\": \"京山县\",\n  \"value\": \"420821\" },\n\n{\n  \"label\": \"沙洋县\",\n  \"value\": \"420822\" },\n\n{\n  \"label\": \"钟祥市\",\n  \"value\": \"420881\" }],\n\n\n[{\n  \"label\": \"孝南区\",\n  \"value\": \"420902\" },\n\n{\n  \"label\": \"孝昌县\",\n  \"value\": \"420921\" },\n\n{\n  \"label\": \"大悟县\",\n  \"value\": \"420922\" },\n\n{\n  \"label\": \"云梦县\",\n  \"value\": \"420923\" },\n\n{\n  \"label\": \"应城市\",\n  \"value\": \"420981\" },\n\n{\n  \"label\": \"安陆市\",\n  \"value\": \"420982\" },\n\n{\n  \"label\": \"汉川市\",\n  \"value\": \"420984\" }],\n\n\n[{\n  \"label\": \"沙市区\",\n  \"value\": \"421002\" },\n\n{\n  \"label\": \"荆州区\",\n  \"value\": \"421003\" },\n\n{\n  \"label\": \"公安县\",\n  \"value\": \"421022\" },\n\n{\n  \"label\": \"监利县\",\n  \"value\": \"421023\" },\n\n{\n  \"label\": \"江陵县\",\n  \"value\": \"421024\" },\n\n{\n  \"label\": \"荆州经济技术开发区\",\n  \"value\": \"421071\" },\n\n{\n  \"label\": \"石首市\",\n  \"value\": \"421081\" },\n\n{\n  \"label\": \"洪湖市\",\n  \"value\": \"421083\" },\n\n{\n  \"label\": \"松滋市\",\n  \"value\": \"421087\" }],\n\n\n[{\n  \"label\": \"黄州区\",\n  \"value\": \"421102\" },\n\n{\n  \"label\": \"团风县\",\n  \"value\": \"421121\" },\n\n{\n  \"label\": \"红安县\",\n  \"value\": \"421122\" },\n\n{\n  \"label\": \"罗田县\",\n  \"value\": \"421123\" },\n\n{\n  \"label\": \"英山县\",\n  \"value\": \"421124\" },\n\n{\n  \"label\": \"浠水县\",\n  \"value\": \"421125\" },\n\n{\n  \"label\": \"蕲春县\",\n  \"value\": \"421126\" },\n\n{\n  \"label\": \"黄梅县\",\n  \"value\": \"421127\" },\n\n{\n  \"label\": \"龙感湖管理区\",\n  \"value\": \"421171\" },\n\n{\n  \"label\": \"麻城市\",\n  \"value\": \"421181\" },\n\n{\n  \"label\": \"武穴市\",\n  \"value\": \"421182\" }],\n\n\n[{\n  \"label\": \"咸安区\",\n  \"value\": \"421202\" },\n\n{\n  \"label\": \"嘉鱼县\",\n  \"value\": \"421221\" },\n\n{\n  \"label\": \"通城县\",\n  \"value\": \"421222\" },\n\n{\n  \"label\": \"崇阳县\",\n  \"value\": \"421223\" },\n\n{\n  \"label\": \"通山县\",\n  \"value\": \"421224\" },\n\n{\n  \"label\": \"赤壁市\",\n  \"value\": \"421281\" }],\n\n\n[{\n  \"label\": \"曾都区\",\n  \"value\": \"421303\" },\n\n{\n  \"label\": \"随县\",\n  \"value\": \"421321\" },\n\n{\n  \"label\": \"广水市\",\n  \"value\": \"421381\" }],\n\n\n[{\n  \"label\": \"恩施市\",\n  \"value\": \"422801\" },\n\n{\n  \"label\": \"利川市\",\n  \"value\": \"422802\" },\n\n{\n  \"label\": \"建始县\",\n  \"value\": \"422822\" },\n\n{\n  \"label\": \"巴东县\",\n  \"value\": \"422823\" },\n\n{\n  \"label\": \"宣恩县\",\n  \"value\": \"422825\" },\n\n{\n  \"label\": \"咸丰县\",\n  \"value\": \"422826\" },\n\n{\n  \"label\": \"来凤县\",\n  \"value\": \"422827\" },\n\n{\n  \"label\": \"鹤峰县\",\n  \"value\": \"422828\" }],\n\n\n[{\n  \"label\": \"仙桃市\",\n  \"value\": \"429004\" },\n\n{\n  \"label\": \"潜江市\",\n  \"value\": \"429005\" },\n\n{\n  \"label\": \"天门市\",\n  \"value\": \"429006\" },\n\n{\n  \"label\": \"神农架林区\",\n  \"value\": \"429021\" }]],\n\n\n\n[\n[{\n  \"label\": \"芙蓉区\",\n  \"value\": \"430102\" },\n\n{\n  \"label\": \"天心区\",\n  \"value\": \"430103\" },\n\n{\n  \"label\": \"岳麓区\",\n  \"value\": \"430104\" },\n\n{\n  \"label\": \"开福区\",\n  \"value\": \"430105\" },\n\n{\n  \"label\": \"雨花区\",\n  \"value\": \"430111\" },\n\n{\n  \"label\": \"望城区\",\n  \"value\": \"430112\" },\n\n{\n  \"label\": \"长沙县\",\n  \"value\": \"430121\" },\n\n{\n  \"label\": \"浏阳市\",\n  \"value\": \"430181\" },\n\n{\n  \"label\": \"宁乡市\",\n  \"value\": \"430182\" }],\n\n\n[{\n  \"label\": \"荷塘区\",\n  \"value\": \"430202\" },\n\n{\n  \"label\": \"芦淞区\",\n  \"value\": \"430203\" },\n\n{\n  \"label\": \"石峰区\",\n  \"value\": \"430204\" },\n\n{\n  \"label\": \"天元区\",\n  \"value\": \"430211\" },\n\n{\n  \"label\": \"株洲县\",\n  \"value\": \"430221\" },\n\n{\n  \"label\": \"攸县\",\n  \"value\": \"430223\" },\n\n{\n  \"label\": \"茶陵县\",\n  \"value\": \"430224\" },\n\n{\n  \"label\": \"炎陵县\",\n  \"value\": \"430225\" },\n\n{\n  \"label\": \"云龙示范区\",\n  \"value\": \"430271\" },\n\n{\n  \"label\": \"醴陵市\",\n  \"value\": \"430281\" }],\n\n\n[{\n  \"label\": \"雨湖区\",\n  \"value\": \"430302\" },\n\n{\n  \"label\": \"岳塘区\",\n  \"value\": \"430304\" },\n\n{\n  \"label\": \"湘潭县\",\n  \"value\": \"430321\" },\n\n{\n  \"label\": \"湖南湘潭高新技术产业园区\",\n  \"value\": \"430371\" },\n\n{\n  \"label\": \"湘潭昭山示范区\",\n  \"value\": \"430372\" },\n\n{\n  \"label\": \"湘潭九华示范区\",\n  \"value\": \"430373\" },\n\n{\n  \"label\": \"湘乡市\",\n  \"value\": \"430381\" },\n\n{\n  \"label\": \"韶山市\",\n  \"value\": \"430382\" }],\n\n\n[{\n  \"label\": \"珠晖区\",\n  \"value\": \"430405\" },\n\n{\n  \"label\": \"雁峰区\",\n  \"value\": \"430406\" },\n\n{\n  \"label\": \"石鼓区\",\n  \"value\": \"430407\" },\n\n{\n  \"label\": \"蒸湘区\",\n  \"value\": \"430408\" },\n\n{\n  \"label\": \"南岳区\",\n  \"value\": \"430412\" },\n\n{\n  \"label\": \"衡阳县\",\n  \"value\": \"430421\" },\n\n{\n  \"label\": \"衡南县\",\n  \"value\": \"430422\" },\n\n{\n  \"label\": \"衡山县\",\n  \"value\": \"430423\" },\n\n{\n  \"label\": \"衡东县\",\n  \"value\": \"430424\" },\n\n{\n  \"label\": \"祁东县\",\n  \"value\": \"430426\" },\n\n{\n  \"label\": \"衡阳综合保税区\",\n  \"value\": \"430471\" },\n\n{\n  \"label\": \"湖南衡阳高新技术产业园区\",\n  \"value\": \"430472\" },\n\n{\n  \"label\": \"湖南衡阳松木经济开发区\",\n  \"value\": \"430473\" },\n\n{\n  \"label\": \"耒阳市\",\n  \"value\": \"430481\" },\n\n{\n  \"label\": \"常宁市\",\n  \"value\": \"430482\" }],\n\n\n[{\n  \"label\": \"双清区\",\n  \"value\": \"430502\" },\n\n{\n  \"label\": \"大祥区\",\n  \"value\": \"430503\" },\n\n{\n  \"label\": \"北塔区\",\n  \"value\": \"430511\" },\n\n{\n  \"label\": \"邵东县\",\n  \"value\": \"430521\" },\n\n{\n  \"label\": \"新邵县\",\n  \"value\": \"430522\" },\n\n{\n  \"label\": \"邵阳县\",\n  \"value\": \"430523\" },\n\n{\n  \"label\": \"隆回县\",\n  \"value\": \"430524\" },\n\n{\n  \"label\": \"洞口县\",\n  \"value\": \"430525\" },\n\n{\n  \"label\": \"绥宁县\",\n  \"value\": \"430527\" },\n\n{\n  \"label\": \"新宁县\",\n  \"value\": \"430528\" },\n\n{\n  \"label\": \"城步苗族自治县\",\n  \"value\": \"430529\" },\n\n{\n  \"label\": \"武冈市\",\n  \"value\": \"430581\" }],\n\n\n[{\n  \"label\": \"岳阳楼区\",\n  \"value\": \"430602\" },\n\n{\n  \"label\": \"云溪区\",\n  \"value\": \"430603\" },\n\n{\n  \"label\": \"君山区\",\n  \"value\": \"430611\" },\n\n{\n  \"label\": \"岳阳县\",\n  \"value\": \"430621\" },\n\n{\n  \"label\": \"华容县\",\n  \"value\": \"430623\" },\n\n{\n  \"label\": \"湘阴县\",\n  \"value\": \"430624\" },\n\n{\n  \"label\": \"平江县\",\n  \"value\": \"430626\" },\n\n{\n  \"label\": \"岳阳市屈原管理区\",\n  \"value\": \"430671\" },\n\n{\n  \"label\": \"汨罗市\",\n  \"value\": \"430681\" },\n\n{\n  \"label\": \"临湘市\",\n  \"value\": \"430682\" }],\n\n\n[{\n  \"label\": \"武陵区\",\n  \"value\": \"430702\" },\n\n{\n  \"label\": \"鼎城区\",\n  \"value\": \"430703\" },\n\n{\n  \"label\": \"安乡县\",\n  \"value\": \"430721\" },\n\n{\n  \"label\": \"汉寿县\",\n  \"value\": \"430722\" },\n\n{\n  \"label\": \"澧县\",\n  \"value\": \"430723\" },\n\n{\n  \"label\": \"临澧县\",\n  \"value\": \"430724\" },\n\n{\n  \"label\": \"桃源县\",\n  \"value\": \"430725\" },\n\n{\n  \"label\": \"石门县\",\n  \"value\": \"430726\" },\n\n{\n  \"label\": \"常德市西洞庭管理区\",\n  \"value\": \"430771\" },\n\n{\n  \"label\": \"津市市\",\n  \"value\": \"430781\" }],\n\n\n[{\n  \"label\": \"永定区\",\n  \"value\": \"430802\" },\n\n{\n  \"label\": \"武陵源区\",\n  \"value\": \"430811\" },\n\n{\n  \"label\": \"慈利县\",\n  \"value\": \"430821\" },\n\n{\n  \"label\": \"桑植县\",\n  \"value\": \"430822\" }],\n\n\n[{\n  \"label\": \"资阳区\",\n  \"value\": \"430902\" },\n\n{\n  \"label\": \"赫山区\",\n  \"value\": \"430903\" },\n\n{\n  \"label\": \"南县\",\n  \"value\": \"430921\" },\n\n{\n  \"label\": \"桃江县\",\n  \"value\": \"430922\" },\n\n{\n  \"label\": \"安化县\",\n  \"value\": \"430923\" },\n\n{\n  \"label\": \"益阳市大通湖管理区\",\n  \"value\": \"430971\" },\n\n{\n  \"label\": \"湖南益阳高新技术产业园区\",\n  \"value\": \"430972\" },\n\n{\n  \"label\": \"沅江市\",\n  \"value\": \"430981\" }],\n\n\n[{\n  \"label\": \"北湖区\",\n  \"value\": \"431002\" },\n\n{\n  \"label\": \"苏仙区\",\n  \"value\": \"431003\" },\n\n{\n  \"label\": \"桂阳县\",\n  \"value\": \"431021\" },\n\n{\n  \"label\": \"宜章县\",\n  \"value\": \"431022\" },\n\n{\n  \"label\": \"永兴县\",\n  \"value\": \"431023\" },\n\n{\n  \"label\": \"嘉禾县\",\n  \"value\": \"431024\" },\n\n{\n  \"label\": \"临武县\",\n  \"value\": \"431025\" },\n\n{\n  \"label\": \"汝城县\",\n  \"value\": \"431026\" },\n\n{\n  \"label\": \"桂东县\",\n  \"value\": \"431027\" },\n\n{\n  \"label\": \"安仁县\",\n  \"value\": \"431028\" },\n\n{\n  \"label\": \"资兴市\",\n  \"value\": \"431081\" }],\n\n\n[{\n  \"label\": \"零陵区\",\n  \"value\": \"431102\" },\n\n{\n  \"label\": \"冷水滩区\",\n  \"value\": \"431103\" },\n\n{\n  \"label\": \"祁阳县\",\n  \"value\": \"431121\" },\n\n{\n  \"label\": \"东安县\",\n  \"value\": \"431122\" },\n\n{\n  \"label\": \"双牌县\",\n  \"value\": \"431123\" },\n\n{\n  \"label\": \"道县\",\n  \"value\": \"431124\" },\n\n{\n  \"label\": \"江永县\",\n  \"value\": \"431125\" },\n\n{\n  \"label\": \"宁远县\",\n  \"value\": \"431126\" },\n\n{\n  \"label\": \"蓝山县\",\n  \"value\": \"431127\" },\n\n{\n  \"label\": \"新田县\",\n  \"value\": \"431128\" },\n\n{\n  \"label\": \"江华瑶族自治县\",\n  \"value\": \"431129\" },\n\n{\n  \"label\": \"永州经济技术开发区\",\n  \"value\": \"431171\" },\n\n{\n  \"label\": \"永州市金洞管理区\",\n  \"value\": \"431172\" },\n\n{\n  \"label\": \"永州市回龙圩管理区\",\n  \"value\": \"431173\" }],\n\n\n[{\n  \"label\": \"鹤城区\",\n  \"value\": \"431202\" },\n\n{\n  \"label\": \"中方县\",\n  \"value\": \"431221\" },\n\n{\n  \"label\": \"沅陵县\",\n  \"value\": \"431222\" },\n\n{\n  \"label\": \"辰溪县\",\n  \"value\": \"431223\" },\n\n{\n  \"label\": \"溆浦县\",\n  \"value\": \"431224\" },\n\n{\n  \"label\": \"会同县\",\n  \"value\": \"431225\" },\n\n{\n  \"label\": \"麻阳苗族自治县\",\n  \"value\": \"431226\" },\n\n{\n  \"label\": \"新晃侗族自治县\",\n  \"value\": \"431227\" },\n\n{\n  \"label\": \"芷江侗族自治县\",\n  \"value\": \"431228\" },\n\n{\n  \"label\": \"靖州苗族侗族自治县\",\n  \"value\": \"431229\" },\n\n{\n  \"label\": \"通道侗族自治县\",\n  \"value\": \"431230\" },\n\n{\n  \"label\": \"怀化市洪江管理区\",\n  \"value\": \"431271\" },\n\n{\n  \"label\": \"洪江市\",\n  \"value\": \"431281\" }],\n\n\n[{\n  \"label\": \"娄星区\",\n  \"value\": \"431302\" },\n\n{\n  \"label\": \"双峰县\",\n  \"value\": \"431321\" },\n\n{\n  \"label\": \"新化县\",\n  \"value\": \"431322\" },\n\n{\n  \"label\": \"冷水江市\",\n  \"value\": \"431381\" },\n\n{\n  \"label\": \"涟源市\",\n  \"value\": \"431382\" }],\n\n\n[{\n  \"label\": \"吉首市\",\n  \"value\": \"433101\" },\n\n{\n  \"label\": \"泸溪县\",\n  \"value\": \"433122\" },\n\n{\n  \"label\": \"凤凰县\",\n  \"value\": \"433123\" },\n\n{\n  \"label\": \"花垣县\",\n  \"value\": \"433124\" },\n\n{\n  \"label\": \"保靖县\",\n  \"value\": \"433125\" },\n\n{\n  \"label\": \"古丈县\",\n  \"value\": \"433126\" },\n\n{\n  \"label\": \"永顺县\",\n  \"value\": \"433127\" },\n\n{\n  \"label\": \"龙山县\",\n  \"value\": \"433130\" },\n\n{\n  \"label\": \"湖南吉首经济开发区\",\n  \"value\": \"433172\" },\n\n{\n  \"label\": \"湖南永顺经济开发区\",\n  \"value\": \"433173\" }]],\n\n\n\n[\n[{\n  \"label\": \"荔湾区\",\n  \"value\": \"440103\" },\n\n{\n  \"label\": \"越秀区\",\n  \"value\": \"440104\" },\n\n{\n  \"label\": \"海珠区\",\n  \"value\": \"440105\" },\n\n{\n  \"label\": \"天河区\",\n  \"value\": \"440106\" },\n\n{\n  \"label\": \"白云区\",\n  \"value\": \"440111\" },\n\n{\n  \"label\": \"黄埔区\",\n  \"value\": \"440112\" },\n\n{\n  \"label\": \"番禺区\",\n  \"value\": \"440113\" },\n\n{\n  \"label\": \"花都区\",\n  \"value\": \"440114\" },\n\n{\n  \"label\": \"南沙区\",\n  \"value\": \"440115\" },\n\n{\n  \"label\": \"从化区\",\n  \"value\": \"440117\" },\n\n{\n  \"label\": \"增城区\",\n  \"value\": \"440118\" }],\n\n\n[{\n  \"label\": \"武江区\",\n  \"value\": \"440203\" },\n\n{\n  \"label\": \"浈江区\",\n  \"value\": \"440204\" },\n\n{\n  \"label\": \"曲江区\",\n  \"value\": \"440205\" },\n\n{\n  \"label\": \"始兴县\",\n  \"value\": \"440222\" },\n\n{\n  \"label\": \"仁化县\",\n  \"value\": \"440224\" },\n\n{\n  \"label\": \"翁源县\",\n  \"value\": \"440229\" },\n\n{\n  \"label\": \"乳源瑶族自治县\",\n  \"value\": \"440232\" },\n\n{\n  \"label\": \"新丰县\",\n  \"value\": \"440233\" },\n\n{\n  \"label\": \"乐昌市\",\n  \"value\": \"440281\" },\n\n{\n  \"label\": \"南雄市\",\n  \"value\": \"440282\" }],\n\n\n[{\n  \"label\": \"罗湖区\",\n  \"value\": \"440303\" },\n\n{\n  \"label\": \"福田区\",\n  \"value\": \"440304\" },\n\n{\n  \"label\": \"南山区\",\n  \"value\": \"440305\" },\n\n{\n  \"label\": \"宝安区\",\n  \"value\": \"440306\" },\n\n{\n  \"label\": \"龙岗区\",\n  \"value\": \"440307\" },\n\n{\n  \"label\": \"盐田区\",\n  \"value\": \"440308\" },\n\n{\n  \"label\": \"龙华区\",\n  \"value\": \"440309\" },\n\n{\n  \"label\": \"坪山区\",\n  \"value\": \"440310\" }],\n\n\n[{\n  \"label\": \"香洲区\",\n  \"value\": \"440402\" },\n\n{\n  \"label\": \"斗门区\",\n  \"value\": \"440403\" },\n\n{\n  \"label\": \"金湾区\",\n  \"value\": \"440404\" }],\n\n\n[{\n  \"label\": \"龙湖区\",\n  \"value\": \"440507\" },\n\n{\n  \"label\": \"金平区\",\n  \"value\": \"440511\" },\n\n{\n  \"label\": \"濠江区\",\n  \"value\": \"440512\" },\n\n{\n  \"label\": \"潮阳区\",\n  \"value\": \"440513\" },\n\n{\n  \"label\": \"潮南区\",\n  \"value\": \"440514\" },\n\n{\n  \"label\": \"澄海区\",\n  \"value\": \"440515\" },\n\n{\n  \"label\": \"南澳县\",\n  \"value\": \"440523\" }],\n\n\n[{\n  \"label\": \"禅城区\",\n  \"value\": \"440604\" },\n\n{\n  \"label\": \"南海区\",\n  \"value\": \"440605\" },\n\n{\n  \"label\": \"顺德区\",\n  \"value\": \"440606\" },\n\n{\n  \"label\": \"三水区\",\n  \"value\": \"440607\" },\n\n{\n  \"label\": \"高明区\",\n  \"value\": \"440608\" }],\n\n\n[{\n  \"label\": \"蓬江区\",\n  \"value\": \"440703\" },\n\n{\n  \"label\": \"江海区\",\n  \"value\": \"440704\" },\n\n{\n  \"label\": \"新会区\",\n  \"value\": \"440705\" },\n\n{\n  \"label\": \"台山市\",\n  \"value\": \"440781\" },\n\n{\n  \"label\": \"开平市\",\n  \"value\": \"440783\" },\n\n{\n  \"label\": \"鹤山市\",\n  \"value\": \"440784\" },\n\n{\n  \"label\": \"恩平市\",\n  \"value\": \"440785\" }],\n\n\n[{\n  \"label\": \"赤坎区\",\n  \"value\": \"440802\" },\n\n{\n  \"label\": \"霞山区\",\n  \"value\": \"440803\" },\n\n{\n  \"label\": \"坡头区\",\n  \"value\": \"440804\" },\n\n{\n  \"label\": \"麻章区\",\n  \"value\": \"440811\" },\n\n{\n  \"label\": \"遂溪县\",\n  \"value\": \"440823\" },\n\n{\n  \"label\": \"徐闻县\",\n  \"value\": \"440825\" },\n\n{\n  \"label\": \"廉江市\",\n  \"value\": \"440881\" },\n\n{\n  \"label\": \"雷州市\",\n  \"value\": \"440882\" },\n\n{\n  \"label\": \"吴川市\",\n  \"value\": \"440883\" }],\n\n\n[{\n  \"label\": \"茂南区\",\n  \"value\": \"440902\" },\n\n{\n  \"label\": \"电白区\",\n  \"value\": \"440904\" },\n\n{\n  \"label\": \"高州市\",\n  \"value\": \"440981\" },\n\n{\n  \"label\": \"化州市\",\n  \"value\": \"440982\" },\n\n{\n  \"label\": \"信宜市\",\n  \"value\": \"440983\" }],\n\n\n[{\n  \"label\": \"端州区\",\n  \"value\": \"441202\" },\n\n{\n  \"label\": \"鼎湖区\",\n  \"value\": \"441203\" },\n\n{\n  \"label\": \"高要区\",\n  \"value\": \"441204\" },\n\n{\n  \"label\": \"广宁县\",\n  \"value\": \"441223\" },\n\n{\n  \"label\": \"怀集县\",\n  \"value\": \"441224\" },\n\n{\n  \"label\": \"封开县\",\n  \"value\": \"441225\" },\n\n{\n  \"label\": \"德庆县\",\n  \"value\": \"441226\" },\n\n{\n  \"label\": \"四会市\",\n  \"value\": \"441284\" }],\n\n\n[{\n  \"label\": \"惠城区\",\n  \"value\": \"441302\" },\n\n{\n  \"label\": \"惠阳区\",\n  \"value\": \"441303\" },\n\n{\n  \"label\": \"博罗县\",\n  \"value\": \"441322\" },\n\n{\n  \"label\": \"惠东县\",\n  \"value\": \"441323\" },\n\n{\n  \"label\": \"龙门县\",\n  \"value\": \"441324\" }],\n\n\n[{\n  \"label\": \"梅江区\",\n  \"value\": \"441402\" },\n\n{\n  \"label\": \"梅县区\",\n  \"value\": \"441403\" },\n\n{\n  \"label\": \"大埔县\",\n  \"value\": \"441422\" },\n\n{\n  \"label\": \"丰顺县\",\n  \"value\": \"441423\" },\n\n{\n  \"label\": \"五华县\",\n  \"value\": \"441424\" },\n\n{\n  \"label\": \"平远县\",\n  \"value\": \"441426\" },\n\n{\n  \"label\": \"蕉岭县\",\n  \"value\": \"441427\" },\n\n{\n  \"label\": \"兴宁市\",\n  \"value\": \"441481\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"441502\" },\n\n{\n  \"label\": \"海丰县\",\n  \"value\": \"441521\" },\n\n{\n  \"label\": \"陆河县\",\n  \"value\": \"441523\" },\n\n{\n  \"label\": \"陆丰市\",\n  \"value\": \"441581\" }],\n\n\n[{\n  \"label\": \"源城区\",\n  \"value\": \"441602\" },\n\n{\n  \"label\": \"紫金县\",\n  \"value\": \"441621\" },\n\n{\n  \"label\": \"龙川县\",\n  \"value\": \"441622\" },\n\n{\n  \"label\": \"连平县\",\n  \"value\": \"441623\" },\n\n{\n  \"label\": \"和平县\",\n  \"value\": \"441624\" },\n\n{\n  \"label\": \"东源县\",\n  \"value\": \"441625\" }],\n\n\n[{\n  \"label\": \"江城区\",\n  \"value\": \"441702\" },\n\n{\n  \"label\": \"阳东区\",\n  \"value\": \"441704\" },\n\n{\n  \"label\": \"阳西县\",\n  \"value\": \"441721\" },\n\n{\n  \"label\": \"阳春市\",\n  \"value\": \"441781\" }],\n\n\n[{\n  \"label\": \"清城区\",\n  \"value\": \"441802\" },\n\n{\n  \"label\": \"清新区\",\n  \"value\": \"441803\" },\n\n{\n  \"label\": \"佛冈县\",\n  \"value\": \"441821\" },\n\n{\n  \"label\": \"阳山县\",\n  \"value\": \"441823\" },\n\n{\n  \"label\": \"连山壮族瑶族自治县\",\n  \"value\": \"441825\" },\n\n{\n  \"label\": \"连南瑶族自治县\",\n  \"value\": \"441826\" },\n\n{\n  \"label\": \"英德市\",\n  \"value\": \"441881\" },\n\n{\n  \"label\": \"连州市\",\n  \"value\": \"441882\" }],\n\n\n[{\n  \"label\": \"东莞市\",\n  \"value\": \"441900\" }],\n\n[{\n  \"label\": \"中山市\",\n  \"value\": \"442000\" }],\n\n[{\n  \"label\": \"湘桥区\",\n  \"value\": \"445102\" },\n\n{\n  \"label\": \"潮安区\",\n  \"value\": \"445103\" },\n\n{\n  \"label\": \"饶平县\",\n  \"value\": \"445122\" }],\n\n\n[{\n  \"label\": \"榕城区\",\n  \"value\": \"445202\" },\n\n{\n  \"label\": \"揭东区\",\n  \"value\": \"445203\" },\n\n{\n  \"label\": \"揭西县\",\n  \"value\": \"445222\" },\n\n{\n  \"label\": \"惠来县\",\n  \"value\": \"445224\" },\n\n{\n  \"label\": \"普宁市\",\n  \"value\": \"445281\" }],\n\n\n[{\n  \"label\": \"云城区\",\n  \"value\": \"445302\" },\n\n{\n  \"label\": \"云安区\",\n  \"value\": \"445303\" },\n\n{\n  \"label\": \"新兴县\",\n  \"value\": \"445321\" },\n\n{\n  \"label\": \"郁南县\",\n  \"value\": \"445322\" },\n\n{\n  \"label\": \"罗定市\",\n  \"value\": \"445381\" }]],\n\n\n\n[\n[{\n  \"label\": \"兴宁区\",\n  \"value\": \"450102\" },\n\n{\n  \"label\": \"青秀区\",\n  \"value\": \"450103\" },\n\n{\n  \"label\": \"江南区\",\n  \"value\": \"450105\" },\n\n{\n  \"label\": \"西乡塘区\",\n  \"value\": \"450107\" },\n\n{\n  \"label\": \"良庆区\",\n  \"value\": \"450108\" },\n\n{\n  \"label\": \"邕宁区\",\n  \"value\": \"450109\" },\n\n{\n  \"label\": \"武鸣区\",\n  \"value\": \"450110\" },\n\n{\n  \"label\": \"隆安县\",\n  \"value\": \"450123\" },\n\n{\n  \"label\": \"马山县\",\n  \"value\": \"450124\" },\n\n{\n  \"label\": \"上林县\",\n  \"value\": \"450125\" },\n\n{\n  \"label\": \"宾阳县\",\n  \"value\": \"450126\" },\n\n{\n  \"label\": \"横县\",\n  \"value\": \"450127\" }],\n\n\n[{\n  \"label\": \"城中区\",\n  \"value\": \"450202\" },\n\n{\n  \"label\": \"鱼峰区\",\n  \"value\": \"450203\" },\n\n{\n  \"label\": \"柳南区\",\n  \"value\": \"450204\" },\n\n{\n  \"label\": \"柳北区\",\n  \"value\": \"450205\" },\n\n{\n  \"label\": \"柳江区\",\n  \"value\": \"450206\" },\n\n{\n  \"label\": \"柳城县\",\n  \"value\": \"450222\" },\n\n{\n  \"label\": \"鹿寨县\",\n  \"value\": \"450223\" },\n\n{\n  \"label\": \"融安县\",\n  \"value\": \"450224\" },\n\n{\n  \"label\": \"融水苗族自治县\",\n  \"value\": \"450225\" },\n\n{\n  \"label\": \"三江侗族自治县\",\n  \"value\": \"450226\" }],\n\n\n[{\n  \"label\": \"秀峰区\",\n  \"value\": \"450302\" },\n\n{\n  \"label\": \"叠彩区\",\n  \"value\": \"450303\" },\n\n{\n  \"label\": \"象山区\",\n  \"value\": \"450304\" },\n\n{\n  \"label\": \"七星区\",\n  \"value\": \"450305\" },\n\n{\n  \"label\": \"雁山区\",\n  \"value\": \"450311\" },\n\n{\n  \"label\": \"临桂区\",\n  \"value\": \"450312\" },\n\n{\n  \"label\": \"阳朔县\",\n  \"value\": \"450321\" },\n\n{\n  \"label\": \"灵川县\",\n  \"value\": \"450323\" },\n\n{\n  \"label\": \"全州县\",\n  \"value\": \"450324\" },\n\n{\n  \"label\": \"兴安县\",\n  \"value\": \"450325\" },\n\n{\n  \"label\": \"永福县\",\n  \"value\": \"450326\" },\n\n{\n  \"label\": \"灌阳县\",\n  \"value\": \"450327\" },\n\n{\n  \"label\": \"龙胜各族自治县\",\n  \"value\": \"450328\" },\n\n{\n  \"label\": \"资源县\",\n  \"value\": \"450329\" },\n\n{\n  \"label\": \"平乐县\",\n  \"value\": \"450330\" },\n\n{\n  \"label\": \"荔浦县\",\n  \"value\": \"450331\" },\n\n{\n  \"label\": \"恭城瑶族自治县\",\n  \"value\": \"450332\" }],\n\n\n[{\n  \"label\": \"万秀区\",\n  \"value\": \"450403\" },\n\n{\n  \"label\": \"长洲区\",\n  \"value\": \"450405\" },\n\n{\n  \"label\": \"龙圩区\",\n  \"value\": \"450406\" },\n\n{\n  \"label\": \"苍梧县\",\n  \"value\": \"450421\" },\n\n{\n  \"label\": \"藤县\",\n  \"value\": \"450422\" },\n\n{\n  \"label\": \"蒙山县\",\n  \"value\": \"450423\" },\n\n{\n  \"label\": \"岑溪市\",\n  \"value\": \"450481\" }],\n\n\n[{\n  \"label\": \"海城区\",\n  \"value\": \"450502\" },\n\n{\n  \"label\": \"银海区\",\n  \"value\": \"450503\" },\n\n{\n  \"label\": \"铁山港区\",\n  \"value\": \"450512\" },\n\n{\n  \"label\": \"合浦县\",\n  \"value\": \"450521\" }],\n\n\n[{\n  \"label\": \"港口区\",\n  \"value\": \"450602\" },\n\n{\n  \"label\": \"防城区\",\n  \"value\": \"450603\" },\n\n{\n  \"label\": \"上思县\",\n  \"value\": \"450621\" },\n\n{\n  \"label\": \"东兴市\",\n  \"value\": \"450681\" }],\n\n\n[{\n  \"label\": \"钦南区\",\n  \"value\": \"450702\" },\n\n{\n  \"label\": \"钦北区\",\n  \"value\": \"450703\" },\n\n{\n  \"label\": \"灵山县\",\n  \"value\": \"450721\" },\n\n{\n  \"label\": \"浦北县\",\n  \"value\": \"450722\" }],\n\n\n[{\n  \"label\": \"港北区\",\n  \"value\": \"450802\" },\n\n{\n  \"label\": \"港南区\",\n  \"value\": \"450803\" },\n\n{\n  \"label\": \"覃塘区\",\n  \"value\": \"450804\" },\n\n{\n  \"label\": \"平南县\",\n  \"value\": \"450821\" },\n\n{\n  \"label\": \"桂平市\",\n  \"value\": \"450881\" }],\n\n\n[{\n  \"label\": \"玉州区\",\n  \"value\": \"450902\" },\n\n{\n  \"label\": \"福绵区\",\n  \"value\": \"450903\" },\n\n{\n  \"label\": \"容县\",\n  \"value\": \"450921\" },\n\n{\n  \"label\": \"陆川县\",\n  \"value\": \"450922\" },\n\n{\n  \"label\": \"博白县\",\n  \"value\": \"450923\" },\n\n{\n  \"label\": \"兴业县\",\n  \"value\": \"450924\" },\n\n{\n  \"label\": \"北流市\",\n  \"value\": \"450981\" }],\n\n\n[{\n  \"label\": \"右江区\",\n  \"value\": \"451002\" },\n\n{\n  \"label\": \"田阳县\",\n  \"value\": \"451021\" },\n\n{\n  \"label\": \"田东县\",\n  \"value\": \"451022\" },\n\n{\n  \"label\": \"平果县\",\n  \"value\": \"451023\" },\n\n{\n  \"label\": \"德保县\",\n  \"value\": \"451024\" },\n\n{\n  \"label\": \"那坡县\",\n  \"value\": \"451026\" },\n\n{\n  \"label\": \"凌云县\",\n  \"value\": \"451027\" },\n\n{\n  \"label\": \"乐业县\",\n  \"value\": \"451028\" },\n\n{\n  \"label\": \"田林县\",\n  \"value\": \"451029\" },\n\n{\n  \"label\": \"西林县\",\n  \"value\": \"451030\" },\n\n{\n  \"label\": \"隆林各族自治县\",\n  \"value\": \"451031\" },\n\n{\n  \"label\": \"靖西市\",\n  \"value\": \"451081\" }],\n\n\n[{\n  \"label\": \"八步区\",\n  \"value\": \"451102\" },\n\n{\n  \"label\": \"平桂区\",\n  \"value\": \"451103\" },\n\n{\n  \"label\": \"昭平县\",\n  \"value\": \"451121\" },\n\n{\n  \"label\": \"钟山县\",\n  \"value\": \"451122\" },\n\n{\n  \"label\": \"富川瑶族自治县\",\n  \"value\": \"451123\" }],\n\n\n[{\n  \"label\": \"金城江区\",\n  \"value\": \"451202\" },\n\n{\n  \"label\": \"宜州区\",\n  \"value\": \"451203\" },\n\n{\n  \"label\": \"南丹县\",\n  \"value\": \"451221\" },\n\n{\n  \"label\": \"天峨县\",\n  \"value\": \"451222\" },\n\n{\n  \"label\": \"凤山县\",\n  \"value\": \"451223\" },\n\n{\n  \"label\": \"东兰县\",\n  \"value\": \"451224\" },\n\n{\n  \"label\": \"罗城仫佬族自治县\",\n  \"value\": \"451225\" },\n\n{\n  \"label\": \"环江毛南族自治县\",\n  \"value\": \"451226\" },\n\n{\n  \"label\": \"巴马瑶族自治县\",\n  \"value\": \"451227\" },\n\n{\n  \"label\": \"都安瑶族自治县\",\n  \"value\": \"451228\" },\n\n{\n  \"label\": \"大化瑶族自治县\",\n  \"value\": \"451229\" }],\n\n\n[{\n  \"label\": \"兴宾区\",\n  \"value\": \"451302\" },\n\n{\n  \"label\": \"忻城县\",\n  \"value\": \"451321\" },\n\n{\n  \"label\": \"象州县\",\n  \"value\": \"451322\" },\n\n{\n  \"label\": \"武宣县\",\n  \"value\": \"451323\" },\n\n{\n  \"label\": \"金秀瑶族自治县\",\n  \"value\": \"451324\" },\n\n{\n  \"label\": \"合山市\",\n  \"value\": \"451381\" }],\n\n\n[{\n  \"label\": \"江州区\",\n  \"value\": \"451402\" },\n\n{\n  \"label\": \"扶绥县\",\n  \"value\": \"451421\" },\n\n{\n  \"label\": \"宁明县\",\n  \"value\": \"451422\" },\n\n{\n  \"label\": \"龙州县\",\n  \"value\": \"451423\" },\n\n{\n  \"label\": \"大新县\",\n  \"value\": \"451424\" },\n\n{\n  \"label\": \"天等县\",\n  \"value\": \"451425\" },\n\n{\n  \"label\": \"凭祥市\",\n  \"value\": \"451481\" }]],\n\n\n\n[\n[{\n  \"label\": \"秀英区\",\n  \"value\": \"460105\" },\n\n{\n  \"label\": \"龙华区\",\n  \"value\": \"460106\" },\n\n{\n  \"label\": \"琼山区\",\n  \"value\": \"460107\" },\n\n{\n  \"label\": \"美兰区\",\n  \"value\": \"460108\" }],\n\n\n[{\n  \"label\": \"海棠区\",\n  \"value\": \"460202\" },\n\n{\n  \"label\": \"吉阳区\",\n  \"value\": \"460203\" },\n\n{\n  \"label\": \"天涯区\",\n  \"value\": \"460204\" },\n\n{\n  \"label\": \"崖州区\",\n  \"value\": \"460205\" }],\n\n\n[{\n  \"label\": \"西沙群岛\",\n  \"value\": \"460321\" },\n\n{\n  \"label\": \"南沙群岛\",\n  \"value\": \"460322\" },\n\n{\n  \"label\": \"中沙群岛的岛礁及其海域\",\n  \"value\": \"460323\" }],\n\n\n[{\n  \"label\": \"儋州市\",\n  \"value\": \"460400\" }],\n\n[{\n  \"label\": \"五指山市\",\n  \"value\": \"469001\" },\n\n{\n  \"label\": \"琼海市\",\n  \"value\": \"469002\" },\n\n{\n  \"label\": \"文昌市\",\n  \"value\": \"469005\" },\n\n{\n  \"label\": \"万宁市\",\n  \"value\": \"469006\" },\n\n{\n  \"label\": \"东方市\",\n  \"value\": \"469007\" },\n\n{\n  \"label\": \"定安县\",\n  \"value\": \"469021\" },\n\n{\n  \"label\": \"屯昌县\",\n  \"value\": \"469022\" },\n\n{\n  \"label\": \"澄迈县\",\n  \"value\": \"469023\" },\n\n{\n  \"label\": \"临高县\",\n  \"value\": \"469024\" },\n\n{\n  \"label\": \"白沙黎族自治县\",\n  \"value\": \"469025\" },\n\n{\n  \"label\": \"昌江黎族自治县\",\n  \"value\": \"469026\" },\n\n{\n  \"label\": \"乐东黎族自治县\",\n  \"value\": \"469027\" },\n\n{\n  \"label\": \"陵水黎族自治县\",\n  \"value\": \"469028\" },\n\n{\n  \"label\": \"保亭黎族苗族自治县\",\n  \"value\": \"469029\" },\n\n{\n  \"label\": \"琼中黎族苗族自治县\",\n  \"value\": \"469030\" }]],\n\n\n\n[\n[{\n  \"label\": \"万州区\",\n  \"value\": \"500101\" },\n\n{\n  \"label\": \"涪陵区\",\n  \"value\": \"500102\" },\n\n{\n  \"label\": \"渝中区\",\n  \"value\": \"500103\" },\n\n{\n  \"label\": \"大渡口区\",\n  \"value\": \"500104\" },\n\n{\n  \"label\": \"江北区\",\n  \"value\": \"500105\" },\n\n{\n  \"label\": \"沙坪坝区\",\n  \"value\": \"500106\" },\n\n{\n  \"label\": \"九龙坡区\",\n  \"value\": \"500107\" },\n\n{\n  \"label\": \"南岸区\",\n  \"value\": \"500108\" },\n\n{\n  \"label\": \"北碚区\",\n  \"value\": \"500109\" },\n\n{\n  \"label\": \"綦江区\",\n  \"value\": \"500110\" },\n\n{\n  \"label\": \"大足区\",\n  \"value\": \"500111\" },\n\n{\n  \"label\": \"渝北区\",\n  \"value\": \"500112\" },\n\n{\n  \"label\": \"巴南区\",\n  \"value\": \"500113\" },\n\n{\n  \"label\": \"黔江区\",\n  \"value\": \"500114\" },\n\n{\n  \"label\": \"长寿区\",\n  \"value\": \"500115\" },\n\n{\n  \"label\": \"江津区\",\n  \"value\": \"500116\" },\n\n{\n  \"label\": \"合川区\",\n  \"value\": \"500117\" },\n\n{\n  \"label\": \"永川区\",\n  \"value\": \"500118\" },\n\n{\n  \"label\": \"南川区\",\n  \"value\": \"500119\" },\n\n{\n  \"label\": \"璧山区\",\n  \"value\": \"500120\" },\n\n{\n  \"label\": \"铜梁区\",\n  \"value\": \"500151\" },\n\n{\n  \"label\": \"潼南区\",\n  \"value\": \"500152\" },\n\n{\n  \"label\": \"荣昌区\",\n  \"value\": \"500153\" },\n\n{\n  \"label\": \"开州区\",\n  \"value\": \"500154\" },\n\n{\n  \"label\": \"梁平区\",\n  \"value\": \"500155\" },\n\n{\n  \"label\": \"武隆区\",\n  \"value\": \"500156\" }],\n\n\n[{\n  \"label\": \"梁平县\",\n  \"value\": \"500228\" },\n{\n  \"label\": \"城口县\",\n  \"value\": \"500229\" },\n\n{\n  \"label\": \"丰都县\",\n  \"value\": \"500230\" },\n\n{\n  \"label\": \"垫江县\",\n  \"value\": \"500231\" },\n\n{\n  \"label\": \"忠县\",\n  \"value\": \"500233\" },\n\n{\n  \"label\": \"云阳县\",\n  \"value\": \"500235\" },\n\n{\n  \"label\": \"奉节县\",\n  \"value\": \"500236\" },\n\n{\n  \"label\": \"巫山县\",\n  \"value\": \"500237\" },\n\n{\n  \"label\": \"巫溪县\",\n  \"value\": \"500238\" },\n\n{\n  \"label\": \"石柱土家族自治县\",\n  \"value\": \"500240\" },\n\n{\n  \"label\": \"秀山土家族苗族自治县\",\n  \"value\": \"500241\" },\n\n{\n  \"label\": \"酉阳土家族苗族自治县\",\n  \"value\": \"500242\" },\n\n{\n  \"label\": \"彭水苗族土家族自治县\",\n  \"value\": \"500243\" }]],\n\n\n\n[\n[{\n  \"label\": \"锦江区\",\n  \"value\": \"510104\" },\n\n{\n  \"label\": \"青羊区\",\n  \"value\": \"510105\" },\n\n{\n  \"label\": \"金牛区\",\n  \"value\": \"510106\" },\n\n{\n  \"label\": \"武侯区\",\n  \"value\": \"510107\" },\n\n{\n  \"label\": \"成华区\",\n  \"value\": \"510108\" },\n\n{\n  \"label\": \"龙泉驿区\",\n  \"value\": \"510112\" },\n\n{\n  \"label\": \"青白江区\",\n  \"value\": \"510113\" },\n\n{\n  \"label\": \"新都区\",\n  \"value\": \"510114\" },\n\n{\n  \"label\": \"温江区\",\n  \"value\": \"510115\" },\n\n{\n  \"label\": \"双流区\",\n  \"value\": \"510116\" },\n\n{\n  \"label\": \"郫都区\",\n  \"value\": \"510117\" },\n\n{\n  \"label\": \"金堂县\",\n  \"value\": \"510121\" },\n\n{\n  \"label\": \"大邑县\",\n  \"value\": \"510129\" },\n\n{\n  \"label\": \"蒲江县\",\n  \"value\": \"510131\" },\n\n{\n  \"label\": \"新津县\",\n  \"value\": \"510132\" },\n\n{\n  \"label\": \"都江堰市\",\n  \"value\": \"510181\" },\n\n{\n  \"label\": \"彭州市\",\n  \"value\": \"510182\" },\n\n{\n  \"label\": \"邛崃市\",\n  \"value\": \"510183\" },\n\n{\n  \"label\": \"崇州市\",\n  \"value\": \"510184\" },\n\n{\n  \"label\": \"简阳市\",\n  \"value\": \"510185\" }],\n\n\n[{\n  \"label\": \"自流井区\",\n  \"value\": \"510302\" },\n\n{\n  \"label\": \"贡井区\",\n  \"value\": \"510303\" },\n\n{\n  \"label\": \"大安区\",\n  \"value\": \"510304\" },\n\n{\n  \"label\": \"沿滩区\",\n  \"value\": \"510311\" },\n\n{\n  \"label\": \"荣县\",\n  \"value\": \"510321\" },\n\n{\n  \"label\": \"富顺县\",\n  \"value\": \"510322\" }],\n\n\n[{\n  \"label\": \"东区\",\n  \"value\": \"510402\" },\n\n{\n  \"label\": \"西区\",\n  \"value\": \"510403\" },\n\n{\n  \"label\": \"仁和区\",\n  \"value\": \"510411\" },\n\n{\n  \"label\": \"米易县\",\n  \"value\": \"510421\" },\n\n{\n  \"label\": \"盐边县\",\n  \"value\": \"510422\" }],\n\n\n[{\n  \"label\": \"江阳区\",\n  \"value\": \"510502\" },\n\n{\n  \"label\": \"纳溪区\",\n  \"value\": \"510503\" },\n\n{\n  \"label\": \"龙马潭区\",\n  \"value\": \"510504\" },\n\n{\n  \"label\": \"泸县\",\n  \"value\": \"510521\" },\n\n{\n  \"label\": \"合江县\",\n  \"value\": \"510522\" },\n\n{\n  \"label\": \"叙永县\",\n  \"value\": \"510524\" },\n\n{\n  \"label\": \"古蔺县\",\n  \"value\": \"510525\" }],\n\n\n[{\n  \"label\": \"旌阳区\",\n  \"value\": \"510603\" },\n\n{\n  \"label\": \"罗江区\",\n  \"value\": \"510604\" },\n\n{\n  \"label\": \"中江县\",\n  \"value\": \"510623\" },\n\n{\n  \"label\": \"广汉市\",\n  \"value\": \"510681\" },\n\n{\n  \"label\": \"什邡市\",\n  \"value\": \"510682\" },\n\n{\n  \"label\": \"绵竹市\",\n  \"value\": \"510683\" }],\n\n\n[{\n  \"label\": \"涪城区\",\n  \"value\": \"510703\" },\n\n{\n  \"label\": \"游仙区\",\n  \"value\": \"510704\" },\n\n{\n  \"label\": \"安州区\",\n  \"value\": \"510705\" },\n\n{\n  \"label\": \"三台县\",\n  \"value\": \"510722\" },\n\n{\n  \"label\": \"盐亭县\",\n  \"value\": \"510723\" },\n\n{\n  \"label\": \"梓潼县\",\n  \"value\": \"510725\" },\n\n{\n  \"label\": \"北川羌族自治县\",\n  \"value\": \"510726\" },\n\n{\n  \"label\": \"平武县\",\n  \"value\": \"510727\" },\n\n{\n  \"label\": \"江油市\",\n  \"value\": \"510781\" }],\n\n\n[{\n  \"label\": \"利州区\",\n  \"value\": \"510802\" },\n\n{\n  \"label\": \"昭化区\",\n  \"value\": \"510811\" },\n\n{\n  \"label\": \"朝天区\",\n  \"value\": \"510812\" },\n\n{\n  \"label\": \"旺苍县\",\n  \"value\": \"510821\" },\n\n{\n  \"label\": \"青川县\",\n  \"value\": \"510822\" },\n\n{\n  \"label\": \"剑阁县\",\n  \"value\": \"510823\" },\n\n{\n  \"label\": \"苍溪县\",\n  \"value\": \"510824\" }],\n\n\n[{\n  \"label\": \"船山区\",\n  \"value\": \"510903\" },\n\n{\n  \"label\": \"安居区\",\n  \"value\": \"510904\" },\n\n{\n  \"label\": \"蓬溪县\",\n  \"value\": \"510921\" },\n\n{\n  \"label\": \"射洪县\",\n  \"value\": \"510922\" },\n\n{\n  \"label\": \"大英县\",\n  \"value\": \"510923\" }],\n\n\n[{\n  \"label\": \"市中区\",\n  \"value\": \"511002\" },\n\n{\n  \"label\": \"东兴区\",\n  \"value\": \"511011\" },\n\n{\n  \"label\": \"威远县\",\n  \"value\": \"511024\" },\n\n{\n  \"label\": \"资中县\",\n  \"value\": \"511025\" },\n\n{\n  \"label\": \"内江经济开发区\",\n  \"value\": \"511071\" },\n\n{\n  \"label\": \"隆昌市\",\n  \"value\": \"511083\" }],\n\n\n[{\n  \"label\": \"市中区\",\n  \"value\": \"511102\" },\n\n{\n  \"label\": \"沙湾区\",\n  \"value\": \"511111\" },\n\n{\n  \"label\": \"五通桥区\",\n  \"value\": \"511112\" },\n\n{\n  \"label\": \"金口河区\",\n  \"value\": \"511113\" },\n\n{\n  \"label\": \"犍为县\",\n  \"value\": \"511123\" },\n\n{\n  \"label\": \"井研县\",\n  \"value\": \"511124\" },\n\n{\n  \"label\": \"夹江县\",\n  \"value\": \"511126\" },\n\n{\n  \"label\": \"沐川县\",\n  \"value\": \"511129\" },\n\n{\n  \"label\": \"峨边彝族自治县\",\n  \"value\": \"511132\" },\n\n{\n  \"label\": \"马边彝族自治县\",\n  \"value\": \"511133\" },\n\n{\n  \"label\": \"峨眉山市\",\n  \"value\": \"511181\" }],\n\n\n[{\n  \"label\": \"顺庆区\",\n  \"value\": \"511302\" },\n\n{\n  \"label\": \"高坪区\",\n  \"value\": \"511303\" },\n\n{\n  \"label\": \"嘉陵区\",\n  \"value\": \"511304\" },\n\n{\n  \"label\": \"南部县\",\n  \"value\": \"511321\" },\n\n{\n  \"label\": \"营山县\",\n  \"value\": \"511322\" },\n\n{\n  \"label\": \"蓬安县\",\n  \"value\": \"511323\" },\n\n{\n  \"label\": \"仪陇县\",\n  \"value\": \"511324\" },\n\n{\n  \"label\": \"西充县\",\n  \"value\": \"511325\" },\n\n{\n  \"label\": \"阆中市\",\n  \"value\": \"511381\" }],\n\n\n[{\n  \"label\": \"东坡区\",\n  \"value\": \"511402\" },\n\n{\n  \"label\": \"彭山区\",\n  \"value\": \"511403\" },\n\n{\n  \"label\": \"仁寿县\",\n  \"value\": \"511421\" },\n\n{\n  \"label\": \"洪雅县\",\n  \"value\": \"511423\" },\n\n{\n  \"label\": \"丹棱县\",\n  \"value\": \"511424\" },\n\n{\n  \"label\": \"青神县\",\n  \"value\": \"511425\" }],\n\n\n[{\n  \"label\": \"翠屏区\",\n  \"value\": \"511502\" },\n\n{\n  \"label\": \"南溪区\",\n  \"value\": \"511503\" },\n\n{\n  \"label\": \"宜宾县\",\n  \"value\": \"511521\" },\n\n{\n  \"label\": \"江安县\",\n  \"value\": \"511523\" },\n\n{\n  \"label\": \"长宁县\",\n  \"value\": \"511524\" },\n\n{\n  \"label\": \"高县\",\n  \"value\": \"511525\" },\n\n{\n  \"label\": \"珙县\",\n  \"value\": \"511526\" },\n\n{\n  \"label\": \"筠连县\",\n  \"value\": \"511527\" },\n\n{\n  \"label\": \"兴文县\",\n  \"value\": \"511528\" },\n\n{\n  \"label\": \"屏山县\",\n  \"value\": \"511529\" }],\n\n\n[{\n  \"label\": \"广安区\",\n  \"value\": \"511602\" },\n\n{\n  \"label\": \"前锋区\",\n  \"value\": \"511603\" },\n\n{\n  \"label\": \"岳池县\",\n  \"value\": \"511621\" },\n\n{\n  \"label\": \"武胜县\",\n  \"value\": \"511622\" },\n\n{\n  \"label\": \"邻水县\",\n  \"value\": \"511623\" },\n\n{\n  \"label\": \"华蓥市\",\n  \"value\": \"511681\" }],\n\n\n[{\n  \"label\": \"通川区\",\n  \"value\": \"511702\" },\n\n{\n  \"label\": \"达川区\",\n  \"value\": \"511703\" },\n\n{\n  \"label\": \"宣汉县\",\n  \"value\": \"511722\" },\n\n{\n  \"label\": \"开江县\",\n  \"value\": \"511723\" },\n\n{\n  \"label\": \"大竹县\",\n  \"value\": \"511724\" },\n\n{\n  \"label\": \"渠县\",\n  \"value\": \"511725\" },\n\n{\n  \"label\": \"达州经济开发区\",\n  \"value\": \"511771\" },\n\n{\n  \"label\": \"万源市\",\n  \"value\": \"511781\" }],\n\n\n[{\n  \"label\": \"雨城区\",\n  \"value\": \"511802\" },\n\n{\n  \"label\": \"名山区\",\n  \"value\": \"511803\" },\n\n{\n  \"label\": \"荥经县\",\n  \"value\": \"511822\" },\n\n{\n  \"label\": \"汉源县\",\n  \"value\": \"511823\" },\n\n{\n  \"label\": \"石棉县\",\n  \"value\": \"511824\" },\n\n{\n  \"label\": \"天全县\",\n  \"value\": \"511825\" },\n\n{\n  \"label\": \"芦山县\",\n  \"value\": \"511826\" },\n\n{\n  \"label\": \"宝兴县\",\n  \"value\": \"511827\" }],\n\n\n[{\n  \"label\": \"巴州区\",\n  \"value\": \"511902\" },\n\n{\n  \"label\": \"恩阳区\",\n  \"value\": \"511903\" },\n\n{\n  \"label\": \"通江县\",\n  \"value\": \"511921\" },\n\n{\n  \"label\": \"南江县\",\n  \"value\": \"511922\" },\n\n{\n  \"label\": \"平昌县\",\n  \"value\": \"511923\" },\n\n{\n  \"label\": \"巴中经济开发区\",\n  \"value\": \"511971\" }],\n\n\n[{\n  \"label\": \"雁江区\",\n  \"value\": \"512002\" },\n\n{\n  \"label\": \"安岳县\",\n  \"value\": \"512021\" },\n\n{\n  \"label\": \"乐至县\",\n  \"value\": \"512022\" }],\n\n\n[{\n  \"label\": \"马尔康市\",\n  \"value\": \"513201\" },\n\n{\n  \"label\": \"汶川县\",\n  \"value\": \"513221\" },\n\n{\n  \"label\": \"理县\",\n  \"value\": \"513222\" },\n\n{\n  \"label\": \"茂县\",\n  \"value\": \"513223\" },\n\n{\n  \"label\": \"松潘县\",\n  \"value\": \"513224\" },\n\n{\n  \"label\": \"九寨沟县\",\n  \"value\": \"513225\" },\n\n{\n  \"label\": \"金川县\",\n  \"value\": \"513226\" },\n\n{\n  \"label\": \"小金县\",\n  \"value\": \"513227\" },\n\n{\n  \"label\": \"黑水县\",\n  \"value\": \"513228\" },\n\n{\n  \"label\": \"壤塘县\",\n  \"value\": \"513230\" },\n\n{\n  \"label\": \"阿坝县\",\n  \"value\": \"513231\" },\n\n{\n  \"label\": \"若尔盖县\",\n  \"value\": \"513232\" },\n\n{\n  \"label\": \"红原县\",\n  \"value\": \"513233\" }],\n\n\n[{\n  \"label\": \"康定市\",\n  \"value\": \"513301\" },\n\n{\n  \"label\": \"泸定县\",\n  \"value\": \"513322\" },\n\n{\n  \"label\": \"丹巴县\",\n  \"value\": \"513323\" },\n\n{\n  \"label\": \"九龙县\",\n  \"value\": \"513324\" },\n\n{\n  \"label\": \"雅江县\",\n  \"value\": \"513325\" },\n\n{\n  \"label\": \"道孚县\",\n  \"value\": \"513326\" },\n\n{\n  \"label\": \"炉霍县\",\n  \"value\": \"513327\" },\n\n{\n  \"label\": \"甘孜县\",\n  \"value\": \"513328\" },\n\n{\n  \"label\": \"新龙县\",\n  \"value\": \"513329\" },\n\n{\n  \"label\": \"德格县\",\n  \"value\": \"513330\" },\n\n{\n  \"label\": \"白玉县\",\n  \"value\": \"513331\" },\n\n{\n  \"label\": \"石渠县\",\n  \"value\": \"513332\" },\n\n{\n  \"label\": \"色达县\",\n  \"value\": \"513333\" },\n\n{\n  \"label\": \"理塘县\",\n  \"value\": \"513334\" },\n\n{\n  \"label\": \"巴塘县\",\n  \"value\": \"513335\" },\n\n{\n  \"label\": \"乡城县\",\n  \"value\": \"513336\" },\n\n{\n  \"label\": \"稻城县\",\n  \"value\": \"513337\" },\n\n{\n  \"label\": \"得荣县\",\n  \"value\": \"513338\" }],\n\n\n[{\n  \"label\": \"西昌市\",\n  \"value\": \"513401\" },\n\n{\n  \"label\": \"木里藏族自治县\",\n  \"value\": \"513422\" },\n\n{\n  \"label\": \"盐源县\",\n  \"value\": \"513423\" },\n\n{\n  \"label\": \"德昌县\",\n  \"value\": \"513424\" },\n\n{\n  \"label\": \"会理县\",\n  \"value\": \"513425\" },\n\n{\n  \"label\": \"会东县\",\n  \"value\": \"513426\" },\n\n{\n  \"label\": \"宁南县\",\n  \"value\": \"513427\" },\n\n{\n  \"label\": \"普格县\",\n  \"value\": \"513428\" },\n\n{\n  \"label\": \"布拖县\",\n  \"value\": \"513429\" },\n\n{\n  \"label\": \"金阳县\",\n  \"value\": \"513430\" },\n\n{\n  \"label\": \"昭觉县\",\n  \"value\": \"513431\" },\n\n{\n  \"label\": \"喜德县\",\n  \"value\": \"513432\" },\n\n{\n  \"label\": \"冕宁县\",\n  \"value\": \"513433\" },\n\n{\n  \"label\": \"越西县\",\n  \"value\": \"513434\" },\n\n{\n  \"label\": \"甘洛县\",\n  \"value\": \"513435\" },\n\n{\n  \"label\": \"美姑县\",\n  \"value\": \"513436\" },\n\n{\n  \"label\": \"雷波县\",\n  \"value\": \"513437\" }]],\n\n\n\n[\n[{\n  \"label\": \"南明区\",\n  \"value\": \"520102\" },\n\n{\n  \"label\": \"云岩区\",\n  \"value\": \"520103\" },\n\n{\n  \"label\": \"花溪区\",\n  \"value\": \"520111\" },\n\n{\n  \"label\": \"乌当区\",\n  \"value\": \"520112\" },\n\n{\n  \"label\": \"白云区\",\n  \"value\": \"520113\" },\n\n{\n  \"label\": \"观山湖区\",\n  \"value\": \"520115\" },\n\n{\n  \"label\": \"开阳县\",\n  \"value\": \"520121\" },\n\n{\n  \"label\": \"息烽县\",\n  \"value\": \"520122\" },\n\n{\n  \"label\": \"修文县\",\n  \"value\": \"520123\" },\n\n{\n  \"label\": \"清镇市\",\n  \"value\": \"520181\" }],\n\n\n[{\n  \"label\": \"钟山区\",\n  \"value\": \"520201\" },\n\n{\n  \"label\": \"六枝特区\",\n  \"value\": \"520203\" },\n\n{\n  \"label\": \"水城县\",\n  \"value\": \"520221\" },\n\n{\n  \"label\": \"盘州市\",\n  \"value\": \"520281\" }],\n\n\n[{\n  \"label\": \"红花岗区\",\n  \"value\": \"520302\" },\n\n{\n  \"label\": \"汇川区\",\n  \"value\": \"520303\" },\n\n{\n  \"label\": \"播州区\",\n  \"value\": \"520304\" },\n\n{\n  \"label\": \"桐梓县\",\n  \"value\": \"520322\" },\n\n{\n  \"label\": \"绥阳县\",\n  \"value\": \"520323\" },\n\n{\n  \"label\": \"正安县\",\n  \"value\": \"520324\" },\n\n{\n  \"label\": \"道真仡佬族苗族自治县\",\n  \"value\": \"520325\" },\n\n{\n  \"label\": \"务川仡佬族苗族自治县\",\n  \"value\": \"520326\" },\n\n{\n  \"label\": \"凤冈县\",\n  \"value\": \"520327\" },\n\n{\n  \"label\": \"湄潭县\",\n  \"value\": \"520328\" },\n\n{\n  \"label\": \"余庆县\",\n  \"value\": \"520329\" },\n\n{\n  \"label\": \"习水县\",\n  \"value\": \"520330\" },\n\n{\n  \"label\": \"赤水市\",\n  \"value\": \"520381\" },\n\n{\n  \"label\": \"仁怀市\",\n  \"value\": \"520382\" }],\n\n\n[{\n  \"label\": \"西秀区\",\n  \"value\": \"520402\" },\n\n{\n  \"label\": \"平坝区\",\n  \"value\": \"520403\" },\n\n{\n  \"label\": \"普定县\",\n  \"value\": \"520422\" },\n\n{\n  \"label\": \"镇宁布依族苗族自治县\",\n  \"value\": \"520423\" },\n\n{\n  \"label\": \"关岭布依族苗族自治县\",\n  \"value\": \"520424\" },\n\n{\n  \"label\": \"紫云苗族布依族自治县\",\n  \"value\": \"520425\" }],\n\n\n[{\n  \"label\": \"七星关区\",\n  \"value\": \"520502\" },\n\n{\n  \"label\": \"大方县\",\n  \"value\": \"520521\" },\n\n{\n  \"label\": \"黔西县\",\n  \"value\": \"520522\" },\n\n{\n  \"label\": \"金沙县\",\n  \"value\": \"520523\" },\n\n{\n  \"label\": \"织金县\",\n  \"value\": \"520524\" },\n\n{\n  \"label\": \"纳雍县\",\n  \"value\": \"520525\" },\n\n{\n  \"label\": \"威宁彝族回族苗族自治县\",\n  \"value\": \"520526\" },\n\n{\n  \"label\": \"赫章县\",\n  \"value\": \"520527\" }],\n\n\n[{\n  \"label\": \"碧江区\",\n  \"value\": \"520602\" },\n\n{\n  \"label\": \"万山区\",\n  \"value\": \"520603\" },\n\n{\n  \"label\": \"江口县\",\n  \"value\": \"520621\" },\n\n{\n  \"label\": \"玉屏侗族自治县\",\n  \"value\": \"520622\" },\n\n{\n  \"label\": \"石阡县\",\n  \"value\": \"520623\" },\n\n{\n  \"label\": \"思南县\",\n  \"value\": \"520624\" },\n\n{\n  \"label\": \"印江土家族苗族自治县\",\n  \"value\": \"520625\" },\n\n{\n  \"label\": \"德江县\",\n  \"value\": \"520626\" },\n\n{\n  \"label\": \"沿河土家族自治县\",\n  \"value\": \"520627\" },\n\n{\n  \"label\": \"松桃苗族自治县\",\n  \"value\": \"520628\" }],\n\n\n[{\n  \"label\": \"兴义市\",\n  \"value\": \"522301\" },\n\n{\n  \"label\": \"兴仁县\",\n  \"value\": \"522322\" },\n\n{\n  \"label\": \"普安县\",\n  \"value\": \"522323\" },\n\n{\n  \"label\": \"晴隆县\",\n  \"value\": \"522324\" },\n\n{\n  \"label\": \"贞丰县\",\n  \"value\": \"522325\" },\n\n{\n  \"label\": \"望谟县\",\n  \"value\": \"522326\" },\n\n{\n  \"label\": \"册亨县\",\n  \"value\": \"522327\" },\n\n{\n  \"label\": \"安龙县\",\n  \"value\": \"522328\" }],\n\n\n[{\n  \"label\": \"凯里市\",\n  \"value\": \"522601\" },\n\n{\n  \"label\": \"黄平县\",\n  \"value\": \"522622\" },\n\n{\n  \"label\": \"施秉县\",\n  \"value\": \"522623\" },\n\n{\n  \"label\": \"三穗县\",\n  \"value\": \"522624\" },\n\n{\n  \"label\": \"镇远县\",\n  \"value\": \"522625\" },\n\n{\n  \"label\": \"岑巩县\",\n  \"value\": \"522626\" },\n\n{\n  \"label\": \"天柱县\",\n  \"value\": \"522627\" },\n\n{\n  \"label\": \"锦屏县\",\n  \"value\": \"522628\" },\n\n{\n  \"label\": \"剑河县\",\n  \"value\": \"522629\" },\n\n{\n  \"label\": \"台江县\",\n  \"value\": \"522630\" },\n\n{\n  \"label\": \"黎平县\",\n  \"value\": \"522631\" },\n\n{\n  \"label\": \"榕江县\",\n  \"value\": \"522632\" },\n\n{\n  \"label\": \"从江县\",\n  \"value\": \"522633\" },\n\n{\n  \"label\": \"雷山县\",\n  \"value\": \"522634\" },\n\n{\n  \"label\": \"麻江县\",\n  \"value\": \"522635\" },\n\n{\n  \"label\": \"丹寨县\",\n  \"value\": \"522636\" }],\n\n\n[{\n  \"label\": \"都匀市\",\n  \"value\": \"522701\" },\n\n{\n  \"label\": \"福泉市\",\n  \"value\": \"522702\" },\n\n{\n  \"label\": \"荔波县\",\n  \"value\": \"522722\" },\n\n{\n  \"label\": \"贵定县\",\n  \"value\": \"522723\" },\n\n{\n  \"label\": \"瓮安县\",\n  \"value\": \"522725\" },\n\n{\n  \"label\": \"独山县\",\n  \"value\": \"522726\" },\n\n{\n  \"label\": \"平塘县\",\n  \"value\": \"522727\" },\n\n{\n  \"label\": \"罗甸县\",\n  \"value\": \"522728\" },\n\n{\n  \"label\": \"长顺县\",\n  \"value\": \"522729\" },\n\n{\n  \"label\": \"龙里县\",\n  \"value\": \"522730\" },\n\n{\n  \"label\": \"惠水县\",\n  \"value\": \"522731\" },\n\n{\n  \"label\": \"三都水族自治县\",\n  \"value\": \"522732\" }]],\n\n\n\n[\n[{\n  \"label\": \"五华区\",\n  \"value\": \"530102\" },\n\n{\n  \"label\": \"盘龙区\",\n  \"value\": \"530103\" },\n\n{\n  \"label\": \"官渡区\",\n  \"value\": \"530111\" },\n\n{\n  \"label\": \"西山区\",\n  \"value\": \"530112\" },\n\n{\n  \"label\": \"东川区\",\n  \"value\": \"530113\" },\n\n{\n  \"label\": \"呈贡区\",\n  \"value\": \"530114\" },\n\n{\n  \"label\": \"晋宁区\",\n  \"value\": \"530115\" },\n\n{\n  \"label\": \"富民县\",\n  \"value\": \"530124\" },\n\n{\n  \"label\": \"宜良县\",\n  \"value\": \"530125\" },\n\n{\n  \"label\": \"石林彝族自治县\",\n  \"value\": \"530126\" },\n\n{\n  \"label\": \"嵩明县\",\n  \"value\": \"530127\" },\n\n{\n  \"label\": \"禄劝彝族苗族自治县\",\n  \"value\": \"530128\" },\n\n{\n  \"label\": \"寻甸回族彝族自治县\",\n  \"value\": \"530129\" },\n\n{\n  \"label\": \"安宁市\",\n  \"value\": \"530181\" }],\n\n\n[{\n  \"label\": \"麒麟区\",\n  \"value\": \"530302\" },\n\n{\n  \"label\": \"沾益区\",\n  \"value\": \"530303\" },\n\n{\n  \"label\": \"马龙县\",\n  \"value\": \"530321\" },\n\n{\n  \"label\": \"陆良县\",\n  \"value\": \"530322\" },\n\n{\n  \"label\": \"师宗县\",\n  \"value\": \"530323\" },\n\n{\n  \"label\": \"罗平县\",\n  \"value\": \"530324\" },\n\n{\n  \"label\": \"富源县\",\n  \"value\": \"530325\" },\n\n{\n  \"label\": \"会泽县\",\n  \"value\": \"530326\" },\n\n{\n  \"label\": \"宣威市\",\n  \"value\": \"530381\" }],\n\n\n[{\n  \"label\": \"红塔区\",\n  \"value\": \"530402\" },\n\n{\n  \"label\": \"江川区\",\n  \"value\": \"530403\" },\n\n{\n  \"label\": \"澄江县\",\n  \"value\": \"530422\" },\n\n{\n  \"label\": \"通海县\",\n  \"value\": \"530423\" },\n\n{\n  \"label\": \"华宁县\",\n  \"value\": \"530424\" },\n\n{\n  \"label\": \"易门县\",\n  \"value\": \"530425\" },\n\n{\n  \"label\": \"峨山彝族自治县\",\n  \"value\": \"530426\" },\n\n{\n  \"label\": \"新平彝族傣族自治县\",\n  \"value\": \"530427\" },\n\n{\n  \"label\": \"元江哈尼族彝族傣族自治县\",\n  \"value\": \"530428\" }],\n\n\n[{\n  \"label\": \"隆阳区\",\n  \"value\": \"530502\" },\n\n{\n  \"label\": \"施甸县\",\n  \"value\": \"530521\" },\n\n{\n  \"label\": \"龙陵县\",\n  \"value\": \"530523\" },\n\n{\n  \"label\": \"昌宁县\",\n  \"value\": \"530524\" },\n\n{\n  \"label\": \"腾冲市\",\n  \"value\": \"530581\" }],\n\n\n[{\n  \"label\": \"昭阳区\",\n  \"value\": \"530602\" },\n\n{\n  \"label\": \"鲁甸县\",\n  \"value\": \"530621\" },\n\n{\n  \"label\": \"巧家县\",\n  \"value\": \"530622\" },\n\n{\n  \"label\": \"盐津县\",\n  \"value\": \"530623\" },\n\n{\n  \"label\": \"大关县\",\n  \"value\": \"530624\" },\n\n{\n  \"label\": \"永善县\",\n  \"value\": \"530625\" },\n\n{\n  \"label\": \"绥江县\",\n  \"value\": \"530626\" },\n\n{\n  \"label\": \"镇雄县\",\n  \"value\": \"530627\" },\n\n{\n  \"label\": \"彝良县\",\n  \"value\": \"530628\" },\n\n{\n  \"label\": \"威信县\",\n  \"value\": \"530629\" },\n\n{\n  \"label\": \"水富县\",\n  \"value\": \"530630\" }],\n\n\n[{\n  \"label\": \"古城区\",\n  \"value\": \"530702\" },\n\n{\n  \"label\": \"玉龙纳西族自治县\",\n  \"value\": \"530721\" },\n\n{\n  \"label\": \"永胜县\",\n  \"value\": \"530722\" },\n\n{\n  \"label\": \"华坪县\",\n  \"value\": \"530723\" },\n\n{\n  \"label\": \"宁蒗彝族自治县\",\n  \"value\": \"530724\" }],\n\n\n[{\n  \"label\": \"思茅区\",\n  \"value\": \"530802\" },\n\n{\n  \"label\": \"宁洱哈尼族彝族自治县\",\n  \"value\": \"530821\" },\n\n{\n  \"label\": \"墨江哈尼族自治县\",\n  \"value\": \"530822\" },\n\n{\n  \"label\": \"景东彝族自治县\",\n  \"value\": \"530823\" },\n\n{\n  \"label\": \"景谷傣族彝族自治县\",\n  \"value\": \"530824\" },\n\n{\n  \"label\": \"镇沅彝族哈尼族拉祜族自治县\",\n  \"value\": \"530825\" },\n\n{\n  \"label\": \"江城哈尼族彝族自治县\",\n  \"value\": \"530826\" },\n\n{\n  \"label\": \"孟连傣族拉祜族佤族自治县\",\n  \"value\": \"530827\" },\n\n{\n  \"label\": \"澜沧拉祜族自治县\",\n  \"value\": \"530828\" },\n\n{\n  \"label\": \"西盟佤族自治县\",\n  \"value\": \"530829\" }],\n\n\n[{\n  \"label\": \"临翔区\",\n  \"value\": \"530902\" },\n\n{\n  \"label\": \"凤庆县\",\n  \"value\": \"530921\" },\n\n{\n  \"label\": \"云县\",\n  \"value\": \"530922\" },\n\n{\n  \"label\": \"永德县\",\n  \"value\": \"530923\" },\n\n{\n  \"label\": \"镇康县\",\n  \"value\": \"530924\" },\n\n{\n  \"label\": \"双江拉祜族佤族布朗族傣族自治县\",\n  \"value\": \"530925\" },\n\n{\n  \"label\": \"耿马傣族佤族自治县\",\n  \"value\": \"530926\" },\n\n{\n  \"label\": \"沧源佤族自治县\",\n  \"value\": \"530927\" }],\n\n\n[{\n  \"label\": \"楚雄市\",\n  \"value\": \"532301\" },\n\n{\n  \"label\": \"双柏县\",\n  \"value\": \"532322\" },\n\n{\n  \"label\": \"牟定县\",\n  \"value\": \"532323\" },\n\n{\n  \"label\": \"南华县\",\n  \"value\": \"532324\" },\n\n{\n  \"label\": \"姚安县\",\n  \"value\": \"532325\" },\n\n{\n  \"label\": \"大姚县\",\n  \"value\": \"532326\" },\n\n{\n  \"label\": \"永仁县\",\n  \"value\": \"532327\" },\n\n{\n  \"label\": \"元谋县\",\n  \"value\": \"532328\" },\n\n{\n  \"label\": \"武定县\",\n  \"value\": \"532329\" },\n\n{\n  \"label\": \"禄丰县\",\n  \"value\": \"532331\" }],\n\n\n[{\n  \"label\": \"个旧市\",\n  \"value\": \"532501\" },\n\n{\n  \"label\": \"开远市\",\n  \"value\": \"532502\" },\n\n{\n  \"label\": \"蒙自市\",\n  \"value\": \"532503\" },\n\n{\n  \"label\": \"弥勒市\",\n  \"value\": \"532504\" },\n\n{\n  \"label\": \"屏边苗族自治县\",\n  \"value\": \"532523\" },\n\n{\n  \"label\": \"建水县\",\n  \"value\": \"532524\" },\n\n{\n  \"label\": \"石屏县\",\n  \"value\": \"532525\" },\n\n{\n  \"label\": \"泸西县\",\n  \"value\": \"532527\" },\n\n{\n  \"label\": \"元阳县\",\n  \"value\": \"532528\" },\n\n{\n  \"label\": \"红河县\",\n  \"value\": \"532529\" },\n\n{\n  \"label\": \"金平苗族瑶族傣族自治县\",\n  \"value\": \"532530\" },\n\n{\n  \"label\": \"绿春县\",\n  \"value\": \"532531\" },\n\n{\n  \"label\": \"河口瑶族自治县\",\n  \"value\": \"532532\" }],\n\n\n[{\n  \"label\": \"文山市\",\n  \"value\": \"532601\" },\n\n{\n  \"label\": \"砚山县\",\n  \"value\": \"532622\" },\n\n{\n  \"label\": \"西畴县\",\n  \"value\": \"532623\" },\n\n{\n  \"label\": \"麻栗坡县\",\n  \"value\": \"532624\" },\n\n{\n  \"label\": \"马关县\",\n  \"value\": \"532625\" },\n\n{\n  \"label\": \"丘北县\",\n  \"value\": \"532626\" },\n\n{\n  \"label\": \"广南县\",\n  \"value\": \"532627\" },\n\n{\n  \"label\": \"富宁县\",\n  \"value\": \"532628\" }],\n\n\n[{\n  \"label\": \"景洪市\",\n  \"value\": \"532801\" },\n\n{\n  \"label\": \"勐海县\",\n  \"value\": \"532822\" },\n\n{\n  \"label\": \"勐腊县\",\n  \"value\": \"532823\" }],\n\n\n[{\n  \"label\": \"大理市\",\n  \"value\": \"532901\" },\n\n{\n  \"label\": \"漾濞彝族自治县\",\n  \"value\": \"532922\" },\n\n{\n  \"label\": \"祥云县\",\n  \"value\": \"532923\" },\n\n{\n  \"label\": \"宾川县\",\n  \"value\": \"532924\" },\n\n{\n  \"label\": \"弥渡县\",\n  \"value\": \"532925\" },\n\n{\n  \"label\": \"南涧彝族自治县\",\n  \"value\": \"532926\" },\n\n{\n  \"label\": \"巍山彝族回族自治县\",\n  \"value\": \"532927\" },\n\n{\n  \"label\": \"永平县\",\n  \"value\": \"532928\" },\n\n{\n  \"label\": \"云龙县\",\n  \"value\": \"532929\" },\n\n{\n  \"label\": \"洱源县\",\n  \"value\": \"532930\" },\n\n{\n  \"label\": \"剑川县\",\n  \"value\": \"532931\" },\n\n{\n  \"label\": \"鹤庆县\",\n  \"value\": \"532932\" }],\n\n\n[{\n  \"label\": \"瑞丽市\",\n  \"value\": \"533102\" },\n\n{\n  \"label\": \"芒市\",\n  \"value\": \"533103\" },\n\n{\n  \"label\": \"梁河县\",\n  \"value\": \"533122\" },\n\n{\n  \"label\": \"盈江县\",\n  \"value\": \"533123\" },\n\n{\n  \"label\": \"陇川县\",\n  \"value\": \"533124\" }],\n\n\n[{\n  \"label\": \"泸水市\",\n  \"value\": \"533301\" },\n\n{\n  \"label\": \"福贡县\",\n  \"value\": \"533323\" },\n\n{\n  \"label\": \"贡山独龙族怒族自治县\",\n  \"value\": \"533324\" },\n\n{\n  \"label\": \"兰坪白族普米族自治县\",\n  \"value\": \"533325\" }],\n\n\n[{\n  \"label\": \"香格里拉市\",\n  \"value\": \"533401\" },\n\n{\n  \"label\": \"德钦县\",\n  \"value\": \"533422\" },\n\n{\n  \"label\": \"维西傈僳族自治县\",\n  \"value\": \"533423\" }]],\n\n\n\n[\n[{\n  \"label\": \"城关区\",\n  \"value\": \"540102\" },\n\n{\n  \"label\": \"堆龙德庆区\",\n  \"value\": \"540103\" },\n\n{\n  \"label\": \"林周县\",\n  \"value\": \"540121\" },\n\n{\n  \"label\": \"当雄县\",\n  \"value\": \"540122\" },\n\n{\n  \"label\": \"尼木县\",\n  \"value\": \"540123\" },\n\n{\n  \"label\": \"曲水县\",\n  \"value\": \"540124\" },\n\n{\n  \"label\": \"达孜县\",\n  \"value\": \"540126\" },\n\n{\n  \"label\": \"墨竹工卡县\",\n  \"value\": \"540127\" },\n\n{\n  \"label\": \"格尔木藏青工业园区\",\n  \"value\": \"540171\" },\n\n{\n  \"label\": \"拉萨经济技术开发区\",\n  \"value\": \"540172\" },\n\n{\n  \"label\": \"西藏文化旅游创意园区\",\n  \"value\": \"540173\" },\n\n{\n  \"label\": \"达孜工业园区\",\n  \"value\": \"540174\" }],\n\n\n[{\n  \"label\": \"桑珠孜区\",\n  \"value\": \"540202\" },\n\n{\n  \"label\": \"南木林县\",\n  \"value\": \"540221\" },\n\n{\n  \"label\": \"江孜县\",\n  \"value\": \"540222\" },\n\n{\n  \"label\": \"定日县\",\n  \"value\": \"540223\" },\n\n{\n  \"label\": \"萨迦县\",\n  \"value\": \"540224\" },\n\n{\n  \"label\": \"拉孜县\",\n  \"value\": \"540225\" },\n\n{\n  \"label\": \"昂仁县\",\n  \"value\": \"540226\" },\n\n{\n  \"label\": \"谢通门县\",\n  \"value\": \"540227\" },\n\n{\n  \"label\": \"白朗县\",\n  \"value\": \"540228\" },\n\n{\n  \"label\": \"仁布县\",\n  \"value\": \"540229\" },\n\n{\n  \"label\": \"康马县\",\n  \"value\": \"540230\" },\n\n{\n  \"label\": \"定结县\",\n  \"value\": \"540231\" },\n\n{\n  \"label\": \"仲巴县\",\n  \"value\": \"540232\" },\n\n{\n  \"label\": \"亚东县\",\n  \"value\": \"540233\" },\n\n{\n  \"label\": \"吉隆县\",\n  \"value\": \"540234\" },\n\n{\n  \"label\": \"聂拉木县\",\n  \"value\": \"540235\" },\n\n{\n  \"label\": \"萨嘎县\",\n  \"value\": \"540236\" },\n\n{\n  \"label\": \"岗巴县\",\n  \"value\": \"540237\" }],\n\n\n[{\n  \"label\": \"卡若区\",\n  \"value\": \"540302\" },\n\n{\n  \"label\": \"江达县\",\n  \"value\": \"540321\" },\n\n{\n  \"label\": \"贡觉县\",\n  \"value\": \"540322\" },\n\n{\n  \"label\": \"类乌齐县\",\n  \"value\": \"540323\" },\n\n{\n  \"label\": \"丁青县\",\n  \"value\": \"540324\" },\n\n{\n  \"label\": \"察雅县\",\n  \"value\": \"540325\" },\n\n{\n  \"label\": \"八宿县\",\n  \"value\": \"540326\" },\n\n{\n  \"label\": \"左贡县\",\n  \"value\": \"540327\" },\n\n{\n  \"label\": \"芒康县\",\n  \"value\": \"540328\" },\n\n{\n  \"label\": \"洛隆县\",\n  \"value\": \"540329\" },\n\n{\n  \"label\": \"边坝县\",\n  \"value\": \"540330\" }],\n\n\n[{\n  \"label\": \"巴宜区\",\n  \"value\": \"540402\" },\n\n{\n  \"label\": \"工布江达县\",\n  \"value\": \"540421\" },\n\n{\n  \"label\": \"米林县\",\n  \"value\": \"540422\" },\n\n{\n  \"label\": \"墨脱县\",\n  \"value\": \"540423\" },\n\n{\n  \"label\": \"波密县\",\n  \"value\": \"540424\" },\n\n{\n  \"label\": \"察隅县\",\n  \"value\": \"540425\" },\n\n{\n  \"label\": \"朗县\",\n  \"value\": \"540426\" }],\n\n\n[{\n  \"label\": \"乃东区\",\n  \"value\": \"540502\" },\n\n{\n  \"label\": \"扎囊县\",\n  \"value\": \"540521\" },\n\n{\n  \"label\": \"贡嘎县\",\n  \"value\": \"540522\" },\n\n{\n  \"label\": \"桑日县\",\n  \"value\": \"540523\" },\n\n{\n  \"label\": \"琼结县\",\n  \"value\": \"540524\" },\n\n{\n  \"label\": \"曲松县\",\n  \"value\": \"540525\" },\n\n{\n  \"label\": \"措美县\",\n  \"value\": \"540526\" },\n\n{\n  \"label\": \"洛扎县\",\n  \"value\": \"540527\" },\n\n{\n  \"label\": \"加查县\",\n  \"value\": \"540528\" },\n\n{\n  \"label\": \"隆子县\",\n  \"value\": \"540529\" },\n\n{\n  \"label\": \"错那县\",\n  \"value\": \"540530\" },\n\n{\n  \"label\": \"浪卡子县\",\n  \"value\": \"540531\" }],\n\n\n[{\n  \"label\": \"那曲县\",\n  \"value\": \"542421\" },\n\n{\n  \"label\": \"嘉黎县\",\n  \"value\": \"542422\" },\n\n{\n  \"label\": \"比如县\",\n  \"value\": \"542423\" },\n\n{\n  \"label\": \"聂荣县\",\n  \"value\": \"542424\" },\n\n{\n  \"label\": \"安多县\",\n  \"value\": \"542425\" },\n\n{\n  \"label\": \"申扎县\",\n  \"value\": \"542426\" },\n\n{\n  \"label\": \"索县\",\n  \"value\": \"542427\" },\n\n{\n  \"label\": \"班戈县\",\n  \"value\": \"542428\" },\n\n{\n  \"label\": \"巴青县\",\n  \"value\": \"542429\" },\n\n{\n  \"label\": \"尼玛县\",\n  \"value\": \"542430\" },\n\n{\n  \"label\": \"双湖县\",\n  \"value\": \"542431\" }],\n\n\n[{\n  \"label\": \"普兰县\",\n  \"value\": \"542521\" },\n\n{\n  \"label\": \"札达县\",\n  \"value\": \"542522\" },\n\n{\n  \"label\": \"噶尔县\",\n  \"value\": \"542523\" },\n\n{\n  \"label\": \"日土县\",\n  \"value\": \"542524\" },\n\n{\n  \"label\": \"革吉县\",\n  \"value\": \"542525\" },\n\n{\n  \"label\": \"改则县\",\n  \"value\": \"542526\" },\n\n{\n  \"label\": \"措勤县\",\n  \"value\": \"542527\" }]],\n\n\n\n[\n[{\n  \"label\": \"新城区\",\n  \"value\": \"610102\" },\n\n{\n  \"label\": \"碑林区\",\n  \"value\": \"610103\" },\n\n{\n  \"label\": \"莲湖区\",\n  \"value\": \"610104\" },\n\n{\n  \"label\": \"灞桥区\",\n  \"value\": \"610111\" },\n\n{\n  \"label\": \"未央区\",\n  \"value\": \"610112\" },\n\n{\n  \"label\": \"雁塔区\",\n  \"value\": \"610113\" },\n\n{\n  \"label\": \"阎良区\",\n  \"value\": \"610114\" },\n\n{\n  \"label\": \"临潼区\",\n  \"value\": \"610115\" },\n\n{\n  \"label\": \"长安区\",\n  \"value\": \"610116\" },\n\n{\n  \"label\": \"高陵区\",\n  \"value\": \"610117\" },\n\n{\n  \"label\": \"鄠邑区\",\n  \"value\": \"610118\" },\n\n{\n  \"label\": \"蓝田县\",\n  \"value\": \"610122\" },\n\n{\n  \"label\": \"周至县\",\n  \"value\": \"610124\" }],\n\n\n[{\n  \"label\": \"王益区\",\n  \"value\": \"610202\" },\n\n{\n  \"label\": \"印台区\",\n  \"value\": \"610203\" },\n\n{\n  \"label\": \"耀州区\",\n  \"value\": \"610204\" },\n\n{\n  \"label\": \"宜君县\",\n  \"value\": \"610222\" }],\n\n\n[{\n  \"label\": \"渭滨区\",\n  \"value\": \"610302\" },\n\n{\n  \"label\": \"金台区\",\n  \"value\": \"610303\" },\n\n{\n  \"label\": \"陈仓区\",\n  \"value\": \"610304\" },\n\n{\n  \"label\": \"凤翔县\",\n  \"value\": \"610322\" },\n\n{\n  \"label\": \"岐山县\",\n  \"value\": \"610323\" },\n\n{\n  \"label\": \"扶风县\",\n  \"value\": \"610324\" },\n\n{\n  \"label\": \"眉县\",\n  \"value\": \"610326\" },\n\n{\n  \"label\": \"陇县\",\n  \"value\": \"610327\" },\n\n{\n  \"label\": \"千阳县\",\n  \"value\": \"610328\" },\n\n{\n  \"label\": \"麟游县\",\n  \"value\": \"610329\" },\n\n{\n  \"label\": \"凤县\",\n  \"value\": \"610330\" },\n\n{\n  \"label\": \"太白县\",\n  \"value\": \"610331\" }],\n\n\n[{\n  \"label\": \"秦都区\",\n  \"value\": \"610402\" },\n\n{\n  \"label\": \"杨陵区\",\n  \"value\": \"610403\" },\n\n{\n  \"label\": \"渭城区\",\n  \"value\": \"610404\" },\n\n{\n  \"label\": \"三原县\",\n  \"value\": \"610422\" },\n\n{\n  \"label\": \"泾阳县\",\n  \"value\": \"610423\" },\n\n{\n  \"label\": \"乾县\",\n  \"value\": \"610424\" },\n\n{\n  \"label\": \"礼泉县\",\n  \"value\": \"610425\" },\n\n{\n  \"label\": \"永寿县\",\n  \"value\": \"610426\" },\n\n{\n  \"label\": \"彬县\",\n  \"value\": \"610427\" },\n\n{\n  \"label\": \"长武县\",\n  \"value\": \"610428\" },\n\n{\n  \"label\": \"旬邑县\",\n  \"value\": \"610429\" },\n\n{\n  \"label\": \"淳化县\",\n  \"value\": \"610430\" },\n\n{\n  \"label\": \"武功县\",\n  \"value\": \"610431\" },\n\n{\n  \"label\": \"兴平市\",\n  \"value\": \"610481\" }],\n\n\n[{\n  \"label\": \"临渭区\",\n  \"value\": \"610502\" },\n\n{\n  \"label\": \"华州区\",\n  \"value\": \"610503\" },\n\n{\n  \"label\": \"潼关县\",\n  \"value\": \"610522\" },\n\n{\n  \"label\": \"大荔县\",\n  \"value\": \"610523\" },\n\n{\n  \"label\": \"合阳县\",\n  \"value\": \"610524\" },\n\n{\n  \"label\": \"澄城县\",\n  \"value\": \"610525\" },\n\n{\n  \"label\": \"蒲城县\",\n  \"value\": \"610526\" },\n\n{\n  \"label\": \"白水县\",\n  \"value\": \"610527\" },\n\n{\n  \"label\": \"富平县\",\n  \"value\": \"610528\" },\n\n{\n  \"label\": \"韩城市\",\n  \"value\": \"610581\" },\n\n{\n  \"label\": \"华阴市\",\n  \"value\": \"610582\" }],\n\n\n[{\n  \"label\": \"宝塔区\",\n  \"value\": \"610602\" },\n\n{\n  \"label\": \"安塞区\",\n  \"value\": \"610603\" },\n\n{\n  \"label\": \"延长县\",\n  \"value\": \"610621\" },\n\n{\n  \"label\": \"延川县\",\n  \"value\": \"610622\" },\n\n{\n  \"label\": \"子长县\",\n  \"value\": \"610623\" },\n\n{\n  \"label\": \"志丹县\",\n  \"value\": \"610625\" },\n\n{\n  \"label\": \"吴起县\",\n  \"value\": \"610626\" },\n\n{\n  \"label\": \"甘泉县\",\n  \"value\": \"610627\" },\n\n{\n  \"label\": \"富县\",\n  \"value\": \"610628\" },\n\n{\n  \"label\": \"洛川县\",\n  \"value\": \"610629\" },\n\n{\n  \"label\": \"宜川县\",\n  \"value\": \"610630\" },\n\n{\n  \"label\": \"黄龙县\",\n  \"value\": \"610631\" },\n\n{\n  \"label\": \"黄陵县\",\n  \"value\": \"610632\" }],\n\n\n[{\n  \"label\": \"汉台区\",\n  \"value\": \"610702\" },\n\n{\n  \"label\": \"南郑区\",\n  \"value\": \"610703\" },\n\n{\n  \"label\": \"城固县\",\n  \"value\": \"610722\" },\n\n{\n  \"label\": \"洋县\",\n  \"value\": \"610723\" },\n\n{\n  \"label\": \"西乡县\",\n  \"value\": \"610724\" },\n\n{\n  \"label\": \"勉县\",\n  \"value\": \"610725\" },\n\n{\n  \"label\": \"宁强县\",\n  \"value\": \"610726\" },\n\n{\n  \"label\": \"略阳县\",\n  \"value\": \"610727\" },\n\n{\n  \"label\": \"镇巴县\",\n  \"value\": \"610728\" },\n\n{\n  \"label\": \"留坝县\",\n  \"value\": \"610729\" },\n\n{\n  \"label\": \"佛坪县\",\n  \"value\": \"610730\" }],\n\n\n[{\n  \"label\": \"榆阳区\",\n  \"value\": \"610802\" },\n\n{\n  \"label\": \"横山区\",\n  \"value\": \"610803\" },\n\n{\n  \"label\": \"府谷县\",\n  \"value\": \"610822\" },\n\n{\n  \"label\": \"靖边县\",\n  \"value\": \"610824\" },\n\n{\n  \"label\": \"定边县\",\n  \"value\": \"610825\" },\n\n{\n  \"label\": \"绥德县\",\n  \"value\": \"610826\" },\n\n{\n  \"label\": \"米脂县\",\n  \"value\": \"610827\" },\n\n{\n  \"label\": \"佳县\",\n  \"value\": \"610828\" },\n\n{\n  \"label\": \"吴堡县\",\n  \"value\": \"610829\" },\n\n{\n  \"label\": \"清涧县\",\n  \"value\": \"610830\" },\n\n{\n  \"label\": \"子洲县\",\n  \"value\": \"610831\" },\n\n{\n  \"label\": \"神木市\",\n  \"value\": \"610881\" }],\n\n\n[{\n  \"label\": \"汉滨区\",\n  \"value\": \"610902\" },\n\n{\n  \"label\": \"汉阴县\",\n  \"value\": \"610921\" },\n\n{\n  \"label\": \"石泉县\",\n  \"value\": \"610922\" },\n\n{\n  \"label\": \"宁陕县\",\n  \"value\": \"610923\" },\n\n{\n  \"label\": \"紫阳县\",\n  \"value\": \"610924\" },\n\n{\n  \"label\": \"岚皋县\",\n  \"value\": \"610925\" },\n\n{\n  \"label\": \"平利县\",\n  \"value\": \"610926\" },\n\n{\n  \"label\": \"镇坪县\",\n  \"value\": \"610927\" },\n\n{\n  \"label\": \"旬阳县\",\n  \"value\": \"610928\" },\n\n{\n  \"label\": \"白河县\",\n  \"value\": \"610929\" }],\n\n\n[{\n  \"label\": \"商州区\",\n  \"value\": \"611002\" },\n\n{\n  \"label\": \"洛南县\",\n  \"value\": \"611021\" },\n\n{\n  \"label\": \"丹凤县\",\n  \"value\": \"611022\" },\n\n{\n  \"label\": \"商南县\",\n  \"value\": \"611023\" },\n\n{\n  \"label\": \"山阳县\",\n  \"value\": \"611024\" },\n\n{\n  \"label\": \"镇安县\",\n  \"value\": \"611025\" },\n\n{\n  \"label\": \"柞水县\",\n  \"value\": \"611026\" }]],\n\n\n\n[\n[{\n  \"label\": \"城关区\",\n  \"value\": \"620102\" },\n\n{\n  \"label\": \"七里河区\",\n  \"value\": \"620103\" },\n\n{\n  \"label\": \"西固区\",\n  \"value\": \"620104\" },\n\n{\n  \"label\": \"安宁区\",\n  \"value\": \"620105\" },\n\n{\n  \"label\": \"红古区\",\n  \"value\": \"620111\" },\n\n{\n  \"label\": \"永登县\",\n  \"value\": \"620121\" },\n\n{\n  \"label\": \"皋兰县\",\n  \"value\": \"620122\" },\n\n{\n  \"label\": \"榆中县\",\n  \"value\": \"620123\" },\n\n{\n  \"label\": \"兰州新区\",\n  \"value\": \"620171\" }],\n\n\n[{\n  \"label\": \"嘉峪关市\",\n  \"value\": \"620201\" }],\n\n[{\n  \"label\": \"金川区\",\n  \"value\": \"620302\" },\n\n{\n  \"label\": \"永昌县\",\n  \"value\": \"620321\" }],\n\n\n[{\n  \"label\": \"白银区\",\n  \"value\": \"620402\" },\n\n{\n  \"label\": \"平川区\",\n  \"value\": \"620403\" },\n\n{\n  \"label\": \"靖远县\",\n  \"value\": \"620421\" },\n\n{\n  \"label\": \"会宁县\",\n  \"value\": \"620422\" },\n\n{\n  \"label\": \"景泰县\",\n  \"value\": \"620423\" }],\n\n\n[{\n  \"label\": \"秦州区\",\n  \"value\": \"620502\" },\n\n{\n  \"label\": \"麦积区\",\n  \"value\": \"620503\" },\n\n{\n  \"label\": \"清水县\",\n  \"value\": \"620521\" },\n\n{\n  \"label\": \"秦安县\",\n  \"value\": \"620522\" },\n\n{\n  \"label\": \"甘谷县\",\n  \"value\": \"620523\" },\n\n{\n  \"label\": \"武山县\",\n  \"value\": \"620524\" },\n\n{\n  \"label\": \"张家川回族自治县\",\n  \"value\": \"620525\" }],\n\n\n[{\n  \"label\": \"凉州区\",\n  \"value\": \"620602\" },\n\n{\n  \"label\": \"民勤县\",\n  \"value\": \"620621\" },\n\n{\n  \"label\": \"古浪县\",\n  \"value\": \"620622\" },\n\n{\n  \"label\": \"天祝藏族自治县\",\n  \"value\": \"620623\" }],\n\n\n[{\n  \"label\": \"甘州区\",\n  \"value\": \"620702\" },\n\n{\n  \"label\": \"肃南裕固族自治县\",\n  \"value\": \"620721\" },\n\n{\n  \"label\": \"民乐县\",\n  \"value\": \"620722\" },\n\n{\n  \"label\": \"临泽县\",\n  \"value\": \"620723\" },\n\n{\n  \"label\": \"高台县\",\n  \"value\": \"620724\" },\n\n{\n  \"label\": \"山丹县\",\n  \"value\": \"620725\" }],\n\n\n[{\n  \"label\": \"崆峒区\",\n  \"value\": \"620802\" },\n\n{\n  \"label\": \"泾川县\",\n  \"value\": \"620821\" },\n\n{\n  \"label\": \"灵台县\",\n  \"value\": \"620822\" },\n\n{\n  \"label\": \"崇信县\",\n  \"value\": \"620823\" },\n\n{\n  \"label\": \"华亭县\",\n  \"value\": \"620824\" },\n\n{\n  \"label\": \"庄浪县\",\n  \"value\": \"620825\" },\n\n{\n  \"label\": \"静宁县\",\n  \"value\": \"620826\" },\n\n{\n  \"label\": \"平凉工业园区\",\n  \"value\": \"620871\" }],\n\n\n[{\n  \"label\": \"肃州区\",\n  \"value\": \"620902\" },\n\n{\n  \"label\": \"金塔县\",\n  \"value\": \"620921\" },\n\n{\n  \"label\": \"瓜州县\",\n  \"value\": \"620922\" },\n\n{\n  \"label\": \"肃北蒙古族自治县\",\n  \"value\": \"620923\" },\n\n{\n  \"label\": \"阿克塞哈萨克族自治县\",\n  \"value\": \"620924\" },\n\n{\n  \"label\": \"玉门市\",\n  \"value\": \"620981\" },\n\n{\n  \"label\": \"敦煌市\",\n  \"value\": \"620982\" }],\n\n\n[{\n  \"label\": \"西峰区\",\n  \"value\": \"621002\" },\n\n{\n  \"label\": \"庆城县\",\n  \"value\": \"621021\" },\n\n{\n  \"label\": \"环县\",\n  \"value\": \"621022\" },\n\n{\n  \"label\": \"华池县\",\n  \"value\": \"621023\" },\n\n{\n  \"label\": \"合水县\",\n  \"value\": \"621024\" },\n\n{\n  \"label\": \"正宁县\",\n  \"value\": \"621025\" },\n\n{\n  \"label\": \"宁县\",\n  \"value\": \"621026\" },\n\n{\n  \"label\": \"镇原县\",\n  \"value\": \"621027\" }],\n\n\n[{\n  \"label\": \"安定区\",\n  \"value\": \"621102\" },\n\n{\n  \"label\": \"通渭县\",\n  \"value\": \"621121\" },\n\n{\n  \"label\": \"陇西县\",\n  \"value\": \"621122\" },\n\n{\n  \"label\": \"渭源县\",\n  \"value\": \"621123\" },\n\n{\n  \"label\": \"临洮县\",\n  \"value\": \"621124\" },\n\n{\n  \"label\": \"漳县\",\n  \"value\": \"621125\" },\n\n{\n  \"label\": \"岷县\",\n  \"value\": \"621126\" }],\n\n\n[{\n  \"label\": \"武都区\",\n  \"value\": \"621202\" },\n\n{\n  \"label\": \"成县\",\n  \"value\": \"621221\" },\n\n{\n  \"label\": \"文县\",\n  \"value\": \"621222\" },\n\n{\n  \"label\": \"宕昌县\",\n  \"value\": \"621223\" },\n\n{\n  \"label\": \"康县\",\n  \"value\": \"621224\" },\n\n{\n  \"label\": \"西和县\",\n  \"value\": \"621225\" },\n\n{\n  \"label\": \"礼县\",\n  \"value\": \"621226\" },\n\n{\n  \"label\": \"徽县\",\n  \"value\": \"621227\" },\n\n{\n  \"label\": \"两当县\",\n  \"value\": \"621228\" }],\n\n\n[{\n  \"label\": \"临夏市\",\n  \"value\": \"622901\" },\n\n{\n  \"label\": \"临夏县\",\n  \"value\": \"622921\" },\n\n{\n  \"label\": \"康乐县\",\n  \"value\": \"622922\" },\n\n{\n  \"label\": \"永靖县\",\n  \"value\": \"622923\" },\n\n{\n  \"label\": \"广河县\",\n  \"value\": \"622924\" },\n\n{\n  \"label\": \"和政县\",\n  \"value\": \"622925\" },\n\n{\n  \"label\": \"东乡族自治县\",\n  \"value\": \"622926\" },\n\n{\n  \"label\": \"积石山保安族东乡族撒拉族自治县\",\n  \"value\": \"622927\" }],\n\n\n[{\n  \"label\": \"合作市\",\n  \"value\": \"623001\" },\n\n{\n  \"label\": \"临潭县\",\n  \"value\": \"623021\" },\n\n{\n  \"label\": \"卓尼县\",\n  \"value\": \"623022\" },\n\n{\n  \"label\": \"舟曲县\",\n  \"value\": \"623023\" },\n\n{\n  \"label\": \"迭部县\",\n  \"value\": \"623024\" },\n\n{\n  \"label\": \"玛曲县\",\n  \"value\": \"623025\" },\n\n{\n  \"label\": \"碌曲县\",\n  \"value\": \"623026\" },\n\n{\n  \"label\": \"夏河县\",\n  \"value\": \"623027\" }]],\n\n\n\n[\n[{\n  \"label\": \"城东区\",\n  \"value\": \"630102\" },\n\n{\n  \"label\": \"城中区\",\n  \"value\": \"630103\" },\n\n{\n  \"label\": \"城西区\",\n  \"value\": \"630104\" },\n\n{\n  \"label\": \"城北区\",\n  \"value\": \"630105\" },\n\n{\n  \"label\": \"大通回族土族自治县\",\n  \"value\": \"630121\" },\n\n{\n  \"label\": \"湟中县\",\n  \"value\": \"630122\" },\n\n{\n  \"label\": \"湟源县\",\n  \"value\": \"630123\" }],\n\n\n[{\n  \"label\": \"乐都区\",\n  \"value\": \"630202\" },\n\n{\n  \"label\": \"平安区\",\n  \"value\": \"630203\" },\n\n{\n  \"label\": \"民和回族土族自治县\",\n  \"value\": \"630222\" },\n\n{\n  \"label\": \"互助土族自治县\",\n  \"value\": \"630223\" },\n\n{\n  \"label\": \"化隆回族自治县\",\n  \"value\": \"630224\" },\n\n{\n  \"label\": \"循化撒拉族自治县\",\n  \"value\": \"630225\" }],\n\n\n[{\n  \"label\": \"门源回族自治县\",\n  \"value\": \"632221\" },\n\n{\n  \"label\": \"祁连县\",\n  \"value\": \"632222\" },\n\n{\n  \"label\": \"海晏县\",\n  \"value\": \"632223\" },\n\n{\n  \"label\": \"刚察县\",\n  \"value\": \"632224\" }],\n\n\n[{\n  \"label\": \"同仁县\",\n  \"value\": \"632321\" },\n\n{\n  \"label\": \"尖扎县\",\n  \"value\": \"632322\" },\n\n{\n  \"label\": \"泽库县\",\n  \"value\": \"632323\" },\n\n{\n  \"label\": \"河南蒙古族自治县\",\n  \"value\": \"632324\" }],\n\n\n[{\n  \"label\": \"共和县\",\n  \"value\": \"632521\" },\n\n{\n  \"label\": \"同德县\",\n  \"value\": \"632522\" },\n\n{\n  \"label\": \"贵德县\",\n  \"value\": \"632523\" },\n\n{\n  \"label\": \"兴海县\",\n  \"value\": \"632524\" },\n\n{\n  \"label\": \"贵南县\",\n  \"value\": \"632525\" }],\n\n\n[{\n  \"label\": \"玛沁县\",\n  \"value\": \"632621\" },\n\n{\n  \"label\": \"班玛县\",\n  \"value\": \"632622\" },\n\n{\n  \"label\": \"甘德县\",\n  \"value\": \"632623\" },\n\n{\n  \"label\": \"达日县\",\n  \"value\": \"632624\" },\n\n{\n  \"label\": \"久治县\",\n  \"value\": \"632625\" },\n\n{\n  \"label\": \"玛多县\",\n  \"value\": \"632626\" }],\n\n\n[{\n  \"label\": \"玉树市\",\n  \"value\": \"632701\" },\n\n{\n  \"label\": \"杂多县\",\n  \"value\": \"632722\" },\n\n{\n  \"label\": \"称多县\",\n  \"value\": \"632723\" },\n\n{\n  \"label\": \"治多县\",\n  \"value\": \"632724\" },\n\n{\n  \"label\": \"囊谦县\",\n  \"value\": \"632725\" },\n\n{\n  \"label\": \"曲麻莱县\",\n  \"value\": \"632726\" }],\n\n\n[{\n  \"label\": \"格尔木市\",\n  \"value\": \"632801\" },\n\n{\n  \"label\": \"德令哈市\",\n  \"value\": \"632802\" },\n\n{\n  \"label\": \"乌兰县\",\n  \"value\": \"632821\" },\n\n{\n  \"label\": \"都兰县\",\n  \"value\": \"632822\" },\n\n{\n  \"label\": \"天峻县\",\n  \"value\": \"632823\" },\n\n{\n  \"label\": \"大柴旦行政委员会\",\n  \"value\": \"632857\" },\n\n{\n  \"label\": \"冷湖行政委员会\",\n  \"value\": \"632858\" },\n\n{\n  \"label\": \"茫崖行政委员会\",\n  \"value\": \"632859\" }]],\n\n\n\n[\n[{\n  \"label\": \"兴庆区\",\n  \"value\": \"640104\" },\n\n{\n  \"label\": \"西夏区\",\n  \"value\": \"640105\" },\n\n{\n  \"label\": \"金凤区\",\n  \"value\": \"640106\" },\n\n{\n  \"label\": \"永宁县\",\n  \"value\": \"640121\" },\n\n{\n  \"label\": \"贺兰县\",\n  \"value\": \"640122\" },\n\n{\n  \"label\": \"灵武市\",\n  \"value\": \"640181\" }],\n\n\n[{\n  \"label\": \"大武口区\",\n  \"value\": \"640202\" },\n\n{\n  \"label\": \"惠农区\",\n  \"value\": \"640205\" },\n\n{\n  \"label\": \"平罗县\",\n  \"value\": \"640221\" }],\n\n\n[{\n  \"label\": \"利通区\",\n  \"value\": \"640302\" },\n\n{\n  \"label\": \"红寺堡区\",\n  \"value\": \"640303\" },\n\n{\n  \"label\": \"盐池县\",\n  \"value\": \"640323\" },\n\n{\n  \"label\": \"同心县\",\n  \"value\": \"640324\" },\n\n{\n  \"label\": \"青铜峡市\",\n  \"value\": \"640381\" }],\n\n\n[{\n  \"label\": \"原州区\",\n  \"value\": \"640402\" },\n\n{\n  \"label\": \"西吉县\",\n  \"value\": \"640422\" },\n\n{\n  \"label\": \"隆德县\",\n  \"value\": \"640423\" },\n\n{\n  \"label\": \"泾源县\",\n  \"value\": \"640424\" },\n\n{\n  \"label\": \"彭阳县\",\n  \"value\": \"640425\" }],\n\n\n[{\n  \"label\": \"沙坡头区\",\n  \"value\": \"640502\" },\n\n{\n  \"label\": \"中宁县\",\n  \"value\": \"640521\" },\n\n{\n  \"label\": \"海原县\",\n  \"value\": \"640522\" }]],\n\n\n\n[\n[{\n  \"label\": \"天山区\",\n  \"value\": \"650102\" },\n\n{\n  \"label\": \"沙依巴克区\",\n  \"value\": \"650103\" },\n\n{\n  \"label\": \"新市区\",\n  \"value\": \"650104\" },\n\n{\n  \"label\": \"水磨沟区\",\n  \"value\": \"650105\" },\n\n{\n  \"label\": \"头屯河区\",\n  \"value\": \"650106\" },\n\n{\n  \"label\": \"达坂城区\",\n  \"value\": \"650107\" },\n\n{\n  \"label\": \"米东区\",\n  \"value\": \"650109\" },\n\n{\n  \"label\": \"乌鲁木齐县\",\n  \"value\": \"650121\" },\n\n{\n  \"label\": \"乌鲁木齐经济技术开发区\",\n  \"value\": \"650171\" },\n\n{\n  \"label\": \"乌鲁木齐高新技术产业开发区\",\n  \"value\": \"650172\" }],\n\n\n[{\n  \"label\": \"独山子区\",\n  \"value\": \"650202\" },\n\n{\n  \"label\": \"克拉玛依区\",\n  \"value\": \"650203\" },\n\n{\n  \"label\": \"白碱滩区\",\n  \"value\": \"650204\" },\n\n{\n  \"label\": \"乌尔禾区\",\n  \"value\": \"650205\" }],\n\n\n[{\n  \"label\": \"高昌区\",\n  \"value\": \"650402\" },\n\n{\n  \"label\": \"鄯善县\",\n  \"value\": \"650421\" },\n\n{\n  \"label\": \"托克逊县\",\n  \"value\": \"650422\" }],\n\n\n[{\n  \"label\": \"伊州区\",\n  \"value\": \"650502\" },\n\n{\n  \"label\": \"巴里坤哈萨克自治县\",\n  \"value\": \"650521\" },\n\n{\n  \"label\": \"伊吾县\",\n  \"value\": \"650522\" }],\n\n\n[{\n  \"label\": \"昌吉市\",\n  \"value\": \"652301\" },\n\n{\n  \"label\": \"阜康市\",\n  \"value\": \"652302\" },\n\n{\n  \"label\": \"呼图壁县\",\n  \"value\": \"652323\" },\n\n{\n  \"label\": \"玛纳斯县\",\n  \"value\": \"652324\" },\n\n{\n  \"label\": \"奇台县\",\n  \"value\": \"652325\" },\n\n{\n  \"label\": \"吉木萨尔县\",\n  \"value\": \"652327\" },\n\n{\n  \"label\": \"木垒哈萨克自治县\",\n  \"value\": \"652328\" }],\n\n\n[{\n  \"label\": \"博乐市\",\n  \"value\": \"652701\" },\n\n{\n  \"label\": \"阿拉山口市\",\n  \"value\": \"652702\" },\n\n{\n  \"label\": \"精河县\",\n  \"value\": \"652722\" },\n\n{\n  \"label\": \"温泉县\",\n  \"value\": \"652723\" }],\n\n\n[{\n  \"label\": \"库尔勒市\",\n  \"value\": \"652801\" },\n\n{\n  \"label\": \"轮台县\",\n  \"value\": \"652822\" },\n\n{\n  \"label\": \"尉犁县\",\n  \"value\": \"652823\" },\n\n{\n  \"label\": \"若羌县\",\n  \"value\": \"652824\" },\n\n{\n  \"label\": \"且末县\",\n  \"value\": \"652825\" },\n\n{\n  \"label\": \"焉耆回族自治县\",\n  \"value\": \"652826\" },\n\n{\n  \"label\": \"和静县\",\n  \"value\": \"652827\" },\n\n{\n  \"label\": \"和硕县\",\n  \"value\": \"652828\" },\n\n{\n  \"label\": \"博湖县\",\n  \"value\": \"652829\" },\n\n{\n  \"label\": \"库尔勒经济技术开发区\",\n  \"value\": \"652871\" }],\n\n\n[{\n  \"label\": \"阿克苏市\",\n  \"value\": \"652901\" },\n\n{\n  \"label\": \"温宿县\",\n  \"value\": \"652922\" },\n\n{\n  \"label\": \"库车县\",\n  \"value\": \"652923\" },\n\n{\n  \"label\": \"沙雅县\",\n  \"value\": \"652924\" },\n\n{\n  \"label\": \"新和县\",\n  \"value\": \"652925\" },\n\n{\n  \"label\": \"拜城县\",\n  \"value\": \"652926\" },\n\n{\n  \"label\": \"乌什县\",\n  \"value\": \"652927\" },\n\n{\n  \"label\": \"阿瓦提县\",\n  \"value\": \"652928\" },\n\n{\n  \"label\": \"柯坪县\",\n  \"value\": \"652929\" }],\n\n\n[{\n  \"label\": \"阿图什市\",\n  \"value\": \"653001\" },\n\n{\n  \"label\": \"阿克陶县\",\n  \"value\": \"653022\" },\n\n{\n  \"label\": \"阿合奇县\",\n  \"value\": \"653023\" },\n\n{\n  \"label\": \"乌恰县\",\n  \"value\": \"653024\" }],\n\n\n[{\n  \"label\": \"喀什市\",\n  \"value\": \"653101\" },\n\n{\n  \"label\": \"疏附县\",\n  \"value\": \"653121\" },\n\n{\n  \"label\": \"疏勒县\",\n  \"value\": \"653122\" },\n\n{\n  \"label\": \"英吉沙县\",\n  \"value\": \"653123\" },\n\n{\n  \"label\": \"泽普县\",\n  \"value\": \"653124\" },\n\n{\n  \"label\": \"莎车县\",\n  \"value\": \"653125\" },\n\n{\n  \"label\": \"叶城县\",\n  \"value\": \"653126\" },\n\n{\n  \"label\": \"麦盖提县\",\n  \"value\": \"653127\" },\n\n{\n  \"label\": \"岳普湖县\",\n  \"value\": \"653128\" },\n\n{\n  \"label\": \"伽师县\",\n  \"value\": \"653129\" },\n\n{\n  \"label\": \"巴楚县\",\n  \"value\": \"653130\" },\n\n{\n  \"label\": \"塔什库尔干塔吉克自治县\",\n  \"value\": \"653131\" }],\n\n\n[{\n  \"label\": \"和田市\",\n  \"value\": \"653201\" },\n\n{\n  \"label\": \"和田县\",\n  \"value\": \"653221\" },\n\n{\n  \"label\": \"墨玉县\",\n  \"value\": \"653222\" },\n\n{\n  \"label\": \"皮山县\",\n  \"value\": \"653223\" },\n\n{\n  \"label\": \"洛浦县\",\n  \"value\": \"653224\" },\n\n{\n  \"label\": \"策勒县\",\n  \"value\": \"653225\" },\n\n{\n  \"label\": \"于田县\",\n  \"value\": \"653226\" },\n\n{\n  \"label\": \"民丰县\",\n  \"value\": \"653227\" }],\n\n\n[{\n  \"label\": \"伊宁市\",\n  \"value\": \"654002\" },\n\n{\n  \"label\": \"奎屯市\",\n  \"value\": \"654003\" },\n\n{\n  \"label\": \"霍尔果斯市\",\n  \"value\": \"654004\" },\n\n{\n  \"label\": \"伊宁县\",\n  \"value\": \"654021\" },\n\n{\n  \"label\": \"察布查尔锡伯自治县\",\n  \"value\": \"654022\" },\n\n{\n  \"label\": \"霍城县\",\n  \"value\": \"654023\" },\n\n{\n  \"label\": \"巩留县\",\n  \"value\": \"654024\" },\n\n{\n  \"label\": \"新源县\",\n  \"value\": \"654025\" },\n\n{\n  \"label\": \"昭苏县\",\n  \"value\": \"654026\" },\n\n{\n  \"label\": \"特克斯县\",\n  \"value\": \"654027\" },\n\n{\n  \"label\": \"尼勒克县\",\n  \"value\": \"654028\" }],\n\n\n[{\n  \"label\": \"塔城市\",\n  \"value\": \"654201\" },\n\n{\n  \"label\": \"乌苏市\",\n  \"value\": \"654202\" },\n\n{\n  \"label\": \"额敏县\",\n  \"value\": \"654221\" },\n\n{\n  \"label\": \"沙湾县\",\n  \"value\": \"654223\" },\n\n{\n  \"label\": \"托里县\",\n  \"value\": \"654224\" },\n\n{\n  \"label\": \"裕民县\",\n  \"value\": \"654225\" },\n\n{\n  \"label\": \"和布克赛尔蒙古自治县\",\n  \"value\": \"654226\" }],\n\n\n[{\n  \"label\": \"阿勒泰市\",\n  \"value\": \"654301\" },\n\n{\n  \"label\": \"布尔津县\",\n  \"value\": \"654321\" },\n\n{\n  \"label\": \"富蕴县\",\n  \"value\": \"654322\" },\n\n{\n  \"label\": \"福海县\",\n  \"value\": \"654323\" },\n\n{\n  \"label\": \"哈巴河县\",\n  \"value\": \"654324\" },\n\n{\n  \"label\": \"青河县\",\n  \"value\": \"654325\" },\n\n{\n  \"label\": \"吉木乃县\",\n  \"value\": \"654326\" }],\n\n\n[{\n  \"label\": \"石河子市\",\n  \"value\": \"659001\" },\n\n{\n  \"label\": \"阿拉尔市\",\n  \"value\": \"659002\" },\n\n{\n  \"label\": \"图木舒克市\",\n  \"value\": \"659003\" },\n\n{\n  \"label\": \"五家渠市\",\n  \"value\": \"659004\" },\n\n{\n  \"label\": \"铁门关市\",\n  \"value\": \"659006\" }]],\n\n\n\n[\n[{\n  \"label\": \"台北\",\n  \"value\": \"660101\" }],\n\n[{\n  \"label\": \"高雄\",\n  \"value\": \"660201\" }],\n\n[{\n  \"label\": \"基隆\",\n  \"value\": \"660301\" }],\n\n[{\n  \"label\": \"台中\",\n  \"value\": \"660401\" }],\n\n[{\n  \"label\": \"台南\",\n  \"value\": \"660501\" }],\n\n[{\n  \"label\": \"新竹\",\n  \"value\": \"660601\" }],\n\n[{\n  \"label\": \"嘉义\",\n  \"value\": \"660701\" }],\n\n[{\n  \"label\": \"宜兰\",\n  \"value\": \"660801\" }],\n\n[{\n  \"label\": \"桃园\",\n  \"value\": \"660901\" }],\n\n[{\n  \"label\": \"苗栗\",\n  \"value\": \"661001\" }],\n\n[{\n  \"label\": \"彰化\",\n  \"value\": \"661101\" }],\n\n[{\n  \"label\": \"南投\",\n  \"value\": \"661201\" }],\n\n[{\n  \"label\": \"云林\",\n  \"value\": \"661301\" }],\n\n[{\n  \"label\": \"屏东\",\n  \"value\": \"661401\" }],\n\n[{\n  \"label\": \"台东\",\n  \"value\": \"661501\" }],\n\n[{\n  \"label\": \"花莲\",\n  \"value\": \"661601\" }],\n\n[{\n  \"label\": \"澎湖\",\n  \"value\": \"661701\" }]],\n\n\n[\n[{\n  \"label\": \"香港岛\",\n  \"value\": \"670101\" }],\n\n[{\n  \"label\": \"九龙\",\n  \"value\": \"670201\" }],\n\n[{\n  \"label\": \"新界\",\n  \"value\": \"670301\" }]],\n\n\n[\n[{\n  \"label\": \"澳门半岛\",\n  \"value\": \"680101\" }],\n\n[{\n  \"label\": \"氹仔岛\",\n  \"value\": \"680201\" }],\n\n[{\n  \"label\": \"路环岛\",\n  \"value\": \"680301\" }],\n\n[{\n  \"label\": \"路氹城\",\n  \"value\": \"680401\" }]]];var _default =\n\n\n\nareaData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///430\n");

/***/ }),

/***/ 47:
/*!********************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/common/js/request.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _index = _interopRequireDefault(__webpack_require__(/*! ../../store/index.js */ 16));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nvar server = _index.default.state.serverUrl;\nvar http = {\n\n  get: function get(entity) {\n    // Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。\n    return new Promise(function (resolve, reject) {\n      if (!entity.title) {\n        uni.showLoading({\n          title: '请求中...' });\n\n      } else {\n        uni.showLoading({\n          title: entity.title + '...' });\n\n      }\n\n      var header2 = {\n        'content-type': 'application/json'\n        //自定义请求头信息\n      };\n      if (entity.header) {\n        header2 = entity.header;\n      }\n      uni.request({\n        url: server + entity.url, //仅为示例，并非真实接口地址。\n        method: 'GET',\n        data: entity.data,\n        header: header2,\n        success: function success(res) {\n          uni.hideLoading();\n\n          if (res.statusCode != 200) {\n\n            uni.showToast({\n              icon: 'none',\n              title: '网络连接失败!' });\n\n\n            reject(res);\n\n          }\n\n\n          if (res.data.code) {\n            if (res.data.code == 1000) {\n              uni.showToast({\n                icon: 'none',\n                title: '业务请求失败:权限不足!' });\n\n              reject(res);\n            }\n            if (res.data.code == 900) {\n              uni.showToast({\n                icon: 'none',\n                title: '业务请求失败:!系统错误:' + res.data.message });\n\n              reject(res);\n            }\n          } else {\n            if (res.data.status == true) {\n              resolve(res.data.data);\n            } else {\n              if (res.data) {\n                uni.showToast({\n                  icon: 'none',\n                  title: '业务请求失败:' + res.data.message });\n\n                reject(res.data.message);\n              } else {\n\n                uni.showToast({\n                  icon: 'none',\n                  title: '网络请求失败' });\n\n                reject(res);\n\n              }\n\n            }\n          }\n        },\n        fail: function fail(err) {\n          uni.hideLoading();\n          uni.showToast({\n            icon: 'none',\n            title: '网络请求失败:超时!' });\n\n          console.log(__f__(\"网络请求错误:\", \" at common\\\\js\\\\request.js:89\"));\n          reject(err);\n        } });\n\n\n    });\n\n  },\n  post: function post(entity) {\n    // Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。\n    return new Promise(function (resolve, reject) {\n      if (!entity.title) {\n        uni.showLoading({\n          title: '请求中...' });\n\n      } else {\n        uni.showLoading({\n          title: entity.title + '...' });\n\n      }\n      var header2 = {\n        'content-type': 'application/json'\n        //自定义请求头信息\n      };\n      if (entity.header) {\n        header2 = entity.header;\n      }\n      uni.request({\n        url: server + entity.url, //仅为示例，并非真实接口地址。\n        method: 'POST',\n        data: entity.data,\n        header: header2,\n        success: function success(res) {\n          uni.hideLoading();\n          if (res.statusCode != 200) {\n            uni.showToast({\n              icon: 'none',\n              title: '网络连接失败!' });\n\n            resolve(res);\n          }\n          if (res.data.code) {\n\n            if (res.data.code == 1000) {\n              uni.showToast({\n                icon: 'none',\n                title: '请求失败:权限不足!' });\n\n              resolve(res);\n            }\n            if (res.data.code == 900) {\n              uni.showToast({\n                icon: 'none',\n                title: '业务请求失败:' + res.data.message });\n\n              resolve(res);\n            }\n          } else {\n            if (res.data.status == true) {\n\n              resolve(res.data.data);\n\n\n            } else {\n              if (res.data) {\n                uni.showToast({\n                  icon: 'none',\n                  title: '业务请求失败:' + res.data.message });\n\n                reject(res.data.message);\n              } else {\n\n                uni.showToast({\n                  icon: 'none',\n                  title: '网络请求失败' });\n\n                reject(res);\n\n              }\n            }\n          }\n        },\n        fail: function fail(err) {\n          uni.hideLoading();\n          uni.showToast({\n            icon: 'none',\n            title: '网络请求失败:超时!' });\n\n          console.log(__f__(\"网络请求错误:\", \" at common\\\\js\\\\request.js:177\"));\n          reject(err);\n\n        } });\n\n\n    });\n\n  },\n  getWithNoStatus: function getWithNoStatus(entity) {\n    // Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。\n    return new Promise(function (resolve, reject) {\n      if (!entity.title) {\n        uni.showLoading({\n          title: '请求中...' });\n\n      } else {\n        uni.showLoading({\n          title: entity.title + '...' });\n\n      }\n      var header2 = {\n        'content-type': 'application/json'\n        //自定义请求头信息\n      };\n      if (entity.header) {\n        header2 = entity.header;\n      }\n      uni.request({\n        url: server + entity.url, //仅为示例，并非真实接口地址。\n        method: 'GET',\n        data: entity.data,\n        header: header2,\n        success: function success(res) {\n          uni.hideLoading();\n          if (res.statusCode != 200) {\n\n            uni.showToast({\n              icon: 'none',\n              title: '网络连接失败!' });\n\n\n            resolve(res);\n\n          }\n          if (res.data.code) {\n\n            if (res.data.code == 1000) {\n              uni.showToast({\n                icon: 'none',\n                title: '请求失败:权限不足!' });\n\n              reject(res);\n            }\n            if (res.data.code == 900) {\n              uni.showToast({\n                icon: 'none',\n                title: '业务请求失败:' + res.data.message });\n\n              reject(res);\n            }\n          } else {\n            if (res.data) {\n\n              resolve(res);\n\n            } else {\n\n\n\n              uni.showToast({\n                icon: 'none',\n                title: '网络请求失败' });\n\n\n\n              reject(res);\n            }\n          }\n        },\n        fail: function fail(err) {\n          uni.hideLoading();\n          uni.showToast({\n            icon: 'none',\n            title: '网络请求失败:超时!' });\n\n          console.log(__f__(\"网络请求错误:\", \" at common\\\\js\\\\request.js:263\"));\n          reject(err);\n\n        } });\n\n\n    });\n\n  },\n  postWithNoStatus: function postWithNoStatus(entity) {\n    // Promise 是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法。\n    return new Promise(function (resolve, reject) {\n      if (!entity.title) {\n        uni.showLoading({\n          title: '请求中...' });\n\n      } else {\n        uni.showLoading({\n          title: entity.title + '...' });\n\n      }\n      var header2 = {\n        'content-type': 'application/json'\n        //自定义请求头信息\n      };\n      if (entity.header) {\n        header2 = entity.header;\n      }\n      uni.request({\n        url: server + entity.url, //仅为示例，并非真实接口地址。\n        method: 'POST',\n        data: entity.data,\n        header: header2,\n        success: function success(res) {\n          uni.hideLoading();\n          if (res.statusCode != 200) {\n\n            uni.showToast({\n              icon: 'none',\n              title: '网络连接失败!' });\n\n\n            resolve(res);\n\n          }\n          if (res.data.code) {\n\n            if (res.data.code == 1000) {\n              uni.showToast({\n                icon: 'none',\n                title: '业务请求失败:权限不足!' });\n\n              resolve(res);\n            }\n            if (res.data.code == 900) {\n              uni.showToast({\n                icon: 'none',\n                title: '业务请求失败:' + res.data.message });\n\n              resolve(res);\n            }\n          } else {\n            if (res.data) {\n              resolve(res);\n            } else {\n              uni.showToast({\n                icon: 'none',\n                title: '网络请求失败' });\n\n              reject(res);\n            }\n          }\n        },\n        fail: function fail(err) {\n          uni.hideLoading();\n          uni.showToast({\n            icon: 'none',\n            title: '网络请求失败:超时!' });\n\n          console.log(__f__(\"网络请求错误:\", \" at common\\\\js\\\\request.js:342\"));\n          reject(err);\n\n        } });\n\n\n    });\n\n  } };var _default =\n\n\n\nhttp;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@alpha\",\"_id\":\"@dcloudio/uni-stat@2.0.0-alpha-25120200103005\",\"_inBundle\":false,\"_integrity\":\"sha512-nYoIrRV2e5o/vzr6foSdWi3Rl2p0GuO+LPY3JctyY6uTKgPnuH99d7aL/QQdJ1SacQjBWO+QGK1qankN7oyrWw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@alpha\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"alpha\",\"saveSpec\":null,\"fetchSpec\":\"alpha\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-alpha-25120200103005.tgz\",\"_shasum\":\"a77a63481f36474f3e86686868051219d1bb12df\",\"_spec\":\"@dcloudio/uni-stat@alpha\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"6be187a3dfe15f95dd6146d9fec08e1f81100987\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-alpha-25120200103005\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!***************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/pages.json?{"type":"style"} ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/main/main\": { \"navigationBarTitleText\": \"首页\", \"usingComponents\": { \"wuc-tab\": \"/components/wuc-tab/wuc-tab\", \"q-s-input\": \"/components/QS-inputs-split/elements/QS-input/index\", \"q-s-textarea\": \"/components/QS-inputs-split/elements/QS-textarea/index\", \"uni-popup\": \"/node-modules/@dcloudio/uni-ui/lib/uni-popup/uni-popup\", \"uni-list\": \"/node-modules/@dcloudio/uni-ui/lib/uni-list/uni-list\", \"uni-list-item\": \"/node-modules/@dcloudio/uni-ui/lib/uni-list-item/uni-list-item\", \"uni-drawer\": \"/node-modules/@dcloudio/uni-ui/lib/uni-drawer/uni-drawer\", \"q-s-pics\": \"/components/QS-inputs-split/elements/QS-pics/index\", \"uni-icons\": \"/node-modules/@dcloudio/uni-ui/lib/uni-icons/uni-icons\", \"uni-number-box\": \"/node-modules/@dcloudio/uni-ui/lib/uni-number-box/uni-number-box\" }, \"usingAutoImportComponents\": {} }, \"pages/login/login\": { \"navigationBarTitleText\": \"登录\", \"usingComponents\": { \"cmd-nav-bar\": \"/components/cmd-nav-bar/cmd-nav-bar\", \"cmd-page-body\": \"/components/cmd-page-body/cmd-page-body\", \"cmd-transition\": \"/components/cmd-transition/cmd-transition\", \"cmd-input\": \"/components/cmd-input/cmd-input\" }, \"usingAutoImportComponents\": {} }, \"pages/reg/reg\": { \"navigationBarTitleText\": \"注册\", \"usingComponents\": { \"cmd-nav-bar\": \"/components/cmd-nav-bar/cmd-nav-bar\", \"cmd-page-body\": \"/components/cmd-page-body/cmd-page-body\", \"cmd-transition\": \"/components/cmd-transition/cmd-transition\", \"cmd-input\": \"/components/cmd-input/cmd-input\" }, \"usingAutoImportComponents\": {} }, \"pages/pwd/modify\": { \"navigationBarTitleText\": \"找回密码\", \"usingComponents\": { \"cmd-nav-bar\": \"/components/cmd-nav-bar/cmd-nav-bar\", \"cmd-page-body\": \"/components/cmd-page-body/cmd-page-body\", \"cmd-transition\": \"/components/cmd-transition/cmd-transition\", \"cmd-input\": \"/components/cmd-input/cmd-input\" }, \"usingAutoImportComponents\": {} }, \"pages/user/user\": { \"navigationBarTitleText\": \"我的\", \"usingComponents\": { \"uni-list\": \"/node-modules/@dcloudio/uni-ui/lib/uni-list/uni-list\", \"uni-list-item\": \"/node-modules/@dcloudio/uni-ui/lib/uni-list-item/uni-list-item\", \"cmd-avatar\": \"/components/cmd-avatar/cmd-avatar\", \"cmd-cell-item\": \"/components/cmd-cell-item/cmd-cell-item\", \"cmd-icon\": \"/components/cmd-icon/cmd-icon\" }, \"usingAutoImportComponents\": {} }, \"pages/chat/chat\": { \"navigationBarTitleText\": \"聊天\", \"scrollIndicator\": \"none\", \"softinputNavBar\": \"none\", \"usingComponents\": { \"wkiwi-swipe-action\": \"/components/chat/wkiwi-swipe-action\" }, \"usingAutoImportComponents\": {} }, \"pages/HM-chat/HM-chat\": { \"navigationBarTitleText\": \"chat聊天室\", \"softinputNavBar\": \"none\", \"bounce\": \"none\", \"usingComponents\": { \"emotion\": \"/components/emotion/index\" }, \"usingAutoImportComponents\": {} }, \"pages/user/info\": { \"navigationBarTitleText\": \"个人资料\", \"usingComponents\": { \"q-s-input\": \"/components/QS-inputs-split/elements/QS-input/index\", \"q-s-radio\": \"/components/QS-inputs-split/elements/QS-radio/index\", \"q-s-checkbox\": \"/components/QS-inputs-split/elements/QS-checkbox/index\", \"q-s-picker-city\": \"/components/QS-inputs-split/elements/QS-picker-city/index\", \"q-s-picker-date\": \"/components/QS-inputs-split/elements/QS-picker-date/index\", \"q-s-picker-custom\": \"/components/QS-inputs-split/elements/QS-picker-custom/index\", \"q-s-picker-custom2\": \"/components/QS-inputs-split/elements/QS-picker-custom2/index\", \"q-s-pics\": \"/components/QS-inputs-split/elements/QS-pics/index\", \"q-s-infinite-pics\": \"/components/QS-inputs-split/elements/QS-infinitePics/index\", \"q-switch\": \"/components/QS-inputs-split/elements/QS-switch/index\" }, \"usingAutoImportComponents\": {} }, \"pages/user/audit\": { \"navigationBarTitleText\": \"短信验证\", \"usingComponents\": {}, \"usingAutoImportComponents\": {} }, \"pages/user/detail\": { \"navigationBarTitleText\": \"个人资料\", \"enablePullDownRefresh\": true, \"usingComponents\": { \"cmd-nav-bar\": \"/components/cmd-nav-bar/cmd-nav-bar\", \"cmd-page-body\": \"/components/cmd-page-body/cmd-page-body\", \"cmd-transition\": \"/components/cmd-transition/cmd-transition\", \"cmd-cel-item\": \"/components/cmd-cell-item/cmd-cell-item\", \"cmd-avatar\": \"/components/cmd-avatar/cmd-avatar\" }, \"usingAutoImportComponents\": {} }, \"pages/cargo/cargo/cargo\": { \"navigationBarTitleText\": \"物品详情\", \"usingComponents\": { \"uni-card\": \"/node-modules/@dcloudio/uni-ui/lib/uni-card/uni-card\", \"uni-swiper-dot\": \"/node-modules/@dcloudio/uni-ui/lib/uni-swiper-dot/uni-swiper-dot\", \"uni-icons\": \"/node-modules/@dcloudio/uni-ui/lib/uni-icons/uni-icons\", \"uni-drawer\": \"/node-modules/@dcloudio/uni-ui/lib/uni-drawer/uni-drawer\", \"cmd-cel-item\": \"/components/cmd-cell-item/cmd-cell-item\", \"cmd-avatar\": \"/components/cmd-avatar/cmd-avatar\" }, \"usingAutoImportComponents\": {} }, \"pages/order/order\": { \"navigationBarTitleText\": \"订单\", \"enablePullDownRefresh\": true, \"usingComponents\": { \"uni-pagination\": \"/node-modules/@dcloudio/uni-ui/lib/uni-pagination/uni-pagination\", \"uni-badge\": \"/node-modules/@dcloudio/uni-ui/lib/uni-badge/uni-badge\", \"uni-drawer\": \"/node-modules/@dcloudio/uni-ui/lib/uni-drawer/uni-drawer\", \"cmd-cel-item\": \"/components/cmd-cell-item/cmd-cell-item\", \"cmd-avatar\": \"/components/cmd-avatar/cmd-avatar\", \"h-form-alert\": \"/components/h-form-alert/h-form-alert\", \"uni-popup\": \"/node-modules/@dcloudio/uni-ui/lib/uni-popup/uni-popup\" }, \"usingAutoImportComponents\": {} }, \"pages/myPackage/myPackage\": { \"navigationBarTitleText\": \"我的寄件包裹\", \"enablePullDownRefresh\": true, \"usingComponents\": { \"uni-pagination\": \"/components/uni-pagination/uni-pagination\", \"uni-badge\": \"/node-modules/@dcloudio/uni-ui/lib/uni-badge/uni-badge\", \"uni-drawer\": \"/node-modules/@dcloudio/uni-ui/lib/uni-drawer/uni-drawer\", \"cmd-cel-item\": \"/components/cmd-cell-item/cmd-cell-item\", \"cmd-avatar\": \"/components/cmd-avatar/cmd-avatar\", \"h-form-alert\": \"/components/h-form-alert/h-form-alert\", \"uni-popup\": \"/node-modules/@dcloudio/uni-ui/lib/uni-popup/uni-popup\" }, \"usingAutoImportComponents\": {} } }, \"globalStyle\": { \"navigationBarTextStyle\": \"white\", \"navigationBarBackgroundColor\": \"#0faeff\", \"backgroundColor\": \"#fbf9fe\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!**************************************************************************!*\
  !*** F:/HelloHbuilder/新建文件夹/suanjiaotong-cli/pages.json?{"type":"stat"} ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__3D111EA\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX18zRDExMUVBXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);